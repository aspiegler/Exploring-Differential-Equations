[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Exploring Differential Equations",
    "section": "",
    "text": "Preface\nThis collection of interactive Jupyter notebooks are intended as a set of activities for exploring models of differential equations and understanding their solutions (numerical, graphical, and analytical). Topics covered by these materials include first and second order differential equations, Laplace transforms, and systems of equations (linear and nonlinear). These materials serves as the textbook for the “MATH 3200: Elementary Differential Equations” course at University of Colorado Denver."
  },
  {
    "objectID": "index.html#a-virtual-lab-for-experimenting-with-differential-equations",
    "href": "index.html#a-virtual-lab-for-experimenting-with-differential-equations",
    "title": "Exploring Differential Equations",
    "section": "A Virtual Lab for Experimenting with Differential Equations",
    "text": "A Virtual Lab for Experimenting with Differential Equations\n\nThese materials are intended as set of activities to experiment and explore differential equations. Each interactive Jupyter notebooks is a “virtual laboratory” where we perform our experiments and summarize the results. The objectives of experimental mathematics are generally to make mathematics more tangible, lively and fun.\nThe intent of introducing Python is not to avoid a deep and rigorous understanding of differential equations and simply use Python to solve differential equations. There are other sources that skim the concepts on the surface and focus on the coding side of things. These materials use Python as an additional tool for further exploring differential equations to gain a deeper insight into modeling with differential equations. Some of the objectives of implementing Python code cells into the materials are to:\n\nDiscover patterns and relationships.\nUse graphical displays to investigate mathematical concepts.\nDevelop and test conjectures.\nExplore results to help construct proofs.\nConfirm analytically derived results.\nGain further insight and intuition.\nBridge the divide between theory and practice."
  },
  {
    "objectID": "index.html#how-to-access-edit-and-save-notebooks",
    "href": "index.html#how-to-access-edit-and-save-notebooks",
    "title": "Exploring Differential Equations",
    "section": "How to Access, Edit and Save Notebooks",
    "text": "How to Access, Edit and Save Notebooks\n\nThis html version of the materials is not dynamic. You cannot edit the text or run code with the html version.\n \n\nAt the top of each notebook is a “button” such as the one above.\nClick the button to open an interactive Jupyter notebook version in Google Colaboratory (or Colab).\nYou can begin working with the notebook right away in Colab! There is no software to install (or purchase!).\nYou can also access the materials directly on GitHub at https://github.com/CU-Denver-MathStats-OER/ODEs.git.\n\nEach Jupyter notebook contains both narrative text (in Markdown cells) and Python code cells that you can create, modify, and run.\n\n\n\n\n\n\nCaution\n\n\n\nAlthough you do not need a Google account to interact with the notebooks, the Colab notebooks are “shared”, meaning you cannot save any changes to the initial shared document that opens. If you would like to save your changes, you first need to save a copy to your Google Drive. Then you can edit and save changes to your own version."
  },
  {
    "objectID": "index.html#what-programming-background-is-required",
    "href": "index.html#what-programming-background-is-required",
    "title": "Exploring Differential Equations",
    "section": "What Programming Background is Required?",
    "text": "What Programming Background is Required?\n\nNo prior experience or knowledge of Python, Markdown, LaTeX, or Colaboratory is assumed or required to begin working with these materials. After working with these materials, you will have some knowledge and experience with Python, Markdown, LaTeX, and Colaboratory!\n\nWelcome to Colaboratory is a helpful notebook (with videos) to help introduce you to Colab.\nHere’s a helpful Markdown guide.\n\n\nWhat is Python?\n\nWe will be using Python as a tool for experimenting with differential equations. Python is a widely used programming language suited for many purposes and applications such as computational mathematics, data science, and app development. We will create, modify, and run Python code in Jupyter notebooks. No prior programming experience is required to begin working in Python in these materials.\nThe goal of these materials are to investigate differential equations, not learn how to be an expert Python coder. The hope is that we can use Python as a tool for experimenting and gaining insight into differential equations, and in the process, gain a familiarity with Python and coding so it is no longer a barrier. Have I mentioned no prior programming experience is required to begin working in Python in these materials?\nThere are two Python modules (ode_tools.py and mass_spring.py) that accompany these materials with scripts to perform certain tasks such as plotting slope fields, Euler’s method, plotting phase planes, and widgets for experimenting with mass-spring systems. Whenever these modules are used, instructions are provided. There are more detailed instructions found:\n\nQuick Reference for Python Functions: Chapter 1\nQuick Reference for Python Functions: Chapter 2\nQuick Reference for Python Functions: Chapter 3\n\n\n\nWhat is LaTex?\n\nLaTeX is a system for rendering nice looking mathematical symbols, expressions, and equations. All of the mathematical notation in these materials are created using LaTeX. You can view and edit all of the LaTeX code in the Markdown cells. You do not need to become an expert in LaTeX, but having a familiarity with LaTeX is quite helpful and LaTeX can be used to typeset math in a number of different applications.\n\nHere is a useful dictionary of LaTeX math symbols to get a glimpse of LaTeX."
  },
  {
    "objectID": "index.html#a-remix-of-inquiry-oriented-differential-equations",
    "href": "index.html#a-remix-of-inquiry-oriented-differential-equations",
    "title": "Exploring Differential Equations",
    "section": "A Remix of Inquiry-Oriented Differential Equations",
    "text": "A Remix of Inquiry-Oriented Differential Equations\n\nPrior to creating these notebooks, I was teaching differential equation using Inquiry-Oriented Differential Equations (IODE) by Rasmussen, C., Keene, K. A., Dunmyre, J., & Fortune, N. IODE course materials are available at https://iode.sdsu.edu. The IODE content has been kindly shared by the authors for revising, remixing and redistributing.\n\nSome notebooks in these collection are not based on IODE content.\nSome notebooks are almost identical with IODE content.\nSome sections are modifications of IODE materials.\n\nMuch gratitude and thanks to the IODE team for creating and sharing amazing content with instructors and students of differential equations!"
  },
  {
    "objectID": "index.html#supplemental-oer-texts",
    "href": "index.html#supplemental-oer-texts",
    "title": "Exploring Differential Equations",
    "section": "Supplemental OER Texts",
    "text": "Supplemental OER Texts\n\nBelow are two suggested Open Education Resources (OER) texts for a first course in differential equations for further reading.\n\nNotes on Diffy Qs: Differential Equations for Engineers by Jiri Lebl.\nElementary Differential Equations by William F. Trench"
  },
  {
    "objectID": "index.html#how-to-contact-me",
    "href": "index.html#how-to-contact-me",
    "title": "Exploring Differential Equations",
    "section": "How to Contact Me",
    "text": "How to Contact Me\n\nIf you have any questions, comments, or suggestions about these materials, please feel free to reach out to me (Adam) at adam.spiegler@ucdenver.edu.\n\nConsidering using these materials in your course? Please let me know if I can help.\nIf you do use some of these materials in your course, your feedback is welcome and appreciated.\nIf you materials that you would like to share or contribute to this project, great!"
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "Exploring Differential Equations",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\n\nThis project was supported by the Colorado Department of Higher Education (CDHE) OER Grant Program. A big thank you to Troy Butler, Jonathon Hirschi, and Dmitry Ostrovskiy for their feedback various contributions to these materials. Lastly, thanks to my students at CU Denver for all the feedback and encouragement in developing these materials!"
  },
  {
    "objectID": "index.html#creative-commons-license-information",
    "href": "index.html#creative-commons-license-information",
    "title": "Exploring Differential Equations",
    "section": "Creative Commons License Information",
    "text": "Creative Commons License Information\n\n \nExploring Differential Equations by Adam Spiegler (University of Colorado Denver) is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. This work is funded by an Institutional OER Grant from the Colorado Department of Higher Education (CDHE). Based on a work at https://github.com/CU-Denver-MathStats-OER/ODEs and original content created by Rasmussen, C., Keene, K. A., Dunmyre, J., & Fortune, N. (2018). Inquiry oriented differential equations: Course materials. Available at https://iode.sdsu.edu.\nFor similar interactive OER materials in other courses funded by this project in the Department of Mathematical and Statistical Sciences at the University of Colorado Denver, visit https://github.com/CU-Denver-MathStats-OER."
  },
  {
    "objectID": "index.html#quarto-books",
    "href": "index.html#quarto-books",
    "title": "Exploring Differential Equations",
    "section": "Quarto Books",
    "text": "Quarto Books\n\nThese materials are creating using Quarto books. To learn more about Quarto books visit https://quarto.org/docs/books."
  },
  {
    "objectID": "Chp1/01-What-is-a-Differential-Equation.html",
    "href": "Chp1/01-What-is-a-Differential-Equation.html",
    "title": "1.1: Interpreting Differential Equations",
    "section": "",
    "text": "Modeling Rates of Change\nOften scientists use rate of change equations in their study of population growth for one or more species. In this question we study systems of rate of change equations designed to inform us about the future populations for two species that are either competitive (that is, both species are harmed by interaction) or cooperative (that is, both species benefit from interaction).\nThe previous question dealt with a complex situation with two interacting species. To develop the ideas and tools that we will need to further analyze complex situations like these, we will simplify the situation by making the following assumptions:\nA differential equation is an equation that relates an unknown function to its derivative(s). Suppose \\(y = y(t)\\) is some unknown function, then a differential equation, would express the rate of change, \\(\\frac{dy}{dt}\\), in terms of \\(y\\) and/or \\(t\\). For example, all of the following are first order differential equations.\n\\[ \\frac{dP}{dt}=kP, \\qquad \\frac{dy}{dt}=y+2t, \\qquad \\frac{dy}{dt}=t^2+5, \\qquad \\frac{dy}{dt}=\\frac{6y-2}{ty}, \\qquad \\frac{dy}{dt}=\\frac{y^2-1}{t^2+2t}\\]\nGiven a differential equation for some unknown function, solutions are functions that satisfy the rate change equation.\nOne way to read the differential equation \\(\\frac{dy}{dt} = y+2t\\) aloud you would say, “dee \\(y\\) dee \\(t\\) equals \\(y\\) plus two times \\(t\\).” However, this does not relate to the meaning of the solution.\nWe will be using Python as a tool for experimenting with differential equations. Python is a widely used programming language suited for many purposes and applications such as computational mathematics, data science, and app development. We will create, modify, and run Python code in Jupyter notebooks. No prior programming experience is required to begin working in Python in this (or any future) notebook.\nExploring Differential Equations by Adam Spiegler is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.  Based on a work at https://github.com/CU-Denver-MathStats-OER/ODEs and original content created by Rasmussen, C., Keene, K. A., Dunmyre, J., & Fortune, N. (2018). Inquiry oriented differential equations: Course materials. Available at https://iode.sdsu.edu."
  },
  {
    "objectID": "Chp1/01-What-is-a-Differential-Equation.html#sec-01quest1",
    "href": "Chp1/01-What-is-a-Differential-Equation.html#sec-01quest1",
    "title": "1.1: Interpreting Differential Equations",
    "section": "Question 1:",
    "text": "Question 1:\n\nWhich system of rate of change equations below describes a situation where the two species compete and which system describes cooperative species? Explain your reasoning.\n\\[\n\\mbox{(i) }  \\begin{aligned}[t]\n        \\frac{dx}{dt} &= -5x +2xy\\\\\n        \\frac{dy}{dt} &= -4y +3xy\n        \\end{aligned}\n\\qquad\n\\mbox{(ii) } \\begin{aligned}[t]\n        \\frac{dx}{dt} &= 4x -2xy\\\\\n        \\frac{dy}{dt} &= 2y - xy\n        \\end{aligned}\n\\]\n\nSolution to Question 1:"
  },
  {
    "objectID": "Chp1/01-What-is-a-Differential-Equation.html#sec-01quest2",
    "href": "Chp1/01-What-is-a-Differential-Equation.html#sec-01quest2",
    "title": "1.1: Interpreting Differential Equations",
    "section": "Question 2:",
    "text": "Question 2:\n\nGiven these assumptions for a certain lake containing fish, sketch three possible population versus time graphs: one starting at \\(P = 10\\), one starting at \\(P = 20\\), and the third starting at \\(P = 30\\).\n\n\nQuestion 2a:\n\nFor your graph starting with \\(P = 10\\), how does the slope vary as time increases? Explain.\n\nSolution to Question 2a:\n\n\n\n\n\n\n\nQuestion 2b:\n\nFor a set \\(P\\) value, say \\(P = 30\\), how do the slopes vary across the three graphs you drew?\n\nSolution to Question 2b:"
  },
  {
    "objectID": "Chp1/01-What-is-a-Differential-Equation.html#sec-01quest3",
    "href": "Chp1/01-What-is-a-Differential-Equation.html#sec-01quest3",
    "title": "1.1: Interpreting Differential Equations",
    "section": "Question 3:",
    "text": "Question 3:\n\nThis situation can also be modeled with a rate of change equation, \\[\\frac{dP}{dt}=\\mbox{something}\\].\n\nWhat should the “something” be?\nShould the rate of change be stated in terms of just \\(P\\), just \\(t\\), or both \\(P\\) and \\(t\\)?\nMake a conjecture about the right hand side of the rate of change equation and provide reasons for your conjecture.\n\n\nSolution to Question 3:"
  },
  {
    "objectID": "Chp1/01-What-is-a-Differential-Equation.html#sec-01quest4",
    "href": "Chp1/01-What-is-a-Differential-Equation.html#sec-01quest4",
    "title": "1.1: Interpreting Differential Equations",
    "section": "Question 4:",
    "text": "Question 4:\n\nIs the function \\(y=1+t\\) a solution to the differential equation \\(\\displaystyle\\frac{dy}{dt}=\\frac{y^2-1}{t^2+2t}\\)? How about the function \\(y=1+2t\\)? How about \\(y = 1\\)? Explain your reasoning.\n\nSolution to Question 4:"
  },
  {
    "objectID": "Chp1/01-What-is-a-Differential-Equation.html#sec-01quest5",
    "href": "Chp1/01-What-is-a-Differential-Equation.html#sec-01quest5",
    "title": "1.1: Interpreting Differential Equations",
    "section": "Question 5:",
    "text": "Question 5:\n\nIs the function \\(y=t^3+2t\\) a solution to the differential equation \\(\\displaystyle \\frac{dy}{dt}=3y^2+2\\)? Why or why not?\n\nSolution to Question 5:"
  },
  {
    "objectID": "Chp1/01-What-is-a-Differential-Equation.html#sec-01quest6",
    "href": "Chp1/01-What-is-a-Differential-Equation.html#sec-01quest6",
    "title": "1.1: Interpreting Differential Equations",
    "section": "Question 6:",
    "text": "Question 6:\n\nDetermine all of the functions that satisfy the rate of change equation \\(\\displaystyle \\frac{dP}{dt}=0.3P\\).\n\nSolution to Question 6:"
  },
  {
    "objectID": "Chp1/01-What-is-a-Differential-Equation.html#sec-01quest7",
    "href": "Chp1/01-What-is-a-Differential-Equation.html#sec-01quest7",
    "title": "1.1: Interpreting Differential Equations",
    "section": "Question 7:",
    "text": "Question 7:\n\nDetermine all of the solutions to the differential equation \\(\\displaystyle\\frac{dy}{dt}=t^2+5\\).\n\nSolution to Question 7:"
  },
  {
    "objectID": "Chp1/01-What-is-a-Differential-Equation.html#the-sympy-package",
    "href": "Chp1/01-What-is-a-Differential-Equation.html#the-sympy-package",
    "title": "1.1: Interpreting Differential Equations",
    "section": "The SymPy Package",
    "text": "The SymPy Package\n\nPython packages are a collection of modules, functions, data, and/or other code scripts written and openly shared by other users. There are packages to perform many common tasks in mathematics such as plotting graphs, using the number \\(\\pi\\), taking derivatives, and solving equations. This semester, we will frequently use the SymPy package in Python to symbolically differentiate, integrate, and manipulate functions.\nBefore we can access any files in a package, we must first import the package. Run the code cell below to import the SymPy package with the abbreviation sym.\n\nWe only need to import a package one time during an active Python session.\nWe can use the abbreviation sym instead of the full sympy to call in functions and modules from the SymPy package.\n\n\nimport sympy as sym  # First we need to import sympy, we use the abbreviation sym\n\n\nSymbolic Variables and Functions\n\nPython (like most programming languages) is a very literal language. If we would like to define and store the function \\(P = Ae^{kt}\\) in Python, we need to be sure Python is reading all the letters and mathematical operations as we intend.\n\nWe might intend some letters such as \\(t\\) and \\(P\\) to denote variables.\nSome letters such as \\(A\\) and \\(k\\) might denote constant parameters.\nThe letter \\(e\\) denotes the natural exponential number.\n\nThe command x, y, z = sympy.symbols('x y z') defines \\(x\\), \\(y\\), and \\(z\\) as variables. We use our abbreviation sym.symbols() for this command. Run the code cell below to create a new symbol t.\n\nt = sym.symbols('t')  # Creating t as symbols\n\n\nSymPy Functions\n\nNext we use functions available within SymPy to create the symbolic function \\(P=7e^{0.3t}\\).\n\nWe have already defined the symbol t.\nWe use the function sympy.exp() that we abbreviate with sym.exp().\nWe must explicitly tell Python how to combine different objects.\n\nBy default, the expression xy is read as a single object named xy.\nIf you want to multiply x and y, then specify the operation with x * y.\nAdding extra spaces helps make the expression easier to read.\n\n\nRun the code cell below to define the exponential function \\(P\\).\n\nP = 7 * sym.exp(0.3 * t)\n\n\n\nPrinting Output\n\nAfter running the code cell above, there is no output visible on the screen. The code cell above created the function and stored the function to P. In order to see the output, you need to command Python to print the output to the screen using either print(P) or more simply P.\nRun the code cell below to print the function P to the screen.\n\nP  # The output for a symbolic function in SymPy is \"pretty\""
  },
  {
    "objectID": "Chp1/01-What-is-a-Differential-Equation.html#computing-derivatives-with-sympy",
    "href": "Chp1/01-What-is-a-Differential-Equation.html#computing-derivatives-with-sympy",
    "title": "1.1: Interpreting Differential Equations",
    "section": "Computing Derivatives with SymPy",
    "text": "Computing Derivatives with SymPy\n\nWe now use SymPy to find formulas for derivatives of \\(P\\) with respect to \\(t\\).\n\nThe differentiation function is sympy.diff(f, t, n) finds a formula for the \\(n^{\\mbox{th}}\\) derivative of f with respect to variable t.\nIf we have already defined function f, then f.diff(t, n) can be used in place of sympy.diff(f, t, n).\n\n\nsym.diff(P, t, 1) # Differentiate P with respect to t\n\n\nP.diff(t, 1)  # Differentiate P with respect to t\n\n\nP.diff(t, 5)  # This computes a 5th order derivative."
  },
  {
    "objectID": "Chp1/01-What-is-a-Differential-Equation.html#sec-01quest8",
    "href": "Chp1/01-What-is-a-Differential-Equation.html#sec-01quest8",
    "title": "1.1: Interpreting Differential Equations",
    "section": "Question 8:",
    "text": "Question 8:\n\nConsider the function \\(y = 3\\sin{(2x)} - 5 \\cos{(2x)}\\).\nUse SymPy to create a symbolic function and find an expression for \\(y''\\). Several blank code cells are below to get you started.\n\n\n\n\n\n\nTip\n\n\n\nYou will first need to create a new symbolic variable x.\n\n\n\nSolution to Question 8:"
  },
  {
    "objectID": "Chp1/01-What-is-a-Differential-Equation.html#integration-with-sympy",
    "href": "Chp1/01-What-is-a-Differential-Equation.html#integration-with-sympy",
    "title": "1.1: Interpreting Differential Equations",
    "section": "Integration with SymPy",
    "text": "Integration with SymPy\n\nSymPy has an integrals module with lots of built-in functions for computing indefinite and definite integrals as well as common integral transforms (such as Laplace and Fourier transforms).\n\nThe function sympy.integrate([expr], t) finds an antiderivative (with constant of integration \\(C=0\\)) of the expression with respect to t.\nIf we have already stored the expression to the function f, we can also use the command f.integrate(t).\nTo evaluate a definite integral \\(\\int_a^b f(t) \\, dt\\), use sympy.integrate(f, (t, a, b))\n\nWe show some examples below. Feel free to experiment!\n\n\n\n\n\n\nCaution\n\n\n\nThe output of sympy.integrate([expr], t) is not the infinite family of all possible antiderivatives. The output is the antiderivative with constant of integration \\(C=0\\).\n\n\n\nt, k = sym.symbols('t, k')  # Creating t and k as symbols\n\n\n# Note that indefinite integrals do not include the constant of integration \n\nsym.integrate(t**2 + k, t)  # Determines an antiderivative of the function $t^2+k$ with respect to t\n\n\nsym.integrate(t**2 + k, k)  # Integrates with respect to k\n\n\nsym.integrate(t**2 + k, (t, 0, 1))  # A definite integral, with respect to t, from 0 to 1\n\n\nsym.integrate(t**2 + k, (t, 0, 1))  # A definite integral, with respect to t, from 0 to 1"
  },
  {
    "objectID": "Chp1/01-What-is-a-Differential-Equation.html#sec-01quest9",
    "href": "Chp1/01-What-is-a-Differential-Equation.html#sec-01quest9",
    "title": "1.1: Interpreting Differential Equations",
    "section": "Question 9:",
    "text": "Question 9:\n\nConsider the differential equation \\[ \\frac{dQ}{dp} = 2\\cos{(3p)}-p^3. \\]\nUse SymPy find all solutions to the differential equation. Several blank code cells are below to get you started, but students should feel free to make more as needed as well as adding Markdown cells for notes.\n\n\n\n\n\n\nTip\n\n\n\nYou will first need to create a new symbolic variable p.\n\n\n\nSolution to Question 9:"
  },
  {
    "objectID": "Chp1/02-Slope-Fields.html",
    "href": "Chp1/02-Slope-Fields.html",
    "title": "1.2: Slope Fields",
    "section": "",
    "text": "Plotting a Differential Equation\nA slope field is a graphical representation of a rate of change equation. Given a rate of change equation, if we plug in particular values of \\((t,y)\\) then \\(\\dfrac{dy}{dt}\\) tells you the slope of the tangent vector to the solution at that point.\nFor example, consider the rate of change equation \\(\\dfrac{dy}{dt}=\\dfrac{t^2y}{4}\\).\nA slope field depicts the exact slope of many such vectors, where we take each vector to be uniform length. Slope fields are useful because they provide a graphical approach for obtaining qualitatively correct graphs of the functions that satisfy a differential equation.\nTo create a slope field we can follow the following routine:\nWe will use a function named slope_field() whose code is found in the module ode_tools.py that is saved in GitHub.\nThe code cells below generate the figure illustrating the solution to Question 1.\n# import required packages\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.integrate import odeint, solve_ivp  # numerical ode solver\n# Plot 5 vectors in slope field\nplt.quiver(1, 4, 1, 1, color = 'green')  # Plot vector at (1,4) with slope dy/dt = 1/1 = 1 \nplt.quiver(2, -2, 1, -2, color = 'blue')  # Plot vector at (2,-2) with slope dy/dt = -2/1 = -2  \nplt.quiver(-3, -2, 1, -4.5, color = 'blue')  # Plot vector at (-3,-2) with slope dy/dt = -4.5/1 = -4.5 \nplt.quiver(-2, 1.9, 1, 2, color = 'blue')  # Plot vector at (-2,2) with slope dy/dt = 2/1 = 2 \nplt.quiver(0, -1, 1, 0, color = 'blue')  # Plot vector at (0,-1) with slope dy/dt = 0/1 = 0 \n\n# Set limits on horizontal and vertical axes\nplt.xlim([-5, 5])\nplt.ylim([-5, 5])\n\n# Label axes\nplt.xlabel(r\"$t$\", fontsize=14)\nplt.ylabel(r\"$y$\", fontsize=14)\n\n# Add a grid and axes to plot\nplt.xticks(np.linspace(-5,5,11))\nplt.yticks(np.linspace(-5,5,11))\nplt.grid(True, which='both')\nplt.axvline(x=0, color='black')\nplt.axhline(y=0, color='black')\n\nplt.show()\n# Solutions to diff eq\nt = np.linspace(-5, 5, 50)  # time interval for solution plots\ny0 = np.array([0.00011, -0.000030732613, -0.000568])  # initial conditions when t=-5\n\n# Define diff eq\ndef model(y, t):  # t is independent variable and y is dependent variable\n    dydt = 0.25 * t**2 * y  # enter the formula for dy/dt\n    return dydt\n\n# solve the IVP 1\nsol1 = odeint(model, y0[0], t)\n# solve the IVP 2\nsol2 = odeint(model, y0[1], t)\n# solve the IVP 3\nsol3 = odeint(model, y0[2], t)\n# Plot the 3 solutions\nplt.plot(t, sol1, color='green', linestyle='dashed', linewidth=1.0)\nplt.plot(t, sol2, color='red', linestyle='dashed', linewidth=1.0)\nplt.plot(t, sol3, color='purple', linestyle='dashed', linewidth=1.0)\n\n# Plot vectors 5 vectors\nplt.quiver(1, 4, 1, 1, color = 'green')  # plots vector at (1,4) with slope 1/1 = 1 \nplt.quiver(2, -2, 1, -2, color = 'blue')  # plots vector at (2,-2) with slope -2/1 = -2\nplt.quiver(-3, -2, 1, -4.5, color = 'blue')  # plots vector at (-3,-2) with slope -4.5/1 = -4.5\nplt.quiver(-2, 1.9, 1, 2, color = 'blue')  # plots vector at (-2,1.9) with slope 2/1 = 2\nplt.quiver(0, -1, 1, 0, color = 'blue')  # plots vector at (0,-1) with slope 0/1 = 0\n\n# Set limits on x and y axes\nplt.xlim([-5, 5])\nplt.ylim([-5, 5])\n\n# Label axes\nplt.xlabel(r\"$t$\", fontsize=14)\nplt.ylabel(r\"$y$\", fontsize=14)\n\n# Add a grid and axes to plot\nplt.xticks(np.linspace(-5,5,11))\nplt.yticks(np.linspace(-5,5,11))\nplt.grid(True, which='both')\nplt.axvline(x=0, color='black')\nplt.axhline(y=0, color='black')\n\nplt.show()\nfig = plt.figure()\n\n# Plot a more complete slope field\nX, Y = np.meshgrid(np.linspace(-5, 5, 21), np.linspace(-5, 5, 21))\nU = 1.0\nV = 0.25 * Y * X ** 2\n# Normalize arrows\nN = np.sqrt(U ** 2 + V ** 2)\nU = U / N\nV = V / N\nplt.quiver(X, Y, U, V, angles=\"xy\")\n\n# Plot 3 solutions\nplt.plot(t, sol1, color='green', linewidth=1.5)\nplt.plot(t, sol2, color='red', linewidth=1.5)\nplt.plot(t, sol3, color='purple', linewidth=1.5)\n\n\n# Plot 5 vectors\nplt.quiver(1, 4, 1, 1, color = 'blue')  # plots vector at (1,4) with slope 1/1 = 1 \nplt.quiver(2, -2, 1, -2, color = 'blue')  # plots vector at (2,-2) with slope -2/1 = -2\nplt.quiver(-3, -2, 1, -4.5, color = 'blue')  # plots vector at (-3,-2) with slope -4.5/1 = -4.5\nplt.quiver(-2, 1.9, 1, 2, color = 'blue')  # plots vector at (-2,1.9) with slope 2/1 = 2\nplt.quiver(0, -1, 1, 0, color = 'blue')  # plots vector at (0,-1) with slope 0/1 = 0\n\n# Add a grid and axes to plot\nplt.xticks(np.linspace(-5,5,11))\nplt.yticks(np.linspace(-5,5,11))\nplt.grid(True, which='both')\nplt.axvline(x=0, color='black')\nplt.axhline(y=0, color='black')\n\nplt.xlim([-5, 5])\nplt.ylim([-5, 5])\nplt.xlabel(r\"$t$\")\nplt.ylabel(r\"$y$\")\nExploring Differential Equations by Adam Spiegler is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Based on a work at https://github.com/CU-Denver-MathStats-OER/ODEs and original content created by Rasmussen, C., Keene, K. A., Dunmyre, J., & Fortune, N. (2018). Inquiry oriented differential equations: Course materials. Available at https://iode.sdsu.edu."
  },
  {
    "objectID": "Chp1/02-Slope-Fields.html#sec-02quest1",
    "href": "Chp1/02-Slope-Fields.html#sec-02quest1",
    "title": "1.2: Slope Fields",
    "section": "Question 1:",
    "text": "Question 1:\n\nCompute the slope of the solution to \\[\\dfrac{dy}{dt}= \\dfrac{t^2y}{4}\\] passing through each of the given points.\n\n\\((2,-2)\\)\n\\((0, -1)\\)\n\\((-2,2)\\)\n\\((-3,-2)\\)\n\n\nSolution to Question 1:"
  },
  {
    "objectID": "Chp1/02-Slope-Fields.html#slope-field-for-question-1",
    "href": "Chp1/02-Slope-Fields.html#slope-field-for-question-1",
    "title": "1.2: Slope Fields",
    "section": "Slope Field for Question 1",
    "text": "Slope Field for Question 1\n\n\nThe figure on the left shows the corresponding vectors at the points \\((1,4)\\), \\((2,-2)\\), \\((0, -1)\\), \\((-2,2)\\), and \\((-3,-2)\\).\nThe figure on the right gives a more complete slope field with several solutions added.\nSee the Appendix for the code used to generate the figures below.\n\n\n\n\n\n\n\nVectors from Question 1\n\n\n\n\n\n\n\nA More Complete Slope Fields with Solutions"
  },
  {
    "objectID": "Chp1/02-Slope-Fields.html#sec-02quest2",
    "href": "Chp1/02-Slope-Fields.html#sec-02quest2",
    "title": "1.2: Slope Fields",
    "section": "Question 2:",
    "text": "Question 2:\n\nDescribe the “long-run behavior” of the solution to \\(\\dfrac{dy}{dt}= \\dfrac{t^2y}{4}\\) that to passes through the given point.\n\n\\(y=-1\\) when \\(t=0\\)\n\\(y(-4) = 1\\)\n\\((2, 0)\\)\n\n\nSolution to Question 2:"
  },
  {
    "objectID": "Chp1/02-Slope-Fields.html#sec-02quest3",
    "href": "Chp1/02-Slope-Fields.html#sec-02quest3",
    "title": "1.2: Slope Fields",
    "section": "Question 3:",
    "text": "Question 3:\n\nBelow are seven differential equations and three different slope fields. Without using technology, identify which differential equation is the best match for each slope field (thus you will have four rate of change equations left over). Explain your reasoning.\n\\[\n\\text{(i) } \\frac{dy}{dt}=t-1 \\quad \\text{(ii) } \\frac{dy}{dt}=1-y^2 \\quad \\text{(iii) } \\frac{dy}{dt}=y^2-t^2 \\quad \\text{(iv) } \\frac{dy}{dt}=1-y\n\\]\n\\[\n\\text{(v) } \\frac{dy}{dt}=t^2-y^2 \\quad \\text{(vi) } \\frac{dy}{dt}=1-t \\quad \\text{(vii) } \\frac{dy}{dt}=9t^2-y^2\n\\]\n\n\n\n\n\n\n\n\nSlope Field 1\nSlope Field 2\nSlope Field 3\n\n\n\n\n\n\n\n\n\n\n\nSolution to Question 3:\n\n\n\nSlope field 1 matches equation ??\nSlope field 2 matches equation ??\nSlope field 3 matches equation ??"
  },
  {
    "objectID": "Chp1/02-Slope-Fields.html#sec-02quest4",
    "href": "Chp1/02-Slope-Fields.html#sec-02quest4",
    "title": "1.2: Slope Fields",
    "section": "Question 4:",
    "text": "Question 4:\n\nFor each of the slope fields in Question 3, sketch in graphs of several different qualitatively correct solutions. Do not use any technology to answer this question.\n\nSolution to Question 4:\n\n\n\nSketch your answers on the slope fields above."
  },
  {
    "objectID": "Chp1/02-Slope-Fields.html#sec-02LoadModule",
    "href": "Chp1/02-Slope-Fields.html#sec-02LoadModule",
    "title": "1.2: Slope Fields",
    "section": "Loading ode_tools from GitHub",
    "text": "Loading ode_tools from GitHub\n\n\nRun the code cell below to load the ode_tools module stored in GitHub.\nYou will only need to run this code cell one time during an active session.\nThe code cell below will take a couple of seconds to run. You can ignore the output while the code is running.\n\n\n!pip install git+https://github.com/CU-Denver-MathStats-OER/ODEs\nfrom IPython.display import clear_output\nclear_output()"
  },
  {
    "objectID": "Chp1/02-Slope-Fields.html#importing-the-slope_field-function",
    "href": "Chp1/02-Slope-Fields.html#importing-the-slope_field-function",
    "title": "1.2: Slope Fields",
    "section": "Importing the slope_field() Function",
    "text": "Importing the slope_field() Function\n\nNext, import the slope_field() function from the ode_tools module. You will only need to run this command one time during an active session.\n\nfrom utils.ode_tools import slope_field  # Only need to import one time."
  },
  {
    "objectID": "Chp1/02-Slope-Fields.html#importing-packages",
    "href": "Chp1/02-Slope-Fields.html#importing-packages",
    "title": "1.2: Slope Fields",
    "section": "Importing Packages",
    "text": "Importing Packages\n\nWe need to import two additional use packages in order to plot slope fields with the slope_field() function:\n\nNumPy is a package that is convenient for working with multidimensional arrays (such as vectors and matrices). See NumPy help documentation.\nMatplotlib is a package useful for creating static, animated, and interactive visualizations. See Matplotlib help documentation.\n\nThe pyplot subpackage in matplotlib that is a great tool in computational math. See pyplot help documentation.\n\nYou only need to import each package one time during an active session.\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "Chp1/02-Slope-Fields.html#plotting-slope-fields-with-slope_field",
    "href": "Chp1/02-Slope-Fields.html#plotting-slope-fields-with-slope_field",
    "title": "1.2: Slope Fields",
    "section": "Plotting Slope Fields with slope_field()",
    "text": "Plotting Slope Fields with slope_field()\n\nAfter importing the the packages above, we are ready to create a plot for the slope field of \\(\\dfrac{dy}{dt}=\\dfrac{t^2y}{4}\\).\n\nDefine arrays t and y to set up the grid where each vector will be plotted. The function np.linspace(initial, end, number) creates an array of number evenly spaced values between initial and end.\nDefine the differential equation diffeq(t, y).\nGenerate the slope field with the command slope_field(t, y, diffeq).\n\n\n\n\n\n\n\nTip\n\n\n\nSee Quick Reference Guide on How to Use Python Functions for Chapter 1 for more detailed instructions.\n\n\n\n# Set up the grid where each vector will be plotted\nt = np.linspace(-5, 5, 21)  # picks 21 evenly spaced values between t=-5 and t=5\ny = np.linspace(-5, 5, 21)  # picks 21 evenly spaced values between y=-5 and y=5\n\n# Setup the differential equation\ndef diffeq(t, y):  # t is independent variable and y is dependent variable\n    return 0.25 * t**2 * y  # enter the formula for dy/dt\n\n# Run the slope field plotter\nslope_field(t, y, diffeq)"
  },
  {
    "objectID": "Chp1/02-Slope-Fields.html#plotting-a-different-slope-field",
    "href": "Chp1/02-Slope-Fields.html#plotting-a-different-slope-field",
    "title": "1.2: Slope Fields",
    "section": "Plotting a Different Slope Field",
    "text": "Plotting a Different Slope Field\n\nNext we use slope_field() to generate a plot of the slope corresponding to\n\\[\\color{dodgerblue}{\\frac{dx}{dq} = 4q^2 - x^2}.\\]\nWe initially choose to plot the slope field over \\(-5 \\leq q \\leq 5\\) and \\(-5 \\leq x \\leq 5\\). Note when defining diffeq and using the slope_field() function we can change the letters for the independent and dependent variables to \\(q\\) and \\(x\\), respectively.\n\n# np.linspace(initial, end, number_values)\nq = np.linspace(-5, 5, 21)  # pick 21 values from q=-5 to q=5\nx = np.linspace(-5, 5, 21)  # pick 21 values from x=-5 to x=5\n\n# Define a new differential equation\ndef diffeq(q, x):  # q and x are independent and dependent variables\n    return 4 * q**2 - x**2  # formula for dx/dq\n\n\nRunning slope_field()\n\nNow that we have defined the differential equation and indicated where the vectors will be plotted, we can generate a new slope field using slope_field(). The code below also changes the color of the vectors from the default color (black) to green.\n\nslope_field(q, x, diffeq, color='green')"
  },
  {
    "objectID": "Chp1/02-Slope-Fields.html#sec-02quest5",
    "href": "Chp1/02-Slope-Fields.html#sec-02quest5",
    "title": "1.2: Slope Fields",
    "section": "Question 5:",
    "text": "Question 5:\n\nPlot each of the four differential equations whose slope fields were not plotted in Question 3.\n\nSolution to Question 5:\n\n\n\nReplace each ?? in each of the four code cells below to plot each slope field.  \n\n# plot missing slope field 1\n\n# Define points where vectors will be plotted\nt = np.linspace(??, ??, ??)  # Independent variable, np.linspace(initial, end, number_values)\ny = np.linspace(??, ??, ??)  # Dependent variable, np.linspace(initial, end, number_values)\n\n# Define the differential equation\ndef diffeq(t, y):  # t is independent variable and y is dependent variable\n    return ??  # enter the formula for dy/dt\n\n# Run the slope field plotter\nslope_field(t, y, diffeq)\n\n\n# plot missing slope field 2\n\n# Define points where vectors will be plotted\nt = np.linspace(??, ??, ??)  # Independent variable, np.linspace(initial, end, number_values)\ny = np.linspace(??, ??, ??)  # Dependent variable, np.linspace(initial, end, number_values)\n\n# Define the differential equation\ndef diffeq(t, y):  # t is independent variable and y is dependent variable\n    return ??  # enter the formula for dy/dt\n\n# Run the slope field plotter\nslope_field(t, y, diffeq)\n\n\n# plot missing slope field 3\n\n# Define points where vectors will be plotted\nt = np.linspace(??, ??, ??)  # Independent variable, np.linspace(initial, end, number_values)\ny = np.linspace(??, ??, ??)  # Dependent variable, np.linspace(initial, end, number_values)\n\n# Define the differential equation\ndef diffeq(t, y):  # t is independent variable and y is dependent variable\n    return ??  # enter the formula for dy/dt\n\n# Run the slope field plotter\nslope_field(t, y, diffeq)\n\n\n# plot missing slope field 4\n\n# Define points where vectors will be plotted\nt = np.linspace(??, ??, ??)  # Independent variable, np.linspace(initial, end, number_values)\ny = np.linspace(??, ??, ??)  # Dependent variable, np.linspace(initial, end, number_values)\n\n# Define the differential equation\ndef diffeq(t, y):  # t is independent variable and y is dependent variable\n    return ??  # enter the formula for dy/dt\n\n# Run the slope field plotter\nslope_field(t, y, diffeq)"
  },
  {
    "objectID": "Chp1/02-Slope-Fields.html#importing-plot_sol",
    "href": "Chp1/02-Slope-Fields.html#importing-plot_sol",
    "title": "1.2: Slope Fields",
    "section": "Importing plot_sol()",
    "text": "Importing plot_sol()\n\nWe have seen that slope fields are useful for sketching graphs to approximate solutions that pass through certain points. The arrows should be approximately tangent to the curve we sketch. In addition to the slope_field() function we used earlier, the ode_tools module defines other functions we will use this semester. We next import the function plot_sol() to plot a slope field as well as the solution that passes through a given point.\n\nfrom utils.ode_tools import plot_sol  # Only need to import the function once"
  },
  {
    "objectID": "Chp1/02-Slope-Fields.html#using-the-plot_sol-function",
    "href": "Chp1/02-Slope-Fields.html#using-the-plot_sol-function",
    "title": "1.2: Slope Fields",
    "section": "Using the plot_sol() Function",
    "text": "Using the plot_sol() Function\n\nAfter importing the the plot_sol() function from ode_tools and the NumPy and Matplotlib packages, we are ready to create a plot for the slope field of \\(\\dfrac{dy}{dt}=\\dfrac{t^2y}{4}\\) with the graph of the solution through the point \\((-2,2)\\).\n\nUse np.linspace() to define arrays t and y to set up the grid where each vector will be plotted.\nDefine the differential equation diffeq(t, y).\nDefine an initial condition \\((t_0, y_0)\\).\n\nThe initial value of \\(t\\) stored in the variable named t0.\nThe initial value of \\(y\\) is stored in the variable named y0.\n\nGenerate the slope field with the command plot_sol(t, y, diffeq, t0, y0).\n\n\n\n\n\n\n\nTip\n\n\n\nSee Quick Reference Guide on How to Use Python Functions for Chapter 1 for more detailed instructions.\n\n\n\n#from utils.ode_tools import plot_sol  # Only need to import the function once\n\n# Define points where vectors will be plotted\nt = np.linspace(-5, 5, 21)  \nx = np.linspace(-5, 5, 21)\n\n# Define the differential equation\ndef diffeq(t, y):  # t is independent variable and y is dependent variable\n    return 0.25 * t**2 * y  # enter the formula for dy/dt\n\n# Enter t0, the initial value of t\n# Enter y0, the value of y at t0\nt0 = -2\ny0 = 2\n\n# Run the function to create a plot\nplot_sol(t, y, diffeq, t0, y0)"
  },
  {
    "objectID": "Chp1/02-Slope-Fields.html#sec-02quest6",
    "href": "Chp1/02-Slope-Fields.html#sec-02quest6",
    "title": "1.2: Slope Fields",
    "section": "Question 6:",
    "text": "Question 6:\n\nUse the plot_sol() function to create a plot of the slope field and solution passing through the given point.\n\\[\\color{dodgerblue}{\\frac{dx}{dq} = 4q^2 - x^2, \\qquad x(-2)=3}.\\]\n\nSolution to Question 6:\n\n\n\nComplete the code block below. \n\n\n#from utils.ode_tools import plot_sol  # Only need to import the function once\n\n# Define points where vectors will be plotted\nq = np.linspace(??, ??, ??)  \nx = np.linspace(??, ??, ??)  \n\n# Define the differential equation\ndef diffeq(q, x):  # q is independent variable and x is dependent variable\n    return ??  # enter the formula for dx/dq\n\n# Enter q0, the initial value of q\n# Enter x0, the value of x at q0\nq0 = ??\nx0 = ??\n\n# Run the function to create a plot\nplot_sol(q, x, diffeq, q0, x0)"
  },
  {
    "objectID": "Chp1/03-Phase-Line.html",
    "href": "Chp1/03-Phase-Line.html",
    "title": "1.3: The Phase Line",
    "section": "",
    "text": "Analyzing Autonomous DEs: Spotted Owls\nA group of biologists are making predictions about the spotted owl population in a forest in the Pacific Northwest. The autonomous differential equation the scientist use to model the spotted owl population is\n\\[\\frac{dP}{dt}=\\frac{P}{2}\\left(1-\\frac{P}{5}\\right)\\left(\\frac{P}{8}-1\\right),\\]\nwhere \\(P\\) is in hundreds of owls and \\(t\\) is in years. The issue is that the current number of owls is only approximately known.\nA phase line is the standard one-dimensional diagram that depicts the qualitative behavior of solutions to an autonomous differential equation.\nExploring Differential Equations by Adam Spiegler is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Based on a work at https://github.com/CU-Denver-MathStats-OER/ODEs and original content created by Rasmussen, C., Keene, K. A., Dunmyre, J., & Fortune, N. (2018). Inquiry oriented differential equations: Course materials. Available at https://iode.sdsu.edu."
  },
  {
    "objectID": "Chp1/03-Phase-Line.html#sec-03quest1",
    "href": "Chp1/03-Phase-Line.html#sec-03quest1",
    "title": "1.3: The Phase Line",
    "section": "Question 1:",
    "text": "Question 1:\n\nSuppose the scientists estimate that currently \\(P\\) is about 5 (i.e. there are currently about 500 owls in the forest). Since 5 is only an estimate, they make long-term predictions of the owl population for the initial conditions \\(P = 4.9\\), \\(P = 5.0\\), and \\(P = 5.1\\).\nWithout using Python or any other technology, determine the long-term predictions for these initial conditions based on the differential equation. Will slightly different initial conditions yield only slightly different long-term predictions, or will they be radically different? Carry out a similar analysis if the current number of owls is somewhere near 800 owls.\n\nSolution to Question 1:"
  },
  {
    "objectID": "Chp1/03-Phase-Line.html#sec-03quest2",
    "href": "Chp1/03-Phase-Line.html#sec-03quest2",
    "title": "1.3: The Phase Line",
    "section": "Question 2:",
    "text": "Question 2:\n\nGive a one dimensional representation, without words, that would describe all solutions to the differential equation.\n\nSolution to Question 2:"
  },
  {
    "objectID": "Chp1/03-Phase-Line.html#sec-03quest3",
    "href": "Chp1/03-Phase-Line.html#sec-03quest3",
    "title": "1.3: The Phase Line",
    "section": "Question 3:",
    "text": "Question 3:\n\nLabel the dots and add arrows to the figure below to represent all solutions to the differential equation in Question 1.\n\n\nSolution to Question 3:"
  },
  {
    "objectID": "Chp1/03-Phase-Line.html#sec-03quest4",
    "href": "Chp1/03-Phase-Line.html#sec-03quest4",
    "title": "1.3: The Phase Line",
    "section": "Question 4:",
    "text": "Question 4:\n\nFor the differential equation in questions 1 thru 3 there are three equilibrium solutions. Recall that equilibrium solutions are constant functions that satisfy the differential equation. How do the other solution functions near each equilibrium solution behave in the long term? If you were to label each of these equilibrium solutions based on the way in which nearby solutions behave, what terms would you use and why?\n\nSolution to Question 4:"
  },
  {
    "objectID": "Chp1/03-Phase-Line.html#sec-03quest5",
    "href": "Chp1/03-Phase-Line.html#sec-03quest5",
    "title": "1.3: The Phase Line",
    "section": "Question 5:",
    "text": "Question 5:\n\nCreate an autonomous differential equation that has exactly two equilibrium solutions: \\(y(t)=3\\) is a stable equilibrium and \\(y(t) = -4\\) is an unstable equilibrium.\n\nSolution to Question 5:"
  },
  {
    "objectID": "Chp1/04-Eulers-Method.html",
    "href": "Chp1/04-Eulers-Method.html",
    "title": "1.4: Numerical Approximations",
    "section": "",
    "text": "A Rate of Change Equation for Limited Resources\nIn a previous question we saw that the rate of change equation \\(\\dfrac{dP}{dt}=0.3P\\) can be used to model a situation where there is one species, continuous reproduction, and unlimited resources. In most situations, however, the resources are not unlimited, so to improve the model one has to modify the rate of change equation \\(\\dfrac{dP}{dt}=0.3P\\) to account for the fact that resources are limited.\n!pip install git+https://github.com/CU-Denver-MathStats-OER/ODEs\nfrom IPython.display import clear_output\nclear_output()\nExploring Differential Equations by Adam Spiegler is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Based on a work at https://github.com/CU-Denver-MathStats-OER/ODEs and original content created by Rasmussen, C., Keene, K. A., Dunmyre, J., & Fortune, N. (2018). Inquiry oriented differential equations: Course materials. Available at https://iode.sdsu.edu."
  },
  {
    "objectID": "Chp1/04-Eulers-Method.html#sec-04quest1",
    "href": "Chp1/04-Eulers-Method.html#sec-04quest1",
    "title": "1.4: Numerical Approximations",
    "section": "Question 1:",
    "text": "Question 1:\n\nConsider a modified rate of change equation for the population given by\n\\[\\color{dodgerblue}{\\dfrac{dP}{dt}=0.3P\\left(1-\\dfrac{P}{10}\\right)}\\]\nand answer the questions below.\n\nQuestion 1a:\n\nIn what ways does the modified rate of change equation account for limited resources? (Think of 10 as scaled to mean 10,000 or 100,000.)\n\nSolution to Question 1a:\n\n\n\n\n\n\n\nQuestion 1b:\n\nHow do you interpret the solution with initial condition \\(P(0) = 10\\)?\n\nSolution to Question 1b:"
  },
  {
    "objectID": "Chp1/04-Eulers-Method.html#sec-04quest2",
    "href": "Chp1/04-Eulers-Method.html#sec-04quest2",
    "title": "1.4: Numerical Approximations",
    "section": "Question 2:",
    "text": "Question 2:\n\nThe Python code cell below imports the slope_field() function from the ode_tools module. Recall we introduced this function in Lab 1.2 Slope Fields. See ODE Tools Tutorial for a quick reference on how to use slope_field() and other functions for Chapter 1.\n\nQuestion 2a:\n\nEnter a formula for the differential equation\n\\[\\color{dodgerblue}{\\frac{dP}{dt}=0.3P\\left(1-\\frac{P}{10}\\right)}\\]\nfrom Question 1 in place of the ?? in line of code where the formula for the differential equation should be entered. Then run the code to use the slope_field() function to plot the slope field for the differential equation. - Be sure you have already loaded ode_tools from GitHub. See either Loading from GitHub instructions above.\n\n\nSolution to Question 2a:\n\n\n\nEdit and run the code cell below. \n\n\nimport numpy as np\nfrom utils.ode_tools import slope_field\n\n# Define points where vectors will be plotted\nt = np.linspace(0, 7, 8)  # Independent variable, np.linspace(initial, end, number_values)\np = np.linspace(-4, 15, 20)  # Dependent variable, np.linspace(initial, end, number_values)\n\n# Define the differential equation\ndef diffeq(t, p):  # t is independent variable and p is dependent variable\n    return ??  # enter the formula for dp/dt\n\n# Run the slope field plotter\nslope_field(t, p, diffeq)\n\n\n\n\nQuestion 2b:\n\nIn what ways are your responses to Question 1 visible in the slope field you created in part 2a?\n\nSolution to Question 2b:\n\n\n\n\n\n\n\nQuestion 2c:\n\nIn this question, negative \\(P\\) values do not make sense, but we can still mathematically make sense of the slope field for negative \\(P\\) values. Explain why the slope field looks the way it does below the \\(t\\)-axis.\n\nSolution to Question 2c:"
  },
  {
    "objectID": "Chp1/04-Eulers-Method.html#sec-04quest3",
    "href": "Chp1/04-Eulers-Method.html#sec-04quest3",
    "title": "1.4: Numerical Approximations",
    "section": "Question 3:",
    "text": "Question 3:\n\nUsing the differential equation from from Question 1,\n\\[\\color{dodgerblue}{\\frac{dP}{dt}=0.3P\\left(1-\\frac{P}{10}\\right)},\\]\nand in addition we know there are initially \\(P(0)=2\\) fish in the lake, approximately how many fish are in the lake at time \\(t=2\\)? How did you arrive at your approximation?\n\n\n\n\n\n\nTip\n\n\n\nInitially \\(\\dfrac{dP}{dt} = 0.48\\), but what meaning does \\(0.48\\) have? What are the units?\n\n\n\nSolution to Question 3:"
  },
  {
    "objectID": "Chp1/04-Eulers-Method.html#sec-04quest4",
    "href": "Chp1/04-Eulers-Method.html#sec-04quest4",
    "title": "1.4: Numerical Approximations",
    "section": "Question 4:",
    "text": "Question 4:\n\nThe Python code cell below imports the plot_sol() function from the module named ode_tools. Recall we introduced this function in Lab 1.2 Slope Fields. See ODE Tools Tutorial for a quick reference on how to use plot_sol() and other functions for Chapter 1.\nRun the code cell below to use the plot_sol() function to check your previous answer by plotting the solution to the initial value problem\n\\[\\color{dodgerblue}{\\frac{dP}{dt}=0.3P\\left(1-\\frac{P}{10}\\right), \\qquad P(0)=2}.\\]\n\nSolution to Question 4:\n\n\n\n Run the code cell below to check your previous answer.  \n\n\nfrom utils.ode_tools import plot_sol\n\n# Note t, p, and diffeq have already been defined in Question 2\n# Enter the initial values t0 and p0 \n\nt0 = 0\np0 = 2\n\n# Run the function to create a plot\nplot_sol(t, p, diffeq, t0, p0)"
  },
  {
    "objectID": "Chp1/04-Eulers-Method.html#sec-04quest5",
    "href": "Chp1/04-Eulers-Method.html#sec-04quest5",
    "title": "1.4: Numerical Approximations",
    "section": "Question 5:",
    "text": "Question 5:\n\nThe population of fish in a lake is can be modeled with the differential equation from Question 1\n\\[\\color{dodgerblue}{\\frac{dP}{dt}=0.3P\\left(1-\\frac{P}{10}\\right)}.\\]\nEdit the code cell below to stitch together, in a tip to tail manner, several tangent vectors to produce a graph of the population versus time if at time \\(t = 0\\) we know there are 8 fish in the lake (again, think of 8 as scaled for say, 8000 or 80,000 fish).\n\nSolution to Question 5:\n\n\n\nThe first part of the code cell below that creates the slope field does not need to be edited.\nFor each of the three commented out plt.quiver() commands:\n\nThere are two ?? in each of the commented out commands that need to be replaced.\nAdd a second vector where the tail of the first vector ends by replacing each ?? with an appropriate value.\nAfter adding a second vector, repeat this process to add a third vector.\nRepeat one more time to add a fourth vector.\nYou do not need to edit the code below beyond uncommenting out lines of code and replacing each ??’s.\n\nOptional: Consider how to improve this method so the solution is more accurate.\n\n\n\n\nimport matplotlib.pyplot as plt\n\n# DO NOT EDIT: Set up gride for slope field\nt = np.linspace(0, 8, 9)  \np = np.linspace(-4, 15, 20)\nT, P = np.meshgrid(t, p)\n\n# DO NOT EDIT: Define Differential Equation\ndef diffeq(t, p):  # t is independent variable and p is dependent variable\n    return 0.3 * p * (1 - p/10) # Use t and p for ind and dep variables\ndp = diffeq(T, P)\ndt = np.ones(dp.shape)\n\n# DO NOT EDIT: normalize the line segments\ndpu = dp / np.sqrt(dt**2 + dp**2)  # normalize dp\ndtu = dt / np.sqrt(dt**2 + dp**2)  # normalize dt\n    \n# DO NOT EDIT: Plot Slope Field\nplt.quiver(T, P, dtu, dpu,  # Plot a 2D field of arrows\n            units = 'xy',  \n            angles = 'xy')\n\n#######################################\n# STUDENT TO DO: Add your own vectors\n# Replace each ?? with an appropriate value\n#######################################\n# Plot vectors\nplt.quiver(0, 8, 2, 2*diffeq(0, 8), color = 'b', \n           angles = 'xy',\n           scale = 1,\n           scale_units = 'xy') \n#plt.quiver(2, ??, 2, 2*diffeq(2, ??), color = 'b', \n#           angles = 'xy',\n#           scale = 1,\n#           scale_units = 'x') \n#plt.quiver(4, ??, 2, 2*diffeq(4, ??), color = 'b', \n#           angles = 'xy',\n#           scale = 1,\n#           scale_units = 'xy') \n#plt.quiver(6, ??, 2, 2*diffeq(6, ??), color = 'b', \n#           angles = 'xy',\n#           scale = 1,\n#           scale_units = 'xy') \n\nplt.show()"
  },
  {
    "objectID": "Chp1/04-Eulers-Method.html#sec-04quest6",
    "href": "Chp1/04-Eulers-Method.html#sec-04quest6",
    "title": "1.4: Numerical Approximations",
    "section": "Question 6:",
    "text": "Question 6:\n\nExplain how you are thinking about rate of change in your method. For example, is the rate of change constant over some increment? If yes, over what increment? If no, is the rate of change always changing?\n\nSolution to Question 6:"
  },
  {
    "objectID": "Chp1/04-Eulers-Method.html#sec-04quest7",
    "href": "Chp1/04-Eulers-Method.html#sec-04quest7",
    "title": "1.4: Numerical Approximations",
    "section": "Question 7:",
    "text": "Question 7:\n\nUsing the differential equation\n\\[\\color{dodgerblue}{\\frac{dP}{dt}= P\\left(1-\\dfrac{P}{20}\\right)}\\]\nand initial condition \\(P(0) = 10\\), José and Julie started the table given in the solution below to numerically keep track of their tip-to-tail method for connecting tangent vectors. Explain José’s and Julie’s approach and complete their table. Round to two decimal places.\n\nSolution to Question 7:\n\n\n\nExplain their approach:\n\n\nComplete table below.\n\n\n\n\n\n\nTip\n\n\n\nYou may use Python to help with calculations.\n\n\n\n\n\n\\(\\large t\\)\n\\(\\large P\\)\n\\(\\large \\dfrac{dP}{dt}\\)\n\n\n\n\n0\n10\n5\n\n\n0.5\n12.5\n??\n\n\n1.5\n??\n??\n\n\n1.0\n??\n??\n\n\n1.5\n??"
  },
  {
    "objectID": "Chp1/04-Eulers-Method.html#sec-04quest8",
    "href": "Chp1/04-Eulers-Method.html#sec-04quest8",
    "title": "1.4: Numerical Approximations",
    "section": "Question 8:",
    "text": "Question 8:\n\nUsing the same differential equation and initial condition as José and Julie in Question 7,\n\\[\\frac{dP}{dt}=P\\left( 1-\\frac{P}{20}\\right) \\quad \\mbox{with} \\quad P(0)=10,\\]\nDerrick and Delores started their table as shown in the solution below. Explain how Derrick and Delores’ approach is different from José and Julie’s and then complete their table. Round to two decimal places.\n\nSolution to Question 8:\n\n\n\nExplain how their approach is different:\n\n\nComplete table below.\n\n\n\n\n\n\nTip\n\n\n\nYou may use Python to help with calculations.\n\n\n\n\n\n\\(t\\)\n\\(P\\)\n\\(\\dfrac{dP}{dt}\\)\n\n\n\n\n0\n10\n5\n\n\n0.25\n11.25\n??\n\n\n0.5\n??\n??\n\n\n0.75\n??\n\n\n\n\n\n\n\n#import matplotlib.pyplot as plt\n\n# DO NOT EDIT: Set up grid for slope field\nt = np.linspace(0, 3, 13)  \ny = np.linspace(0, 16, 17)\nT, Y = np.meshgrid(t, y)\n\n# DO NOT EDIT: Define Differential Equation\ndef diffeq(t, y):  # t is independent variable and y is dependent variable\n    return y + t # Use t and y for ind and dep variables\ndy = diffeq(T, Y)\ndt = np.ones(dy.shape)\n\n# DO NOT EDIT: normalize the line segments\ndyu = dy / np.sqrt(dt**2 + dy**2)  # normalize dy\ndtu = dt / np.sqrt(dt**2 + dy**2)  # normalize dt\n    \n# DO NOT EDIT: Plot Slope Field\nplt.quiver(T, Y, dtu, dyu,  # Plot a 2D field of arrows\n            units = 'xy', \n            angles = 'xy')\n\n#######################################\n# STUDENT TO DO: Add your own vectors\n# Replace each ?? with an appropriate value\n#######################################\n# Plot vectors\nplt.quiver(0, 4, 0.5, 2 , color = 'b', \n           angles = 'xy',\n           scale = 1,\n           scale_units = 'xy') \nplt.quiver(0.5, ??, 0.5, ??, color = 'b', \n           angles = 'xy',\n           scale = 1,\n           scale_units = 'xy') \nplt.quiver(1, ??, 0.5, ??, color = 'b', \n           angles = 'xy',\n           scale = 1,\n           scale_units = 'xy') \n\nplt.show()"
  },
  {
    "objectID": "Chp1/04-Eulers-Method.html#sec-04quest9",
    "href": "Chp1/04-Eulers-Method.html#sec-04quest9",
    "title": "1.4: Numerical Approximations",
    "section": "Question 9:",
    "text": "Question 9:\n\nConsider the differential equation \\(\\color{dodgerblue}{\\dfrac{dy}{dt}=y+t}\\) and initial condition \\(\\color{dodgerblue}{y(0) = 4}\\).\n\nUse José and Julie’s approach (using \\(\\Delta t = 0.5\\)) to find \\(y(1.5)\\). You may find the table below useful for organizing your work.\nEdit the code cell below to plot your answer to part (a).\n\n\nSolution to Question 9:\n\n\n\nComplete table below.\n\n\n\n\n\n\n\nTip\n\n\n\nYou may use Python to help with calculations.\n\n\n\n\n\n\n\n\n\n\n\n\\(t\\)\n\\(y\\)\n\\(\\dfrac{dy}{dt}\\)\n\\(\\Delta y\\)\n\n\n\n\n0\n4\n??\n??\n\n\n??\n??\n??\n??\n\n\n??\n??\n??\n??\n\n\n??\n??\n??\n??\n\n\n\n\n\n\nIn the code cell below, you need to replace each ?? in the last portion of the code.\n\n\nThere are two ?? in lines of code that add the last two vectors to the plot.\nAdd a second vector where the tail of the first vector ends by replacing each ?? with appropriate values.\nAfter adding a second vector, repeat this process to add a third vector.\nYou do not need to edit the code below beyond replacing each ??."
  },
  {
    "objectID": "Chp1/04-Eulers-Method.html#sec-04quest10",
    "href": "Chp1/04-Eulers-Method.html#sec-04quest10",
    "title": "1.4: Numerical Approximations",
    "section": "Question 10:",
    "text": "Question 10:\n\n\nIs your value for \\(y(1.5)\\) the exact value or an approximate value? Explain.\n\n\n\nGeneralizing your tip-to-tail approach: Create an equation-based procedure/algorithm that would allow you to predict future \\(y\\)-values for any differential equation \\(\\dfrac{dy}{dt}\\), any given initial condition, and any time increment.\n\n\n\nSolution to Question 10:\n\n\na. Explain.\n\nWrite a formula."
  },
  {
    "objectID": "Chp1/04-Eulers-Method.html#comparing-tail-to-tip-sketch-with-actual-solution",
    "href": "Chp1/04-Eulers-Method.html#comparing-tail-to-tip-sketch-with-actual-solution",
    "title": "1.4: Numerical Approximations",
    "section": "Comparing Tail to Tip Sketch with Actual Solution",
    "text": "Comparing Tail to Tip Sketch with Actual Solution\n\nRun the code below (no edits needed) to compare your approximation from Question 9 with the actual solution.\n\n\n\n\n\n\nNote\n\n\n\nThe plot below is generated using the plot_euler() function is in the ode_tools module. See ODE Tools Tutorial for a quick reference on how to use plot_euler() and other functions for Chapter 1.\n\n\n\nInput vectors of values for t and x (points where the vectors will be plotted) and define diffeq.\nDefine an initial condition \\((t_0, x_0) =\\)(t0, x0), step size \\(\\Delta t=\\) dt, and number of iterations \\(n=\\) n.\nWe import the plot_euler() function.\n\nBe sure you have already loaded the module from GitHub.\nLike packages, you only need to import a function one time after opening a notebook.\n\nWe generate the plot by running the function with the command plot_euler(t, x, diffeq, t0, x0, dt, n).\n\n\n# Import plot_euler function from utils.ode_tools module.\nfrom utils.ode_tools import plot_euler\n\n# Set up gride for slope field\nt = np.linspace(0, 1.5, 7)  \ny = np.linspace(0, 20, 21)\n\n# Define differential equation\ndef diffeq(t, y):\n    return y + t \n\n# Define initial value, step size, and number of steps\nt0 = 0  # initial input value\ny0 = 4  # initial output value\ndt = 0.5  # step size\nn = 3  # number of steps\n\n\nplot_euler(t, y, diffeq, t0, y0, dt, n)"
  },
  {
    "objectID": "Chp1/04-Eulers-Method.html#sec-04quest11",
    "href": "Chp1/04-Eulers-Method.html#sec-04quest11",
    "title": "1.4: Numerical Approximations",
    "section": "Question 11:",
    "text": "Question 11:\n\nConsider the differential equation \\(\\color{dodgerblue}{\\dfrac{dy}{dt}=y+t}\\) and initial condition \\(\\color{dodgerblue}{y(0) = 4}\\).\nUsing steps each size \\(\\Delta t = 0.5\\), approximate \\(y(1.5)\\) by completing the formulas in the code cell below.\n\nSolution to Question 11:\n\n \nReplace each ?? in the code below with an appropriate formula. \n\n\n\n#import numpy as np\n\nv = np.zeros(n+1)  # creates a vector of zeros where we'll store output\ndt = 0.5  # define the step size\n\n# Define diffeq\ndef diffeq(t, y):  # t is independent variable and y is dependent variable\n    return y + t  # Use t and y for ind and dep variables\n\n# Initial value\nv[0] = 4  # initial condition is y_0 = 4\n\n# Result after step 1\nv[1] = ??\n\n# Result after step 2\nv[2] = ??\n\n# Result after step 3\nv[3] = ??\n\nprint(\"After step 1, we have y(0.5) is approximately\", v[1],\n     \"\\n \\n After step 2, we have y(1) is approximately\", v[2],\n     \"\\n \\n After step 3, we have y(1.5) is approximately\", v[3],)"
  },
  {
    "objectID": "Chp1/04-Eulers-Method.html#computing-eulers-method-with-the-euler_method-function",
    "href": "Chp1/04-Eulers-Method.html#computing-eulers-method-with-the-euler_method-function",
    "title": "1.4: Numerical Approximations",
    "section": "Computing Euler’s Method with the euler_method Function",
    "text": "Computing Euler’s Method with the euler_method Function\n\nThe step-by-step method derived above is called Euler’s method. In the code cell below, we import a function called euler_method() from the ode_tools module that performs identical calculations as the code above. See ODE Tools Tutorial for a quick reference on how to use euler_method() and other functions for Chapter 1.\n\nDefine diffeq.\nDefine the initial value \\((t_0, x_0) =\\) (t0, x0).\nDefine the step size dt and number of steps n.\nWe import the euler_method() function.\n\nBe sure you have already loaded the module from GitHub.\nLike packages, you only need to import a function one time after opening a notebook.\n\nCalculate each step with the function euler_method(diffeq, t0, x0, dt, n).\n\n\nfrom utils.ode_tools import euler_method\n\n# Define diffeq\ndef diffeq(t, y):  # t is independent variable and y is dependent variable\n    return y + t  # Use t and y for ind and dep variables\n\n# Initial value\nt0 = 0 # initial value of input\ny0 = 4 # initial value output when t = t_0\n\n# Step size and number of steps\ndt = 0.5\nn = 3\n\n# Apply Euler's method\neuler_method(diffeq, t0, y0, dt, n)"
  },
  {
    "objectID": "Chp1/04-Eulers-Method.html#sec-04quest12",
    "href": "Chp1/04-Eulers-Method.html#sec-04quest12",
    "title": "1.4: Numerical Approximations",
    "section": "Question 12:",
    "text": "Question 12:\n\nUsing the same differential equation from Question 11, experiment with the code below to estimate \\(y(1.5)\\) accurate to one decimal place. How many steps did you use? What is the corresponding step size?\n\nSolution to Question 12:\n\n \nReplace each ?? to define appropriate values for n and dt in the code cell below.\n\n\n\n\n# We are not changing the differential equation or initial conditions\n# Thus we do not need to redefine diffeq, t0, or y0\n\n# Number of steps and step size\nn = ??\ndt = ??\n\n# Apply Euler's method\neuler_method(diffeq, t0, y0, dt, n)"
  },
  {
    "objectID": "Chp1/04-Eulers-Method.html#sec-04quest13",
    "href": "Chp1/04-Eulers-Method.html#sec-04quest13",
    "title": "1.4: Numerical Approximations",
    "section": "Question 13:",
    "text": "Question 13:\n\nConsider the differential equation \\(\\dfrac{dy}{dt} = y+t\\). Estimate the value of \\(y(2)\\) on the solution that passes through the point \\((1, 3)\\) using 10 steps. Use the euler_method() function in the ode_tools module to perform the calculations.\n\nSolution to Question 13:\n\n \nReplace each ?? to define appropriate values or expressions in the code cell below.\n\n\n\n\n# Define diffeq\ndef diffeq(t, y):  # t is independent variable and y is dependent variable\n    return ??  # Use t and y for ind and dep variables\n\n# Initial value\nt0 = ?? # initial value of input\ny0 = ?? # initial value output when t = t_0\n\n# Step size and number of steps\ndt = ??\nn = ??\n\n# Apply Euler's method\neuler_method(diffeq, t0, y0, dt, n)"
  },
  {
    "objectID": "Chp1/05-Separable-Diff-Eqs.html",
    "href": "Chp1/05-Separable-Diff-Eqs.html",
    "title": "1.5: Separable Differential Equations",
    "section": "",
    "text": "General Solutions and Initial Value Problems\nWe can solve a differential equation of the form\n\\[ \\frac{dy}{dt} = 6t^2 \\]\nsince the solution to the differential equation are all functions \\(y\\) that have \\(\\dfrac{dy}{dt} = 6t^2\\). Thus, \\(y\\) must be an antiderivative of \\(6t^2\\),\n\\[ y= \\int \\frac{dy}{dt} \\ dt  = \\int 6t^2 dt = 2t^3 + C.\\]\nFor example, if we are given that \\(\\dfrac{dy}{dt} = 6t^2\\) and \\(y(2)=10\\), first we find a general solution, and then we plug the initial condition into the general solution and solve for the general constant \\(C\\):\n\\[ y(2)=2(2)^3+C=16+C=10.\\]\nThus, the solution will pass through the point \\((2,10)\\) only if \\(C=-6\\). The solution to the initial value problem (IVP) is \\[ y=2t^3-6.\\]\nDifferential equations of the form \\(\\dfrac{dy}{dt} = f(t)\\) are a very special case since the derivative does not depend on the dependent variable. We have seen these differential equations are antiderivatives in disguise, and we can find a general solution by integrating both sides with respect to the independent variable (\\(t\\) in this case):\n\\[y = \\int f(t) \\, dt.\\]\nAs we can see from the question 1, solving an autonomous differential equation is not as direct as applying the same operation to both sides (integration with respect to \\(t\\)). However, we can apply the “reverse the chain rule” to solve an autonomous differential equation. Recall the chain rule:\n\\[ \\frac{d}{dt} \\big[ f \\big( y(t) \\big) \\big] = f' \\big( y(t) \\big) \\cdot y'(t)\\]\nNow let’s try to develop a technique for solving an autonomous differential equation by applying (or rather by undoing) the chain rule. Below is an outline of a method to find the analytic solutions to some special types of differential equations called separable differential equations.\nThe end result, \\(\\displaystyle P(t)=ke^{0.2t}\\) is called the general solution because it represents all possible functions that satisfy the differential equation. We can use the general solution to find any particular solution, which is a solution that corresponds to a given initial condition.\nIn question 6 you should have found that a general solution to \\(\\dfrac{dy}{dt}=\\dfrac{t}{3y^2}\\) is \\(\\displaystyle y= \\sqrt[3]{\\frac{1}{2} t^2 +C}\\).\nLet’s check that our solution is correct using Python.\nimport sympy as sym  # import sympy, we use the abbreviation sym\n\nt, y, C = sym.symbols('t, y, C')  # Creating t, y and C as symbols\n\ny = sym.cbrt(1/2 * t**2 + C)\n\ndy = sym.diff(y,t) # Use diff from sympy library to differentiate y with respect to t\n\ncheck = t / (3 * y**2)\nprint(\"The left side is dy/dt = \", sym.simplify(dy), \n      \"\\n \\n The right side is \", sym.simplify(check))\nA differential equation is called separable if it can be written in the form\n\\[\\frac{dy}{dx}=p(x,y)=f(x)g(y).\\]\nFor example, the differential equation \\(\\dfrac{dy}{dt}=\\dfrac{t}{3y^2}\\) is separable since it can be written as\n\\[\\frac{dy}{dt}=(t)\\left( \\frac{1}{3y^2} \\right).\\]\nExploring Differential Equations by Adam Spiegler is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Based on a work at https://github.com/CU-Denver-MathStats-OER/ODEs and original content created by Rasmussen, C., Keene, K. A., Dunmyre, J., & Fortune, N. (2018). Inquiry oriented differential equations: Course materials. Available at https://iode.sdsu.edu."
  },
  {
    "objectID": "Chp1/05-Separable-Diff-Eqs.html#plotting-solutions",
    "href": "Chp1/05-Separable-Diff-Eqs.html#plotting-solutions",
    "title": "1.5: Separable Differential Equations",
    "section": "Plotting Solutions",
    "text": "Plotting Solutions\n\n\nRun the code cell below to plot solutions.\nThere is nothing to edit in the code cell.\nHit play and you are ready to go!\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Using Numpy to create an array t\n# from t=-3 to t=3 with steps of 0.05\nt = np.arange(-3, 3, 0.05)\nz = np.ones(10)  \n\n# general solutions\ny = 2*t**3 - 6\nplt.plot(t, y, color='r', label='C=-6')  # IVP solution\n\nfor i in range(0, 9):\n    z = 2*t**3 - 50 + 10 * i \n    plt.plot(t, z, color='b')\npass\n\n# Setting range of y-axis\nplt.ylim(-60, 60)\n\n# Adding the initial condition y(2)=10\nplt.plot(2, 10, marker = \"o\", markersize = 8, color = 'k')\n\n# Naming the x-axis, y-axis and the whole graph\nplt.xlabel(\"t\")\nplt.ylabel(\"y\")\nplt.title(\"General Solutions\")\nplt.grid()\n\n# Adding legend, which helps us recognize the curve according to it's color\nplt.legend()\n  \n# To load the display window\nplt.show()"
  },
  {
    "objectID": "Chp1/05-Separable-Diff-Eqs.html#sec-05quest1",
    "href": "Chp1/05-Separable-Diff-Eqs.html#sec-05quest1",
    "title": "1.5: Separable Differential Equations",
    "section": "Question 1:",
    "text": "Question 1:\n\nCan we apply the same method to solve an autonomous differential equation such as \\(\\frac{dy}{dt} = 0.2y\\)? Explain what looks wrong with each of the possible solution strategies below.\n\n\\(\\displaystyle \\int \\frac{dy}{dt} \\ dt = \\int 0.2y \\ dt\\)\n\\(\\displaystyle \\int \\frac{dy}{dt} \\ dy = \\int 0.2y \\ dy\\)\n\\(\\displaystyle \\int \\frac{dy}{dt} \\ dt = \\int 0.2y \\ dy\\)\n\n\nSolution to Question 1:"
  },
  {
    "objectID": "Chp1/05-Separable-Diff-Eqs.html#sec-05quest2",
    "href": "Chp1/05-Separable-Diff-Eqs.html#sec-05quest2",
    "title": "1.5: Separable Differential Equations",
    "section": "Question 2:",
    "text": "Question 2:\n\nUsing the chain rule find a formula for \\(\\frac{d}{dt} \\left( \\ln{P} \\right)\\), where \\(P\\) is shorthand for \\(P(t)\\).\n\nSolution to Question 2:"
  },
  {
    "objectID": "Chp1/05-Separable-Diff-Eqs.html#sec-05quest3",
    "href": "Chp1/05-Separable-Diff-Eqs.html#sec-05quest3",
    "title": "1.5: Separable Differential Equations",
    "section": "Question 3:",
    "text": "Question 3:\n\nFor a particular species of fish in a lake, the differential equation\n\\[ \\frac{dP}{dt} = 0.2P\\]\nmodels the rate of change of the fish population \\(P\\) (measured in thousands of fish) \\(t\\) years from now. For now assume that \\(P &gt; 0\\). This assumption corresponds to the population growth context, and it will make the algebra easier and hence the underlying idea clearer.\nFollow the steps below to find a general solution to the differential equation.\n\nQuestion 3a:\n\nDivide both sides of \\(\\dfrac{dP}{dt}=0.2P\\) by \\(P\\).\n\nSolution to Question 3a:\n\n\n\n\n\n\n\nQuestion 3b:\n\nReplace \\(\\dfrac{1}{P}\\dfrac{dP}{dt}\\) with \\(\\left[ \\ln(P)\\right]'\\).\n\nSolution to Question 3b:\n\n\n\n\n\n\n\nQuestion 3c:\n\nWrite integrals with respect to \\(t\\) on both sides.\n\nSolution to Question 3c:\n\n\n\n\n\n\n\nQuestion 3d:\n\nApply the Fundamental Theorem of Calculus to integrate both sides.\n\nSolution to Question 3d:\n\n\n\n\n\n\n\nQuestion 3e:\n\nSolve for \\(P\\) (and remember that \\(P\\) is actually a function, \\(P(t)\\)).\n\nSolution to Question 3e:\n\n\n\n\n\n\n\nQuestion 3f:\n\nShow that \\(P\\) can be written as \\(P(t) = ke^{0.2t}\\).\n\nSolution to Question 3f:"
  },
  {
    "objectID": "Chp1/05-Separable-Diff-Eqs.html#sec-05quest4",
    "href": "Chp1/05-Separable-Diff-Eqs.html#sec-05quest4",
    "title": "1.5: Separable Differential Equations",
    "section": "Question 4:",
    "text": "Question 4:\n\nUse the same technique to find the general solution to \\(\\dfrac{dy}{dt}=\\dfrac{t}{3y^2}\\). The first step (dividing both sides by \\(\\frac{1}{3y^2}\\)) is done for you below. Finish the rest of the process to find a general solution to the differential equation\n\\[3y^2\\frac{dy}{dt}=t.\\]\n\nSolution to Question 4:"
  },
  {
    "objectID": "Chp1/05-Separable-Diff-Eqs.html#sec-05quest5",
    "href": "Chp1/05-Separable-Diff-Eqs.html#sec-05quest5",
    "title": "1.5: Separable Differential Equations",
    "section": "Question 5:",
    "text": "Question 5:\n\nIn practice, we often circumvent explicit use of the chain rule and instead use a shortcut to more efficiently find the general solution. The shortcut involves treating the derivative \\(\\frac{dy}{dt}\\) as a ratio and “separating” the \\(dy\\) and \\(dt\\).\nIn the table below, follow the instructions to see how the shortcut works, using again the equation \\(\\displaystyle\\frac{dP}{dt} = 0.2P\\).\n\nQuestion 5a:\n\n“Separate” the \\(dP\\) from the \\(dt\\) so that \\(dP\\) and \\(P\\) are on the same side.\n\nKeep in mind \\(\\frac{dP}{dt}\\) is NOT a fraction.\nWe are abusing the notation for the derivative little bit.\nIn practice, this works due to the chain rule that we illustrated in an earlier example.\nIf there are \\(t\\)’s in the equation they must go on the same side as \\(dt\\) (if possible).\n\n\nSolution to Question 5a:\n\n\n\n\n\n\n\nQuestion 5b:\n\nIntegrate both sides of the equation.\n\nIf two expressions are equal, then performing the same operation on both sides preserves the equality.\nHowever, we are integrating with respect to different variables on each side of the equation.\nThus, this step is also not technically a correct. We are abusing notation a little bit.\nIn reality, we are reversing the chain rule.\nIntegrate one side with respect to \\(P\\) and the other with respect to \\(t\\).\n\n\nSolution to Question 5b:\n\n\n\n\n\n\n\nQuestion 5c:\n\nUsing algebra, express your answer in explicit form \\(P(t)=\\underline{\\hskip1cm}\\)\n\nSolution to Question 5c:"
  },
  {
    "objectID": "Chp1/05-Separable-Diff-Eqs.html#sec-05quest6",
    "href": "Chp1/05-Separable-Diff-Eqs.html#sec-05quest6",
    "title": "1.5: Separable Differential Equations",
    "section": "Question 6:",
    "text": "Question 6:\n\nUse the shortcut method above to find the general solution to \\(\\dfrac{dy}{dt}=\\dfrac{t}{3y^2}\\).\n\nSolution to Question 6:"
  },
  {
    "objectID": "Chp1/05-Separable-Diff-Eqs.html#identifying-where-you-made-an-error",
    "href": "Chp1/05-Separable-Diff-Eqs.html#identifying-where-you-made-an-error",
    "title": "1.5: Separable Differential Equations",
    "section": "Identifying Where You Made an Error",
    "text": "Identifying Where You Made an Error\n\nThe left and right sides should be equivalent expressions. If the output from the code cell above did not have both sides equal to each other, then we made a mistake somewhere in the process:\n\nDid we integrate the expression of \\(y\\) correctly?\nDid we integrate the expression of \\(t\\) correctly?\nDid we solve for \\(y\\) correctly?\n\n\n# checking integration with respect to y\n\nt, y = sym.symbols('t, y')  # Creating t, y and as symbols\nsym.integrate(3 * y**2, y)\n\n\n# checking integration with respect to t\n\nsym.integrate(t, t)"
  },
  {
    "objectID": "Chp1/05-Separable-Diff-Eqs.html#sec-05quest7",
    "href": "Chp1/05-Separable-Diff-Eqs.html#sec-05quest7",
    "title": "1.5: Separable Differential Equations",
    "section": "Question 7:",
    "text": "Question 7:\n\nDecide whether the differential equation is separable. If so, separate it into the form \\(\\dfrac{1}{g(y)} dy = f(x) dx\\).\n\nQuestion 7a:\n\n\\(y' = 3x+y^2\\)\n\nSolution to Question 7a:\n\n\n\n\n\n\n\nQuestion 7b:\n\n\\(\\displaystyle \\frac{dy}{dt} = t^2y+ty\\)\n\nSolution to Question 7b:\n\n\n\n\n\n\n\nQuestion 7c:\n\n\\(\\displaystyle \\frac{dz}{dw} = e^{z+w}\\)\n\nSolution to Question 7c:\n\n\n\n\n\n\n\nQuestion 7d:\n\n\\(y'=\\ln{(xy)}\\)\n\nSolution to Question 7d:\n\n\n\n\n\n\n\nQuestion 7e:\n\n\\(\\displaystyle \\frac{dy}{dx}-xy =0\\)\n\nSolution to Question 7e:"
  },
  {
    "objectID": "Chp1/05-Separable-Diff-Eqs.html#sec-05quest8",
    "href": "Chp1/05-Separable-Diff-Eqs.html#sec-05quest8",
    "title": "1.5: Separable Differential Equations",
    "section": "Question 8:",
    "text": "Question 8:\n\nSolve the initial value problem. To solve an IVP one first must find the general solution and then use the initial condition to find the particular solution corresponding to the initial condition.\n\nQuestion 8a:\n\n\\(z' = \\dfrac{qz}{z^2+1}\\), \\(z(2)=1\\)\n\nSolution to Question 8a:\n\n\n\n\n\n\n\nQuestion 8b:\n\n\\(\\dfrac{dx}{dt}= \\dfrac{x\\ln{x}}{t}\\), \\(x(1)=6\\)\n\nSolution to Question 8b:\n\n\n\n\n\n\n\nQuestion 8c:\n\n\\(\\dfrac{y'}{x}= \\dfrac{\\sin{(x^2)}}{y}\\), \\(y(0)=3\\)\n\nSolution to Question 8c:"
  },
  {
    "objectID": "Chp1/05-Separable-Diff-Eqs.html#sec-05quest9",
    "href": "Chp1/05-Separable-Diff-Eqs.html#sec-05quest9",
    "title": "1.5: Separable Differential Equations",
    "section": "Question 9:",
    "text": "Question 9:\n\n\n\nVerify and/or check your answers to each part of question 8 using Python.\n\n\n### Solution to Question 9:\n\n\n\n\n\nComplete the Python cells below. \n\n\n# Check Solution to Question 8a:\n\n??, ??  = sym.symbols('??, ??')  # What are the symbols\n\nz = ??  # Enter the formula of your solution in 8s\n\ndz = sym.diff(??, ??)  # Compute derivative of solution\n\ncheck = ??  # Enter a formula to check your answer\n\nprint(\"The left side is ?? = \", sym.simplify(??), \n      \"\\n \\n The right side is \", sym.simplify(??))\n\n\n# Check Solution to Question 8b:\n\n??, ??  = sym.symbols('??, ??')  # What are the symbols\n\nx = ??  # Enter the formula of your solution in 8b\n\ndx = sym.diff(??, ??)  # Compute derivative of solution\n\ncheck = ??  # Enter a formula to check your answer\n\nprint(\"The left side is ?? = \", sym.simplify(??), \n      \"\\n \\n The right side is \", sym.simplify(??))\n\n\n# Check Solution to Question 8c:\n\n??, ??  = sym.symbols('??, ??')  # What are the symbols\n\ny = ??  # Enter the formula of your solution in 8c\n\ndy = sym.diff(??, ??)  # Compute derivative of solution\n\ncheck = ??  # Enter a formula to check your answer\n\nprint(\"The left side is ?? = \", sym.simplify(??), \n      \"\\n \\n The right side is \", sym.simplify(??))"
  },
  {
    "objectID": "Chp1/05-Separable-Diff-Eqs.html#sec-05quest10",
    "href": "Chp1/05-Separable-Diff-Eqs.html#sec-05quest10",
    "title": "1.5: Separable Differential Equations",
    "section": "Question 10:",
    "text": "Question 10:\n\nSolve the initial value problem \\[\\frac{dy}{dt}=\\frac{t}{y}, \\ \\ \\ \\ \\  y(2)=-1\\]\n\nFor what values of \\(t\\) is your solution valid? Why?\nCheck to see that your particular solution “fits” the differential equation by substituting the solution and its derivative into the original differential equation.\n\n\nSolution to Question 10:"
  },
  {
    "objectID": "Chp1/05-Separable-Diff-Eqs.html#sec-05quest11",
    "href": "Chp1/05-Separable-Diff-Eqs.html#sec-05quest11",
    "title": "1.5: Separable Differential Equations",
    "section": "Question 11:",
    "text": "Question 11:\n\nComplete the two lines with ?? in the first Python code cell below to plot the slope field and your solution from question 10a to check your work.\n\nSolution to Question 11:\n\n \nComplete the first code cell below and then run the next two code cells (without any edits). \n\n\n# To plot right half of the solution for t &gt; 0\ntsol1 = np.linspace(2, 10, 200)  \n# Edit the line below\nfsol1 = np.sqrt(??)  # enter formula of your solution\n\n# To plot left half of the solution for t &lt; 0\ntsol2 = np.linspace(-10, -2, 200)  # range of ind variable\n# Edit the line below\nfsol2 = -1 * np.sqrt(??)  # enter formula of your solution\n\n\n!pip install git+https://github.com/CU-Denver-MathStats-OER/ODEs\nfrom IPython.display import clear_output\nclear_output()\n\n\n# Nothing to edit in this cell!\n\n#import matplotlib.pyplot as plt\nimport math\nfrom utils.ode_tols import slope_field\n\n# Setup the grid\nt = np.linspace(-10, 10, 21)  # np.linspace(initial, end, number_values)\nx = np.linspace(-10, 10, 21)  # np.linspace(initial, end, number_values)\n\n# Setup the differential equation\ndef diffeq(x, t):\n    return t / x # Use t and x for ind and dep variables\n\n# Plot the slope field and solutions\nslope_field(t, x, diffeq)\nplt.plot(tsol1, fsol1, color='b')\nplt.plot(tsol2, fsol2, color='r')"
  },
  {
    "objectID": "Chp1/05-Separable-Diff-Eqs.html#sec-05quest12",
    "href": "Chp1/05-Separable-Diff-Eqs.html#sec-05quest12",
    "title": "1.5: Separable Differential Equations",
    "section": "Question 12:",
    "text": "Question 12:\n\nEven though \\(\\dfrac{dy}{dt}\\) is undefined when \\(y=0\\), the solution function can be defined such that \\(y(2)=0\\). What should the graph of this solution look like in the slope field?\n\nSolution to Question 12:"
  },
  {
    "objectID": "Chp1/06-Integrating-Factors.html",
    "href": "Chp1/06-Integrating-Factors.html",
    "title": "1.6: Solving Linear First Order Differential Equations",
    "section": "",
    "text": "A Salt Solution in a Tank\nWe cannot separate the differential equation in Question 1 to find a formula for the solution just yet, but we can use the slope field to approximate solutions graphically.\nRecall from Lab 1.2 Slope Fields we introduced the function plot_sol() that we can import from the ode_tools module. See ODE Tools Tutorial for a quick reference guide on using plot_sol() and other functions in the module ode_tools.\nThe differential equation you developed for the salty tank is not separable, and therefore using the technique of separation of variables is not appropriate. This equation is a first order linear differential equation , since it can be written in the form\n\\[ a_1(x) \\frac{dy}{dx}+ a_2(x) \\cdot y=b(x),\\]\nwhere \\(a_1(x)\\), \\(a_2(x)\\), and \\(b(x)\\) are all continuous functions of the independent variable \\(x\\) alone.\nNote if we divide both sides by \\(a_1(x)\\), we can rewrite any first order linear differential equation in standard form:\n\\[\\frac{dy}{dx} + P(x)y = Q(x).\\]\nThe following technique, which we refer to as the reverse product rule, can be used find the general solution to a first-order linear equation.\nConsider the differential equation \\(\\dfrac{dy}{dx}+2y=3\\). Note that this is a first order linear differential equation already in standard form, where \\(P(x)=2\\) and \\(Q(x)=3\\) are both continuous functions.\nThe following illustrates a technique for finding the general solution to linear differential equations. The inspiration for the technique comes from a creative use of the product rule and the Fundamental Theorem of Calculus, as well as use of the previous technique of separation of variables.\n\\[{\\color{dodgerblue}{\\mu(x)}} = {\\large{\\color{tomato}{??}}} \\qquad \\mbox{(for convenience, set the arbitrary constant $C=0$.)}\\]\n\\[\\int \\frac{d}{dx} \\left(y {\\color{dodgerblue}{\\mu(x)}} \\right) \\ dx = \\int {\\color{dodgerblue}{\\mu(x)}} Q(x) \\ dx.\\]\n\\[y {\\color{dodgerblue}{\\mu(x)}} = \\int {\\color{dodgerblue}{\\mu(x)}} Q(x) \\ dx.\\]\nExploring Differential Equations by Adam Spiegler is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Based on a work at https://github.com/CU-Denver-MathStats-OER/ODEs and original content created by Rasmussen, C., Keene, K. A., Dunmyre, J., & Fortune, N. (2018). Inquiry oriented differential equations: Course materials. Available at https://iode.sdsu.edu."
  },
  {
    "objectID": "Chp1/06-Integrating-Factors.html#sec-06quest1",
    "href": "Chp1/06-Integrating-Factors.html#sec-06quest1",
    "title": "1.6: Solving Linear First Order Differential Equations",
    "section": "Question 1:",
    "text": "Question 1:\n\nA very large tank initially contains 15 gallons of saltwater containing 6 pounds of salt. Saltwater containing 1 pound of salt per gallon is pumped into the top of the tank at a rate of 2 gallons per minute, while a well-mixed solution leaves the bottom of the tank at a rate of 1 gallon per minute.\n\nQuestion 1a:\n\nShould the rate of change equation for this situation depend just on the amount of salt \\(S\\) in the tank, the time \\(t\\), or both \\(S\\) and \\(t\\)? Explain your reasoning.\n\nSolution to Question 1a:\n\n\n\n\n\n\n\nQuestion 1b:\n\nThe following is a general rule of thumb for setting up rate of change equations for situations like this where there is an input and an output:\n\n\\[\\color{dodgerblue}{\\large \\text{rate of change } = \\text{ rate of change in } - \\text{ rate of change out}}.\\]\n\nUsing the above rule of thumb, figure out a rate of change equation for this situation.\n\n\n\n\n\n\nTip\n\n\n\nThink about what the units of \\(\\dfrac{dS}{dt}\\) need to be, where \\(S\\) is the amount of salt in the tank in pounds.*\n\n\n\nSolution to Question 1b:"
  },
  {
    "objectID": "Chp1/06-Integrating-Factors.html#sec-06LoadModule",
    "href": "Chp1/06-Integrating-Factors.html#sec-06LoadModule",
    "title": "1.6: Solving Linear First Order Differential Equations",
    "section": "Loading ode_tools from GitHub",
    "text": "Loading ode_tools from GitHub\n\n\nRun the code cell below to load the most up to date modules stored in GitHub.\nYou will only need to run this code cell one time during an active session.\n\n\n!pip install git+https://github.com/CU-Denver-MathStats-OER/ODEs\nfrom IPython.display import clear_output\nclear_output()"
  },
  {
    "objectID": "Chp1/06-Integrating-Factors.html#sec-06Import",
    "href": "Chp1/06-Integrating-Factors.html#sec-06Import",
    "title": "1.6: Solving Linear First Order Differential Equations",
    "section": "Importing the plot_sol() Function",
    "text": "Importing the plot_sol() Function\n\nNow that we have loaded the ode_tools module, we are ready to import the plot_sol function by running the code cell below.\n\nfrom utils.ode_tools import plot_sol"
  },
  {
    "objectID": "Chp1/06-Integrating-Factors.html#sec-06quest2",
    "href": "Chp1/06-Integrating-Factors.html#sec-06quest2",
    "title": "1.6: Solving Linear First Order Differential Equations",
    "section": "Question 2:",
    "text": "Question 2:\n\nRun the Python code cell below to create slope field for this differential equation you found in Question 1 and plot the solution with initial condition \\(S(0)=6\\). Based on your plot, estimate the amount of salt in the tank after 15 minutes.\n\nSolution to Question 2:\n\n\n\nEnter the formula for the differential equation from Question 1 in place of the ?? in the code cell below. Then run the code and answer the question based on the output. \n\n\nimport numpy as np\n\n# Setup the grid\nt = np.linspace(0, 20, 21)  # np.linspace(initial, end, number_values)\nS = np.linspace(0, 30, 31)  # np.linspace(initial, end, number_values)\n\n############################################\n# STUDENT TO DO:\n# Setup the differential equation\n# Replace ?? with an appropriate expression\n############################################\ndef diffeq(t, S):\n    return ??  # Use t and S for ind and dep variables\n\n# enter initial condition\nt0 = 0\nS0 = 6\n\nplot_sol(t, S, diffeq, t0, S0)  # Plot solution with initial condition"
  },
  {
    "objectID": "Chp1/06-Integrating-Factors.html#sec-06quest3",
    "href": "Chp1/06-Integrating-Factors.html#sec-06quest3",
    "title": "1.6: Solving Linear First Order Differential Equations",
    "section": "Question 3:",
    "text": "Question 3:\n\nReview the product rule as you remember it from calculus. In general symbolic terms, how do you represent the product rule? How would you describe it in words?\n\nSolution to Question 3:"
  },
  {
    "objectID": "Chp1/06-Integrating-Factors.html#key-observation",
    "href": "Chp1/06-Integrating-Factors.html#key-observation",
    "title": "1.6: Solving Linear First Order Differential Equations",
    "section": "Key Observation",
    "text": "Key Observation\n\nThe key is finding a formula for the function \\(\\mu(x)\\) that we multiply on both sides which allowed us to “reverse” the product rule (going from step 6 to step 7). The function \\(\\color{dodgerblue}{\\mu(x)}\\) is called the integrating factor.\n\nThe text Notes of Diffy Q’s uses the notation \\(r(x)\\) to denote the integrating factor.\nThe notation \\(\\mu(x)\\) for the integrating factor is more commonly used, so we will stick with that notation."
  },
  {
    "objectID": "Chp1/06-Integrating-Factors.html#sec-06quest4",
    "href": "Chp1/06-Integrating-Factors.html#sec-06quest4",
    "title": "1.6: Solving Linear First Order Differential Equations",
    "section": "Question 4:",
    "text": "Question 4:\n\nFind a general formula for the integrating factor. Replace the \\({\\large\\color{tomato}{??}}\\) in formula in step 1 below with your finding.\n\nSolution to Question 4:\n\n  Complete formula in step 1 below."
  },
  {
    "objectID": "Chp1/06-Integrating-Factors.html#sec-06quest5",
    "href": "Chp1/06-Integrating-Factors.html#sec-06quest5",
    "title": "1.6: Solving Linear First Order Differential Equations",
    "section": "Question 5:",
    "text": "Question 5:\n\nUse the previous technique, which we refer to as the method of integrating factors or informally the reverse product rule, to find the general solution for the Salty Tank differential equation from Question 1.\n\nSolution to Question 5:\n\n\n\n\n\n\nChecking your work to Question 5 with Python:\n\n\n\nComplete the Python cells below. \n\n\nimport sympy as sym  # import sympy, we use the abbreviation sym\n\nt, S, C = sym.symbols('t, S, C')  # Creating t, S and C as symbols\n\nS = ??  # enter the symbolic formula for a solution\n\ndS = sym.diff(S,t) # Use diff from sympy library to differentiate y with respect to t\n\nleft = (15 + t) * dS  # mult by sides by 15 + t\nright = ??  # enter a formula for the right side of diff eq\n\nprint(\"The left side is dS/dt = \", sym.simplify(left), \n      \"\\n \\n The right side is \", sym.simplify(right))"
  },
  {
    "objectID": "Chp1/06-Integrating-Factors.html#sec-06quest6",
    "href": "Chp1/06-Integrating-Factors.html#sec-06quest6",
    "title": "1.6: Solving Linear First Order Differential Equations",
    "section": "Question 6:",
    "text": "Question 6:\n\nUse your solution to Question 5 to answer the questions below.\n\nQuestion 6a:\n\nFind the particular solution corresponding to the initial condition \\(S(0) = 6\\), and then use the particular solution to determine the amount of salt in the tank after 15 minutes. That is, compute \\(S(15)\\). Your answer should be close to your estimate from Question 2. Is it? If not, you likely made an algebraic error.\n\nSolution to Question 6a:\n\n\n\n\n\ndef sol(t):  # t is independent variable \n    return ??  # enter the formula for S(t)\n\n\nsol(??)  # evaluate solution at t=15\n\n\n\n\nQuestion 6b:\n\nWhat does your solution predict about the amount of salt in the tank in the long run? How about the concentration?\n\nSolution to Question 6b:\n\n\n\n\n\n\n\nQuestion 6c:\n\nExplain how you can make sense of the predictions from part (b) by using the differential equation itself.\n\nSolution to Question 6c:"
  },
  {
    "objectID": "Chp1/06-Integrating-Factors.html#sec-06quest7",
    "href": "Chp1/06-Integrating-Factors.html#sec-06quest7",
    "title": "1.6: Solving Linear First Order Differential Equations",
    "section": "Question 7:",
    "text": "Question 7:\n\nDecide whether each differential equation is linear, and if so write it in standard form.\n\nQuestion 7a:\n\n\\(\\displaystyle x^2y'=x^2-3y\\)\n\nSolution to Question 7a:\n\n\n\n\n\n\n\nQuestion 7b:\n\n\\(\\displaystyle 2y \\dfrac{dy}{dx} - 3y=8\\)\n\nSolution to Question 7b:"
  },
  {
    "objectID": "Chp1/06-Integrating-Factors.html#sec-06quest8",
    "href": "Chp1/06-Integrating-Factors.html#sec-06quest8",
    "title": "1.6: Solving Linear First Order Differential Equations",
    "section": "Question 8:",
    "text": "Question 8:\n\nSolve the differential equation.\n\\[z\\frac{dw}{dz}+2w=5z^3\\]\n\nSolution to Question 8:"
  },
  {
    "objectID": "Chp1/06-Integrating-Factors.html#sec-06quest9",
    "href": "Chp1/06-Integrating-Factors.html#sec-06quest9",
    "title": "1.6: Solving Linear First Order Differential Equations",
    "section": "Question 9:",
    "text": "Question 9:\n\nSolve the initial value problem.\n\\[\\sin{x} \\frac{dy}{dx} + y \\cos{x} = x\\sin{x}, \\quad y \\left( \\frac{\\pi}{2} \\right)=2\\]\n\nSolution to Question 9:"
  },
  {
    "objectID": "Chp1/07-Mixture-Applications.html",
    "href": "Chp1/07-Mixture-Applications.html",
    "title": "1.7: Applications to Compartmental Analysis",
    "section": "",
    "text": "One-Compartment Systems\nA one-compartment system consists of\n\\[\\color{dodgerblue}{\\boxed{\\large \\frac{dx}{dt} = \\mbox{input rate} - \\mbox{output rate} }}\\]\nThe Malthusian law of population growth says the rate of change of the population, \\(\\frac{dP}{dt}\\), is directly proportional to the population present, \\(P\\), at time \\(t\\):\n\\[\\color{dodgerblue}{\\large \\boxed{\\frac{dP}{dt} = kP, \\quad P(0)=P_0}.}\\]\nImage Credits Wikimedia Commons,CC BY-SA 3.0\nThe Logistic Model in general has the form:\n\\[\\dfrac{dP}{dt} = -AP(P-L) \\quad \\mbox{with $A$ and $L$ denoting constants.}\\]\nIn Question 4, you found a solution to one such model using partial fraction decomposition. Let’s generalize the solution to find a convenient formula for solutions to logistic models that we can refer to.\nOne possible process could be:\n\\[ \\frac{1}{P(P-L)} \\, dP = -A \\, dt\\]\n\\[ \\left(\\frac{\\color{dodgerblue}{M}}{P} + \\frac{\\color{dodgerblue}{N}}{P-L}\\right) \\, dP = -A \\, dt\\]\nWe break these steps up in the code cells below.\nExploring Differential Equations by Adam Spiegler is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Based on a work at https://github.com/CU-Denver-MathStats-OER/ODEs and original content created by Rasmussen, C., Keene, K. A., Dunmyre, J., & Fortune, N. (2018). Inquiry oriented differential equations: Course materials. Available at https://iode.sdsu.edu."
  },
  {
    "objectID": "Chp1/07-Mixture-Applications.html#sec-07quest1",
    "href": "Chp1/07-Mixture-Applications.html#sec-07quest1",
    "title": "1.7: Applications to Compartmental Analysis",
    "section": "Question 1:",
    "text": "Question 1:\n\nA brine solution of salt water that has concentration \\(0.05\\) kg per L flows at a constant rate of 6 L per minute into a tank which is initially contains 50 L of a 1% salt solution. The brine solution flows out of the tank at a rate of 4 L per minute. Let \\(x(t)\\) denote the mass of the salt in the tank at time \\(t\\) (in minutes).\n\n\n\n\n\n\nNote\n\n\n\n1% salt solution means 1 kg of salt per 100 L of solution.\n\n\n\nQuestion 1a:\n\nWhat is the input rate of \\(x\\)?\n\nSolution to Question 1a:\n\n\n\n\n\n\n\nQuestion 1b:\n\nWhat is the output rate of \\(x\\)?\n\nSolution to Question 1b:\n\n\n\n\n\n\n\nQuestion 1c:\n\nWhat is the initial mass of the salt in the tank?\n\nSolution to Question 1c:\n\n\n\n\n\n\n\nQuestion 1d:\n\nConstruct a model for this initial value problem (but do not solve it).\n\nSolution to Question 1d:\n\n\n\n\n\n\n\nQuestion 1e:\n\nWhat method(s) can we apply to solve the equation in Question 1d (but don’t solve it)?\n\nSolution to Question 1e:"
  },
  {
    "objectID": "Chp1/07-Mixture-Applications.html#sec-07quest2",
    "href": "Chp1/07-Mixture-Applications.html#sec-07quest2",
    "title": "1.7: Applications to Compartmental Analysis",
    "section": "Question 2:",
    "text": "Question 2:\n\nLet \\(P\\) denote the population of the world (in billions) \\(t\\) years since \\(1960\\). In 1960 the world’s population was approximately 3 billion, and the population growth is model by \\[\\frac{dP}{dt} =0.2P  , \\qquad \\ P(0)=3.\\]\nSolving this model gives \\(P(t)=3e^{0.02t}\\), and predicts the population in 2021 is \\(10.16\\) billion.\nWhy do you think predicted value is different from the actual value?\n\nSolution to Question 2:"
  },
  {
    "objectID": "Chp1/07-Mixture-Applications.html#the-logistic-model",
    "href": "Chp1/07-Mixture-Applications.html#the-logistic-model",
    "title": "1.7: Applications to Compartmental Analysis",
    "section": "The Logistic Model",
    "text": "The Logistic Model\n\nWe can construct our population model by considering:\n\\[\\color{dodgerblue}{\\large \\frac{dP}{dt} = \\bigg( \\mbox{Birth Rate} \\bigg) - \\bigg( \\mbox{Death Rate} \\bigg).}\\]\nCompetition within the population causes the populations to decrease (disease, murder, natural disasters, war, lack of food/water). If we assume the death rate is proportional to the total number of possible two-party interactions, we get:\n\\[ \\mbox{Death rate} = k_2 \\left( \\begin{array}{c} P\\\\ 2 \\end{array} \\right) = k_2 \\left( \\frac{P(P-1)}{2} \\right) .\\]\n\n\n\n\n\n\nNote\n\n\n\n\\(\\left( \\begin{array}{c} P\\\\ 2 \\end{array} \\right)\\) denotes “\\(P\\) choose 2”, and in general we have \\(\\displaystyle \\left( \\begin{array}{c} n\\\\ k \\end{array} \\right) = \\frac{n!}{k!(n-k)!}\\).\n\n\nTaking both the birth and death rates into account, we get the Logistic model for population change which we simplify:\n\\[\\frac{dP}{dt} = \\bigg( \\hspace{1in} \\mbox{??} \\hspace{1in}  \\bigg) - \\bigg(  \\hspace{1in} \\mbox{??} \\hspace{1in} \\bigg) .\\]"
  },
  {
    "objectID": "Chp1/07-Mixture-Applications.html#sec-07quest3",
    "href": "Chp1/07-Mixture-Applications.html#sec-07quest3",
    "title": "1.7: Applications to Compartmental Analysis",
    "section": "Question 3:",
    "text": "Question 3:\n\nReplace the ?? in the formula above with an appropriate expression. Then show that the model above can be rewritten in the form \\(\\dfrac{dP}{dt} = -AP(P-L)\\) where \\(A\\) and \\(L\\) are positive constants.\n\nSolution to Question 3:\n\n\n\nEnter your answers in place of the two ??’s in the previous Markdown cell."
  },
  {
    "objectID": "Chp1/07-Mixture-Applications.html#sec-07quest4",
    "href": "Chp1/07-Mixture-Applications.html#sec-07quest4",
    "title": "1.7: Applications to Compartmental Analysis",
    "section": "Question 4:",
    "text": "Question 4:\n\nA population of rabbits changes over time \\(t\\) (in years) according to the logistic model \\[ \\frac{dP}{dt} = 3P-\\frac{1}{20}P^2. \\]\n\nQuestion 4a:\n\nFor what initial population sizes \\(P_0\\) will the population grow at first?\n\nSolution to Question 4a:\n\n\n\n\n\n\n\nQuestion 4b:\n\nFor what initial population sizes \\(P_0\\) will the population decrease at first?\n\nSolution to Question 4b:\n\n\n\n\n\n\n\nQuestion 4c:\n\nFor what initial population sizes \\(P_0\\) will the population never change?\n\nSolution to Question 4c:\n\n\n\n\n\n\n\nQuestion 4d:\n\nExplain, in practical terms, why answers in (a)-(c) makes sense.\n\nSolution to Question 4d:\n\n\n\n\n\n\n\nQuestion 4e:\n\nIf the initial rabbit population is \\(P_0=P(0)=50\\), find a solution to the initial value problem and find a formula for the population \\(P\\) as a function of time \\(t\\).\n\nSolution to Question 4e:\n\n\n\nYou may solve “by hand” without technology or feel free to play around with the code cells below to help with some of the computations.  \n\n\n# Partial Fraction Decomposition \nimport sympy as sym  # import sympy\n\n# t, P are variables, B is constant of integration\nt, P, B = sym.symbols('t, P, B')  \n\n#################################\n# STUDENT TO DO:\n# Replace ?? with an expression\n#################################\nleft = ?? # Left side of the equation after separating ODE\n\nleftsimp = left.apart(P)  # Partial frac decomp left side\n\nprint(leftsimp)\n\n\n# Integrate both sides after decomposing left side\n\nleftint = sym.integrate(leftsimp, P)  # integrate left\nrightint = sym.integrate(-1/20, t) + B  # integrate right with +B added\n\nprint(\"Integral on the left side with respect to P is\", leftint,\n      \"\\n \\n Integral on the right side with respect to t is\", rightint)\n\n\nfrom sympy.solvers import solve\n\nsolP = solve(leftint - rightint, P)  # finds explicit solution\n\nprint(\"P = \", solP)  # Prints explicit solution"
  },
  {
    "objectID": "Chp1/07-Mixture-Applications.html#sec-07quest5",
    "href": "Chp1/07-Mixture-Applications.html#sec-07quest5",
    "title": "1.7: Applications to Compartmental Analysis",
    "section": "Question 5:",
    "text": "Question 5:\n\nA swimming pool whose volume is 10,000 gallons contains water that is \\(0.01\\)% chlorine. Starting at \\(t=0\\), city water containing \\(0.001\\)% chlorine is pumped into the pool at a rate of 5 gal/min. The pool water flows out at the same rate. Let \\(x\\) denote the amount of chlorine (in pounds) in the pool \\(t\\) minutes since water has begun being pumped into the pool.\n\nA concentration of \\(0.01\\)% chlorine solution means \\(0.01\\) pounds of chlorine per 100 gallons of solution.\n\n\nQuestion 5a:\n\nConstruct a differential equation for rate of change of the mass of chlorine (in pounds) \\(x\\) in the pool at time \\(t\\).\n\nSolution to Question 5a:\n\n\n\n\n\n\n\nQuestion 5b:\n\nSolve the initial value problem using the differential equation in (a) and the given initial % concentration.\n\nSolution to Question 5b:\n\n\n\n\n\nQuestion 5c:\n\nWhen will the pool water be \\(0.002\\)% chlorine?\n\n\n\n\n\n\nTip\n\n\n\nTry using the solve function imported from the sympy.solvers package.\n\nSee sympy.solvers documentation.\n\n\n\n\nSolution to Question 5c:\n\n\n\n\n\n#import sympy as sym  # already imported\n#from sympy solvers import solve  # already imported\n\nt = sym.Symbol('t')\n\n###############################################\n# STUDENT TO DO:\n# Replace each ?? with an expression or value\n###############################################\n\ntsol = solve(?? - ??, t)  # solve for t\n\nprint(tsol)"
  },
  {
    "objectID": "Chp1/07-Mixture-Applications.html#partial-fraction-decomposition-with-sympy",
    "href": "Chp1/07-Mixture-Applications.html#partial-fraction-decomposition-with-sympy",
    "title": "1.7: Applications to Compartmental Analysis",
    "section": "Partial Fraction Decomposition with SymPy",
    "text": "Partial Fraction Decomposition with SymPy\n\nThe code below performs partial fraction decomposition on the left side of the differential equation (after separating).\n\nThe function apart in the SymPy library is very handy for this!\n\n\nimport sympy as sym  # import sympy\n\nt, P = sym.symbols('t, P')  # t and P are variables\n\nL = sym.symbols('L', real = True, constant = True)  # Constants\n\nleft = 1/(P * (P-L))  # Left side of the equation after separating\n\nleft.apart(P)  # Partial frac decomp left side"
  },
  {
    "objectID": "Chp1/07-Mixture-Applications.html#integrate-both-sides",
    "href": "Chp1/07-Mixture-Applications.html#integrate-both-sides",
    "title": "1.7: Applications to Compartmental Analysis",
    "section": "Integrate Both Sides",
    "text": "Integrate Both Sides\n\nThe code cell below uses sympy.integrate to evaluate integrals.\n\nfrac1 = 1/(L * (P - L))\nfrac2 = -1/(L * P)\n\nA, B = sym.symbols('A, B', real = True, constant = True)  # Constants\n\nleftint = sym.integrate(frac1, P) + sym.integrate(frac2, P)  # integrate left\nrightint = sym.integrate(-A, t) + B  # integrate right with +B added\n\nprint(\"Integral on the left side with respect to P is\", leftint,\n      \"\\n \\n Integral on the right side with respect to t is\", rightint)"
  },
  {
    "objectID": "Chp1/07-Mixture-Applications.html#finding-an-explicit-form-solve-for-p",
    "href": "Chp1/07-Mixture-Applications.html#finding-an-explicit-form-solve-for-p",
    "title": "1.7: Applications to Compartmental Analysis",
    "section": "Finding an Explicit Form: Solve for \\(P\\)",
    "text": "Finding an Explicit Form: Solve for \\(P\\)\n\nWe use the solve function from the solvers library in SymPy to find an explicit solution for \\(P\\).\n\nfrom sympy.solvers import solve\n\nsol = solve(leftint - rightint, P)  # finds explicit solution\n\nprint(\"P = \", sol)  # Prints explicit solution\n\n\nsym.latex(sol)  # convert solution to latex"
  },
  {
    "objectID": "Chp1/07-Mixture-Applications.html#simplifying-the-explicit-solution",
    "href": "Chp1/07-Mixture-Applications.html#simplifying-the-explicit-solution",
    "title": "1.7: Applications to Compartmental Analysis",
    "section": "Simplifying the Explicit Solution",
    "text": "Simplifying the Explicit Solution\n\nThe output above gives LaTeX code for an explicit solution for \\(P\\) in terms of \\(t\\) (as well as constants \\(A\\) and \\(L\\)).\n\nThe LaTeX in the output above uses a double backslash \\\\ instead of a single backslash \\.\nAfter replacing each \\\\ in the LaTeX code from the output above with \\ we get the solution below.\nThen we simplify the right side.\n\n\\[\\begin{array}{lrc}\nP &=& \\dfrac{L^{2} e^{L \\left(A t - B\\right)}}{L e^{L \\left(A t - B\\right)} - 1}\\\\\n&=& \\dfrac{L}{1- e^{-L(At-B)}}\\\\\n&=& \\dfrac{L}{1- e^{-ALt+LB}}\\\\\n&=& \\dfrac{L}{1 {\\color{tomato}{-e^{LB}}}e^{-{\\color{dodgerblue}{AL}}t}}\\\\\n&=&\\dfrac{L}{1+ {\\color{tomato}{C}}e^{-{\\color{dodgerblue}{k}}t}}\n\\end{array}\\]\nFrom the work above, we have the following solution for the Logistic model:\n\\[\\boxed{\\large{P = \\dfrac{L}{1+ {\\color{tomato}{C}}e^{-{\\color{dodgerblue}{k}}t}} \\quad \\mbox{with } {\\color{dodgerblue}{k=AL}}}}.\\]\n\n\n\n\n\n\nNote\n\n\n\nThe constant \\(\\color{tomato}{C}\\) depends on the initial condition. Set \\(t=0\\) and \\(P=P_0\\), and then solve for \\(\\color{tomato}{C}\\)."
  },
  {
    "objectID": "Chp1/08-Application-Heating-and-Cooling.html",
    "href": "Chp1/08-Application-Heating-and-Cooling.html",
    "title": "1.8: Applications to Heating and Cooling",
    "section": "",
    "text": "Cooling Coffee\nA group of students want to develop a rate of change equation to describe the cooling rate for hot coffee in order that they can make predictions about other cups of cooling coffee. Their idea is to use a temperature probe to collect data on the temperature of the coffee as it changes over time and then to use this data to develop a rate of change equation.\nThe data they collected is shown in the table below. The temperature \\(C\\) (in degrees Fahrenheit) was recorded every 2 minutes over a 14 minute period.\nExploring Differential Equations by Adam Spiegler is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Based on a work at https://github.com/CU-Denver-MathStats-OER/ODEs and original content created by Rasmussen, C., Keene, K. A., Dunmyre, J., & Fortune, N. (2018). Inquiry oriented differential equations: Course materials. Available at https://iode.sdsu.edu."
  },
  {
    "objectID": "Chp1/08-Application-Heating-and-Cooling.html#sec-08quest1",
    "href": "Chp1/08-Application-Heating-and-Cooling.html#sec-08quest1",
    "title": "1.8: Applications to Heating and Cooling",
    "section": "Question 1:",
    "text": "Question 1:\n\nFigure out a way to use this data to fill in the third column whose values approximate \\(\\displaystyle\\frac{dC}{dt}\\), where \\(C\\) is the temperature of the coffee.\n\nSolution to Question 1:\n\n\n\n Use the Python code cell below to help with the calculations \n\n\nimport numpy as np\n\n# Create vector of values for t\nt = np.arange(0, 16, 2)  \n\n# Create vector of temperature values, c\nc = np.array([160.3, 120.4, 98.1, 84.8, 78.5, 74.4, 72.1, 71.5])  \n\n# Create vector to save each approx for dC/dt\ndiff = np.zeros(8)\n\n########################################################\n# Student to do: Replace ?? with an appropriate formula\n########################################################\ndiff[0] = ??  # approx for dc/dt at t=0\ndiff[1] = ??  # approx for dc/dt at t=2\ndiff[2] = ??  # approx for dc/dt at t=4\ndiff[3] = ??  # approx for dc/dt at t=6\ndiff[4] = ??  # approx for dc/dt at t=8\ndiff[5] = ??  # approx for dc/dt at t=10\ndiff[6] = ??  # approx for dc/dt at t=12\ndiff[7] = ??  # approx for dc/dt at t=14\n\nprint(diff)"
  },
  {
    "objectID": "Chp1/08-Application-Heating-and-Cooling.html#sec-08quest2",
    "href": "Chp1/08-Application-Heating-and-Cooling.html#sec-08quest2",
    "title": "1.8: Applications to Heating and Cooling",
    "section": "Question 2:",
    "text": "Question 2:\n\nDo you expect \\(\\displaystyle\\frac{dC}{dt}\\) to depend on just the temperature \\(C\\), on just the time \\(t\\), or both the temperature \\(C\\) and the time \\(t\\)? Explain in practical terms.\n\nSolution to Question 2:"
  },
  {
    "objectID": "Chp1/08-Application-Heating-and-Cooling.html#sec-08quest3",
    "href": "Chp1/08-Application-Heating-and-Cooling.html#sec-08quest3",
    "title": "1.8: Applications to Heating and Cooling",
    "section": "Question 3:",
    "text": "Question 3:\n\nRoughly sketch below your best guess for the graph of \\(\\displaystyle\\frac{dC}{dt}\\) on the axes below. Label the variable you decided to plot on the horizontal axis.\n\nSolution to Question 3:"
  },
  {
    "objectID": "Chp1/08-Application-Heating-and-Cooling.html#sec-08quest4",
    "href": "Chp1/08-Application-Heating-and-Cooling.html#sec-08quest4",
    "title": "1.8: Applications to Heating and Cooling",
    "section": "Question 4:",
    "text": "Question 4:\n\nIn the code cell below, the object myin is the input for the model for \\(\\dfrac{dC}{dt}\\). In the code below, define myin to be either t or c depending on your answers to Question 2 and Question 3. Then run the code to plot and find an equation that best fits your data.\n\nSolution to Question 4:\n\n\n\n Edit one line of code in the cell below and run. \n\n\n\nfrom numpy.polynomial.polynomial import polyfit\nimport matplotlib.pyplot as plt\n\n# Note arrays t, c, and diff are defined in previous code cell above. \n\n################################################################\n# Student to do: Replace the ?? in the line of code below.\n################################################################\n\nmyin = ??  # Replace the ?? with your input (either t or c)\nmyout = diff\n\nb, m = polyfit(myin, myout, 1)\n\nplt.plot(myin, myout, '.')\nplt.plot(myin, b + m * myin, '-')\n\n# Display formula on plot\nplt.text(80,-20, f\"dc/dt = {round(b,2)} + {round(m,2)} Input\", \n         horizontalalignment=\"left\", \n         fontsize = 16, \n         color = \"b\")\nplt.show()"
  },
  {
    "objectID": "Chp1/08-Application-Heating-and-Cooling.html#a-formula-for-newtons-law-of-heating-and-cooling",
    "href": "Chp1/08-Application-Heating-and-Cooling.html#a-formula-for-newtons-law-of-heating-and-cooling",
    "title": "1.8: Applications to Heating and Cooling",
    "section": "A Formula for Newton’s Law of Heating and Cooling",
    "text": "A Formula for Newton’s Law of Heating and Cooling\n\nNewton’s Law of Heating and Cooling states that the temperature \\(T\\) of an object at time \\(t\\) changes at a rate which is proportional to the difference of its temperature and the temperature of its surrounding:\n\\[\\color{dodgerblue}{\\large \\boxed{\\frac{dT}{dt} = -k(T-A)}}, \\]\nwhere \\(A\\) is a constant that denotes the ambient temperature and \\(k&gt;0\\) is a constant that depends on the object."
  },
  {
    "objectID": "Chp1/08-Application-Heating-and-Cooling.html#sec-08quest5",
    "href": "Chp1/08-Application-Heating-and-Cooling.html#sec-08quest5",
    "title": "1.8: Applications to Heating and Cooling",
    "section": "Question 5:",
    "text": "Question 5:\n\nBased on the model you found in Question 4, determine the ambient temperature of the room in which the coffee in Question 1 is cooling.\n\nSolution to Question 5:"
  },
  {
    "objectID": "Chp1/08-Application-Heating-and-Cooling.html#sec-08quest6",
    "href": "Chp1/08-Application-Heating-and-Cooling.html#sec-08quest6",
    "title": "1.8: Applications to Heating and Cooling",
    "section": "Question 6:",
    "text": "Question 6:\n\nWhat happens as \\(\\mathbf{t \\to \\infty}\\) if the initial temperature \\(\\mathbf{T_0&gt;A}\\)? If the initial temperature \\(\\mathbf{T_0 &lt; A}\\)?\n\nSolution to Question 6:"
  },
  {
    "objectID": "Chp1/08-Application-Heating-and-Cooling.html#sec-08quest7",
    "href": "Chp1/08-Application-Heating-and-Cooling.html#sec-08quest7",
    "title": "1.8: Applications to Heating and Cooling",
    "section": "Question 7:",
    "text": "Question 7:\n\nLet \\(S(p)\\) denote the number of units of a particular commodity supplied to the market at a price of \\(p\\) dollars per unit, and let \\(D(p)\\) denote the corresponding number of units demanded by the market at the same price.\n\nIn static circumstances, market equilibrium occurs at the price where demand equals supply.\nHowever, certain economic models consider a more dynamic economy in which price, supply, and demand are assumed to vary with time.\nOne of these, the Evans price adjustment model, assumes that the rate of change of price with respect to time \\(t\\) is proportional to the shortage, which is the difference between the quantity demanded and the quantity supplied.\n\n\nQuestion 7a:\n\nWrite a differential equation for the rate of the change of the price of the good with respect to time.\n\nSolution to Question 7a:\n\n\n\n\n\n\n\nQuestion 7b:\n\nIf we assume that supply and demand are linear functions given by \\[ S(p) = 2+p \\quad \\mbox{ and } \\quad D(p)=8-2p, \\] find a general solution to the differential equation in Question 7a.\n\nSolution to Question 7b:\n\n\n\n\n\n\n\nQuestion 7c:\n\nIf the price is \\(\\$5\\) at time \\(t=0\\) and the price is \\(\\$3\\) at time \\(t=2\\), determine what happens to \\(p\\) in the long run.\n\nSolution to Question 7c:"
  },
  {
    "objectID": "Chp1/08-Application-Heating-and-Cooling.html#sec-08quest8",
    "href": "Chp1/08-Application-Heating-and-Cooling.html#sec-08quest8",
    "title": "1.8: Applications to Heating and Cooling",
    "section": "Question 8:",
    "text": "Question 8:\n\nA detective finds a murder victim at 9 am. The temperature of the body is measured at \\(90.3^{\\circ}\\)F. One hour later, the temperature of the body is \\(89.0^{\\circ}\\)F. The temperature of the room has been maintained at a constant \\(68^{\\circ}\\)F.\n\nQuestion 8a:\n\nAssuming the temperature, \\(T\\), of the body obeys Newton’s Law of Cooling, write a differential equation for \\(T\\). Your equation will include the constant \\(k\\) (for now).\n\nSolution to Question 8a:\n\n\n\n\n\n\n\nQuestion 8b:\n\nSolve the differential equation to estimate the time the murder occurred.\n\nSolution to Question 8b:"
  },
  {
    "objectID": "Chp1/ODE-Tools-Tutorial.html",
    "href": "Chp1/ODE-Tools-Tutorial.html",
    "title": "Python Tutorial for First Order ODEs",
    "section": "",
    "text": "Section 1: Loading ode_tools from GitHub\n!pip install git+https://github.com/CU-Denver-MathStats-OER/ODEs\nfrom IPython.display import clear_output\nclear_output()\nA function named slope_field() plots a slope field for a differential equation over a specified range of values for the indpendent and dependent variables.\nA function named plot_sol(t, x, diffeq, t0, x0) plots a slope field as well as the solution that passes thru a given initial condition.\nA function named euler_method() computes \\(n\\) steps of Euler’s method each with identical step size \\(\\Delta t = dt\\).\nA function named plot_method() graphically compares numerical approximations from Euler’s method with the actual solutions.\nExploring Differential Equations by Adam Spiegler is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. Python scripts created by Jonathon Hirschi, Troy Butler, and Adam Spiegler."
  },
  {
    "objectID": "Chp1/ODE-Tools-Tutorial.html#how-to-plot-with-slope_fieldt-x-diffeq",
    "href": "Chp1/ODE-Tools-Tutorial.html#how-to-plot-with-slope_fieldt-x-diffeq",
    "title": "Python Tutorial for First Order ODEs",
    "section": "How to Plot with slope_field(t, x, diffeq)",
    "text": "How to Plot with slope_field(t, x, diffeq)\n\n\nInput vectors of values for t and x (points where the vectors will be plotted) and define diffeq.\n\n\nimport numpy as np\n\n# Setup the grid\nt = np.linspace(0,10,11)  # np.linspace(initial, end, number_values)\nx = np.linspace(40,60,10)  # np.linspace(initial, end, number_values)\n\n# Setup the differential equation\ndef diffeq(t, x):\n    return 9.8 - (x / 5) \n\n\nWe import the slope_field() function.\n\n\nLike packages, you only need to import a function one time after opening a notebook.\nBe sure you have first loaded the ode_tools module from GitHub..\n\nRefer to Section 1: Loading ode_tools from GitHub to correct the error.\n\n\n\nfrom utils.ode_tools import slope_field  # Only need to run one time\n\n\nWe generate the slope field by running the function with the command slope_field(t, x, diffeq).\n\n\n# inputs t, x, and diffeq defined above\n\nslope_field(t, x, diffeq)  # Plot slope field of diffeq"
  },
  {
    "objectID": "Chp1/ODE-Tools-Tutorial.html#each-time-you-want-to-plot-a-new-slope-field",
    "href": "Chp1/ODE-Tools-Tutorial.html#each-time-you-want-to-plot-a-new-slope-field",
    "title": "Python Tutorial for First Order ODEs",
    "section": "Each time you want to plot a new slope field:",
    "text": "Each time you want to plot a new slope field:\n\n\nRedefine t, x, and/or diffeq as needed.\nThen run the command slope_field(t, x, diffeq)."
  },
  {
    "objectID": "Chp1/ODE-Tools-Tutorial.html#how-to-plot-with-plot_solt-x-diffeq-t0-x0",
    "href": "Chp1/ODE-Tools-Tutorial.html#how-to-plot-with-plot_solt-x-diffeq-t0-x0",
    "title": "Python Tutorial for First Order ODEs",
    "section": "How to Plot with plot_sol(t, x, diffeq, t0, x0)",
    "text": "How to Plot with plot_sol(t, x, diffeq, t0, x0)\n\n\nSpecifying the inputs for plot_sol(t, x, diffeq, t0, x0)\n\n\nimport numpy as np\n\n# Setup the grid\nt = np.linspace(0,10,11)  # np.linspace(initial, end, number_values)\nx = np.linspace(40,60,10)  # np.linspace(initial, end, number_values)\n\n# Setup the differential equation\ndef diffeq(t, x):\n    return 9.8 - (x / 5) \n\n# Enter t0, the initial value of t\n# Enter x0, the value of x at t0\nt0 = 2\nx0 = 55\n\n\nImport the plot_sol() function.\n\n\nLike packages, you only need to import a function one time after opening a notebook.\nBe sure you have first loaded the ode_tools module from GitHub..\n\nRefer to Section 1: Loading ode_tools from GitHub to correct the error.\n\n\n\nfrom utils.ode_tools import plot_sol  # Import function\n\n\nWe generate the slope field by running the function with the command plot_sol(t, x, diffeq, t0, x0).\n\n\n# t, x, diffeq, and x0 have been defined above\n\nplot_sol(t, x, diffeq, t0, x0)  # Plot solution with initial condition"
  },
  {
    "objectID": "Chp1/ODE-Tools-Tutorial.html#each-time-you-want-to-plot-a-new-solution",
    "href": "Chp1/ODE-Tools-Tutorial.html#each-time-you-want-to-plot-a-new-solution",
    "title": "Python Tutorial for First Order ODEs",
    "section": "Each time you want to plot a new solution:",
    "text": "Each time you want to plot a new solution:\n\n\nRedefine t, x, diffeq, t0, and/or x0 as needed.\nThen run the command plot_sol(t, x, diffeq, t0, x0)."
  },
  {
    "objectID": "Chp1/ODE-Tools-Tutorial.html#how-to-approximate-with-euler_methoddiffeq-t0-x0-dt-n",
    "href": "Chp1/ODE-Tools-Tutorial.html#how-to-approximate-with-euler_methoddiffeq-t0-x0-dt-n",
    "title": "Python Tutorial for First Order ODEs",
    "section": "How to Approximate with euler_method(diffeq, t0, x0, dt, n)",
    "text": "How to Approximate with euler_method(diffeq, t0, x0, dt, n)\n\n\nDefine diffeq.\nDefine the initial value \\((t_0, x_0) =\\) (t0, x0).\nDefine the step size \\(\\Delta t\\) as dt, and the number of steps n.\n\n\n# Define diffeq\ndef diffeq(t, x):  # t is independent variable and x is dependent variable\n    return x + t  # Use t and x for ind and dep variables\n\n# Initial value\nt0 = 0 # initial value of input\nx0 = 4 # initial value output when t = t_0\n\n \ndt = 0.5  # Step size\nn = 3  # number of steps\n\n\nWe import the euler_method() function.\n\n\nLike packages, you only need to import a function one time after opening a notebook.\nBe sure you have first loaded the ode_tools module from GitHub..\n\nRefer to Section 1: Loading ode_tools from GitHub to correct the error.\n\n\n\nfrom utils.ode_tools import euler_method\n\n\nCalculate each step with the function euler_method(diffeq, t0, x0, dt, n).\n\n\n# diffeq, t0, x0, dt, and n have been defined above\n\neuler_method(diffeq, t0, x0, dt, n) # Apply Euler's method"
  },
  {
    "objectID": "Chp1/ODE-Tools-Tutorial.html#each-time-you-want-to-apply-eulers-method",
    "href": "Chp1/ODE-Tools-Tutorial.html#each-time-you-want-to-apply-eulers-method",
    "title": "Python Tutorial for First Order ODEs",
    "section": "Each time you want to apply Euler’s method:",
    "text": "Each time you want to apply Euler’s method:\n\n\nRedefine diffeq, t0, x0, dt, and/or n as needed.\nThen run the command euler_method(diffeq, t0, x0, dt, n)."
  },
  {
    "objectID": "Chp1/ODE-Tools-Tutorial.html#how-to-use-plot_eulert-x-diffeq-t0-x0-dt-n",
    "href": "Chp1/ODE-Tools-Tutorial.html#how-to-use-plot_eulert-x-diffeq-t0-x0-dt-n",
    "title": "Python Tutorial for First Order ODEs",
    "section": "How to Use plot_euler(t, x, diffeq, t0, x0, dt, n)",
    "text": "How to Use plot_euler(t, x, diffeq, t0, x0, dt, n)\n\n\nInput vectors of values for t and x (points where the vectors will be plotted) and define diffeq.\nDefine an initial condition \\((t_0, x_0) =\\)(t0, x0).\nDefine the step size \\(\\Delta t=\\) dt, and number of iterations \\(n=\\) n.\n\n\nimport numpy as np\n\n# Set up gride for slope field\nt = np.linspace(0, 1.5, 7)  \nx = np.linspace(0, 20, 21)\n\n# Define differential equation\ndef diffeq(t, x):\n    return x + t \n\n# Define initial value\nt0 = 0  # initial input value\nx0 = 4  # initial output value\n\n# Define step size and n\ndt = 0.5  # step size\nn = 3  # number of steps\n\n\nWe import the plot_euler() function.\n\n\nLike packages, you only need to import a function one time after opening a notebook.\nBe sure you have first loaded the ode_tools module from GitHub..\n\nRefer to Section 1: Loading ode_tools from GitHub to correct the error.\n\n\n\n# Import plot_euler function from ode_plot_tools module.\n\nfrom utils.ode_tools import plot_euler\n\n\nGenerate the plot by running the function with the command plot_euler(t, x, diffeq, t0, x0, dt, n).\n\n\n# t, x, diffeq, t0, x0, dt, and n have been defined above\n\nplot_euler(t, x, diffeq, t0, x0, dt, n)  # create plot of euler approx"
  },
  {
    "objectID": "Chp1/ODE-Tools-Tutorial.html#each-time-you-want-to-create-a-new-plot-with-plot_euler",
    "href": "Chp1/ODE-Tools-Tutorial.html#each-time-you-want-to-create-a-new-plot-with-plot_euler",
    "title": "Python Tutorial for First Order ODEs",
    "section": "Each time you want to Create a New Plot with plot_euler():",
    "text": "Each time you want to Create a New Plot with plot_euler():\n\n\nRedefine t, x, diffeq, t0, x0, dt, and/or n as needed.\nThen run the command plot_euler(t, x, diffeq, t0, x0, dt, n)."
  },
  {
    "objectID": "Chp2/09-Intro-to-Second-Order.html",
    "href": "Chp2/09-Intro-to-Second-Order.html",
    "title": "2.1: Second Order Linear Differential Equations",
    "section": "",
    "text": "Second Order Linear Differential Equations\nA second order linear differential equation has the form\n\\[\\color{dodgerblue}{P(t)\\frac{d^2y}{dt^2}+Q(t)\\frac{dy}{dt}+R(t)y=G(t)}\\]\nwhere \\(P\\), \\(Q\\), \\(R\\), and \\(G\\) are continuous functions of the indpendent variable (\\(t\\)). There are many applications for which this type of differential equation is a useful model.\nNormally, guess and check is not an efficient algorithm for solving mathematical equations. In the case of a differential equation, we have an infinite number of possible solutions that we check.\nBy working through some examples, we can build an intuition for determining what a wise initial guess might be.\nWhen given initial conditions as in Question 13 and Question 14, we typically need to set up and solve a system of linear equations to find the values of the constants.\nFor example, solving an initial value problem for a third order linear differential equation with constant coefficient we might have for example a resulting system of three linear equations such as We would like to solve the following system of linear equations:\n\\[\\begin{array}{rcrcrcr}\n2C_1 & + & C_2 & + & C_3 & = & 5\\\\\n4C_1 & - & 6C_2 & & & = & -2\\\\\n-2C_1 & + & 7C_2 & + & 2C_3 & = & 9\n\\end{array}\\]\nExploring Differential Equations by Adam Spiegler is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Based on a work at https://github.com/CU-Denver-MathStats-OER/ODEs and original content created by Rasmussen, C., Keene, K. A., Dunmyre, J., & Fortune, N. (2018). Inquiry oriented differential equations: Course materials. Available at https://iode.sdsu.edu."
  },
  {
    "objectID": "Chp2/09-Intro-to-Second-Order.html#applications-breaking-a-glass-with-your-voice",
    "href": "Chp2/09-Intro-to-Second-Order.html#applications-breaking-a-glass-with-your-voice",
    "title": "2.1: Second Order Linear Differential Equations",
    "section": "Applications: Breaking a Glass with your Voice",
    "text": "Applications: Breaking a Glass with your Voice\n\nGlass Breaking: You probably have all seen in cartoons or on Mythbusters where a wineglass is broken by singing a particular high-pitched note. The phenomenon that makes this possible is called resonance. Resonance results from the fact that the crystalline structures of certain solids have natural frequencies of vibration. An external force of the same frequency will “resonate” with the object and create a huge increase in energy. For instance, if the frequency of a musical note matches the natural vibration of a crystal wineglass, the glass will vibrate with increasing amplitude until it shatters. The following is one model for understanding resonance.\n\\[\\frac{d^2x}{dt^2}+k^2x=\\cos(kt)\\]\nIf you don’t believe this is possible. Play the video below.\nVideo Source: “Boy Breaks Wine Glass with Voice.” YouTube, uploaded by chasechocolate, uploaded December 14, 2009.\n\nfrom IPython.display import YouTubeVideo\n\nYouTubeVideo('sH7XSX10QkM', width=800, height=450)"
  },
  {
    "objectID": "Chp2/09-Intro-to-Second-Order.html#applications-collapsing-bridge",
    "href": "Chp2/09-Intro-to-Second-Order.html#applications-collapsing-bridge",
    "title": "2.1: Second Order Linear Differential Equations",
    "section": "Applications: Collapsing Bridge",
    "text": "Applications: Collapsing Bridge\n\nTacoma Narrows Bridge: The Tacoma Narrows Bridge in Washington State was one of the largest suspended bridges built at the time. The bridge connecting the Tacoma Narrows channel collapsed in a dramatic way on Thursday November 7, 1940. Winds of 35-46 miles/hours produced an oscillation which eventually broke the construction. The bridge began first to vibrate torsionally, giving it a twisting motion. Later the vibrations entered a natural resonance (same term as in the glass breaking) with the bridge. Here is a simplified second order differential equation that models the situation of the Tacoma Bridge.\n\\[\\frac{d^2y}{dt^2}+4y=2\\sin(2.1t)\\]\nIf you don’t believe this is possible. Play the video below.\nVideo Source: “The Collapse of ‘Galloping Gertie’.” YouTube, uploaded by Smithsonian National Air and Space Museum, uploaded November 4, 2019.\n\nfrom IPython.display import YouTubeVideo\n\nYouTubeVideo('y0xohjV7Avo', width=800, height=450)"
  },
  {
    "objectID": "Chp2/09-Intro-to-Second-Order.html#more-applications-of-second-order-differential-equations",
    "href": "Chp2/09-Intro-to-Second-Order.html#more-applications-of-second-order-differential-equations",
    "title": "2.1: Second Order Linear Differential Equations",
    "section": "More Applications of Second Order Differential Equations",
    "text": "More Applications of Second Order Differential Equations\n\nSometimes resonance is a good thing! Violins, for instance, are designed so that their body resonates at as many different frequencies as possible, which allows you to hear the vibrations of the strings!\nThere are many other situations that can be modeled with second order differential equations, including mass-spring systems, RLC circuits, pendulums, car springs bouncing, etc. In this section you will learn how to solve second order linear differential equations with constant coefficients. That is, equations where \\(P\\), \\(Q\\), and \\(R\\) are constant. If \\(G\\) is zero, then the equation is called homogeneous. When \\(G\\) is nonzero then the equation is called non-homogeneous. As you will discover in the sections that follow, the distinction between homogeneous and non-homogeneous equations will be quite useful."
  },
  {
    "objectID": "Chp2/09-Intro-to-Second-Order.html#sec-09quest1",
    "href": "Chp2/09-Intro-to-Second-Order.html#sec-09quest1",
    "title": "2.1: Second Order Linear Differential Equations",
    "section": "Question 1:",
    "text": "Question 1:\n\nRead the following equations with meaning, by completing the following sentence,\n\n“\\(x(t)\\) is a function for which its second derivative …” (try saying itself instead of \\(x\\)).\n\n\\[ \\mbox{a. } \\frac{d^2x}{dt^2} = -x \\qquad\n\\mbox{b. } \\frac{d^2x}{dt^2} + x = 0 \\qquad\n\\mbox{c. } \\frac{d^2x}{dt^2} + 4x = 0 \\qquad\n\\mbox{d. } \\frac{d^2x}{dt^2} = x\\]\n\nSolution to Question 1:"
  },
  {
    "objectID": "Chp2/09-Intro-to-Second-Order.html#sec-09quest2",
    "href": "Chp2/09-Intro-to-Second-Order.html#sec-09quest2",
    "title": "2.1: Second Order Linear Differential Equations",
    "section": "Question 2:",
    "text": "Question 2:\n\nFor each differential equation (a)-(d) in Question 1, based on your readings with meaning, find two different solution functions.\n\nSolution to Question 2:"
  },
  {
    "objectID": "Chp2/09-Intro-to-Second-Order.html#sec-09quest3",
    "href": "Chp2/09-Intro-to-Second-Order.html#sec-09quest3",
    "title": "2.1: Second Order Linear Differential Equations",
    "section": "Question 3:",
    "text": "Question 3:\n\nYour task in this question is to use the “guess and test” approach to find a solution to the linear second order, homogeneous differential equation\n\\[\\frac{d^2x}{dt^2}+10\\frac{dx}{dt}+9x=0\\]\nBy now you know very well that solutions are functions. What is your best guess for a function whose second derivative plus 10 times its first derivative plus 9 times the function itself sum to zero? Explain briefly the rationale for your guess and then test it out to see if it works. If it doesn’t work refine your guess and keep trying.\n\nSolution to Question 3:"
  },
  {
    "objectID": "Chp2/09-Intro-to-Second-Order.html#sec-09quest4",
    "href": "Chp2/09-Intro-to-Second-Order.html#sec-09quest4",
    "title": "2.1: Second Order Linear Differential Equations",
    "section": "Question 4:",
    "text": "Question 4:\n\nDetermine if a constant multiple of your solution in Question 3 is also a solution.\n\nSolution to Question 4:"
  },
  {
    "objectID": "Chp2/09-Intro-to-Second-Order.html#sec-09quest5",
    "href": "Chp2/09-Intro-to-Second-Order.html#sec-09quest5",
    "title": "2.1: Second Order Linear Differential Equations",
    "section": "Question 5:",
    "text": "Question 5:\n\nTry and find a different solution, one that is not a constant multiple of your solution to Question 3\n\nSolution to Question 5:"
  },
  {
    "objectID": "Chp2/09-Intro-to-Second-Order.html#sec-09quest6",
    "href": "Chp2/09-Intro-to-Second-Order.html#sec-09quest6",
    "title": "2.1: Second Order Linear Differential Equations",
    "section": "Question 6:",
    "text": "Question 6:\n\nDetermine the general solution to \\(\\dfrac{d^2x}{dt^2}+10\\dfrac{dx}{dt}+9x=0\\).\n\nSolution to Question 6:"
  },
  {
    "objectID": "Chp2/09-Intro-to-Second-Order.html#sec-09quest7",
    "href": "Chp2/09-Intro-to-Second-Order.html#sec-09quest7",
    "title": "2.1: Second Order Linear Differential Equations",
    "section": "Question 7:",
    "text": "Question 7:\n\nConsider again the differential equation \\(\\dfrac{d^2x}{dt^2}+10\\dfrac{dx}{dt}+9x=0\\).\n\nSolution to Question 7:\n\n\n\nStep 1:\n\nBy guessing \\(x(t) = e^{rt}\\), show that this guess yields a solution to the differential equation precisely when \\(r^2 + 10r + 9 = 0\\).\n\n\n\n\n\nStep 2:\n\nSolve this quadratic equation to find two different values of \\(r\\).\n\n\n\n\n\nStep 3:\n\nState two different solutions for the differential equation, one for each value of \\(r\\).\n\n\n\n\n\nStep 4:\n\nForm the general solution by multiplying your two solutions by constants \\(c_1\\) and \\(c_2\\), and adding the results.\n\n\n\n\n\nStep 5:\n\nCongratulate yourself :)"
  },
  {
    "objectID": "Chp2/09-Intro-to-Second-Order.html#sec-09quest8",
    "href": "Chp2/09-Intro-to-Second-Order.html#sec-09quest8",
    "title": "2.1: Second Order Linear Differential Equations",
    "section": "Question 8:",
    "text": "Question 8:\n\nFind the general solution to the following differential equation: \\(\\dfrac{d^2x}{dt^2}+\\dfrac{dx}{dt}-6x=0\\).\n\nSolution to Question 8:"
  },
  {
    "objectID": "Chp2/09-Intro-to-Second-Order.html#sec-09quest9",
    "href": "Chp2/09-Intro-to-Second-Order.html#sec-09quest9",
    "title": "2.1: Second Order Linear Differential Equations",
    "section": "Question 9:",
    "text": "Question 9:\n\nShow \\(y=Cte^{2t}\\) is a solution to \\(y''-4y'+4y=0\\).\n\nSolution to Question 9:"
  },
  {
    "objectID": "Chp2/09-Intro-to-Second-Order.html#sec-09quest10",
    "href": "Chp2/09-Intro-to-Second-Order.html#sec-09quest10",
    "title": "2.1: Second Order Linear Differential Equations",
    "section": "Question 10:",
    "text": "Question 10:\n\nWhy do you think the previous example has a “different” looking solution?\n\nSolution to Question 10:"
  },
  {
    "objectID": "Chp2/09-Intro-to-Second-Order.html#sec-09quest11",
    "href": "Chp2/09-Intro-to-Second-Order.html#sec-09quest11",
    "title": "2.1: Second Order Linear Differential Equations",
    "section": "Question 11:",
    "text": "Question 11:\n\nSolve the differential equation \\(z''+z'=z\\).\n\nSolution to Question 12:"
  },
  {
    "objectID": "Chp2/09-Intro-to-Second-Order.html#sec-09quest12",
    "href": "Chp2/09-Intro-to-Second-Order.html#sec-09quest12",
    "title": "2.1: Second Order Linear Differential Equations",
    "section": "Question 12:",
    "text": "Question 12:\n\nSolve the differential equation \\(3w''+18w'+27w=0\\).\n\nSolution to Question 12:"
  },
  {
    "objectID": "Chp2/09-Intro-to-Second-Order.html#sec-09quest13",
    "href": "Chp2/09-Intro-to-Second-Order.html#sec-09quest13",
    "title": "2.1: Second Order Linear Differential Equations",
    "section": "Question 13:",
    "text": "Question 13:\n\nSolve the initial value probelm: \\(w''+8w'+16w=0\\); \\(w(0)=-2\\); \\(w'(0)=12\\).\n\n\n\n\n\n\nTip\n\n\n\nYou may use the linalg.solve() function in Python to solve the system of two linear equations you get as a result of using the initial conditions to solve for the general constants. See Appendix section on linalg.solve.\n\n\n\nSolution to Question 13:\n\n\n\n\n\n# Optional Code to Use Python to Solve for C_1 and C_2\n\n# STUDENT TO_DO: Replace each ?? with an appropriate number\n\nimport numpy as np  # Import NumPy library\n\n# Enter coefficient matrix \nA = np.array([[??, ??],\n              [??, ??]])\n\n# Enter vector of constants on right side\nb = np.array([[??],[??]])\n\n# Solve Ax=b and store solution in x\nx = np.linalg.solve(A,b)\n\n# Print solution to the screen\nprint(\"The solution to the system is \\n\", x)"
  },
  {
    "objectID": "Chp2/09-Intro-to-Second-Order.html#sec-09quest14",
    "href": "Chp2/09-Intro-to-Second-Order.html#sec-09quest14",
    "title": "2.1: Second Order Linear Differential Equations",
    "section": "Question 14:",
    "text": "Question 14:\n\nSolve the initial value probelm: \\(y'' +3y'-10y=0\\); \\(y(0)=8\\), \\(y'(0)=6\\).\n\n\n\n\n\n\nTip\n\n\n\nYou may use the linalg.solve() function in Python to solve the system of two linear equations you get as a result of using the initial conditions to solve for the general constants. See Appendix section on linalg.solve.\n\n\n\nSolution to Question 14:\n\n\n\n\n\n# Optional Code to Use Python to Solve for C_1 and C_2\n\n# STUDENT TO_DO: Replace each ?? with an appropriate number\n\n#import numpy as np  # Do not need to run if already imported\n\n# Enter coefficient matrix \nA = np.array([[??, ??],\n              [??, ??]])\n\n# Enter vector of constants on right side\nb = np.array([[??],[??]])\n\n# Solve Ax=b and store solution in x\nx = np.linalg.solve(A,b)\n\n# Print solution to the screen\nprint(\"The solution to the system is \\n\", x)"
  },
  {
    "objectID": "Chp2/09-Intro-to-Second-Order.html#latexing-a-system-of-equations",
    "href": "Chp2/09-Intro-to-Second-Order.html#latexing-a-system-of-equations",
    "title": "2.1: Second Order Linear Differential Equations",
    "section": "LaTeX’ing a System of Equations",
    "text": "LaTeX’ing a System of Equations\n\nMy LaTeX code for the system above is entered in the array environment with 7 columns so the variables are nicely aligned. You could LaTeX the system above using a more simple array such as:\n\\[\\begin{array}{rcr}\n2C_1 + C_2 + C_3 & = & 5\\\\\n4C_1 - 6C_2 & = & -2\\\\\n-2C_1 +  7C_2 +  2C_3 & = & 9\n\\end{array}\\]\nUsing more columns in the array is more complicated to LaTeX, but (I think) looks nicer. Feel free to align and style as you like."
  },
  {
    "objectID": "Chp2/09-Intro-to-Second-Order.html#latexing-the-relevant-matrices-and-vectors",
    "href": "Chp2/09-Intro-to-Second-Order.html#latexing-the-relevant-matrices-and-vectors",
    "title": "2.1: Second Order Linear Differential Equations",
    "section": "LaTeX’ing the Relevant Matrices and Vectors",
    "text": "LaTeX’ing the Relevant Matrices and Vectors\n\nThe system of equations has the following coefficient matrix I will denote \\(A\\).\n\\[A = \\begin{bmatrix}\n2 & 1 & 1\\\\\n4 & -6 & 0\\\\\n-2 & 7 & 2\n\\end{bmatrix}\\]\nThe column vector of constants on the right side of the equations I denote \\(\\mathbf{b}\\) is given below.\n\\[\\mathbf{b} = \\begin{bmatrix} 5\\\\-2\\\\9 \\end{bmatrix}\\]\nLastly, the column vector representing the variables is given below.\n\\[\\mathbf{x} = \\begin{bmatrix} C_1 \\\\ C_2 \\\\ C_3 \\end{bmatrix}\\]\nThereore the original system of linear equations has the matrix equation\n\\[A \\mathbf{x} = \\mathbf{b}\\]\nwhere \\(A\\), \\(\\mathbf{x}\\), and \\(\\mathbf{b}\\) are all defined above."
  },
  {
    "objectID": "Chp2/09-Intro-to-Second-Order.html#sec-09linalgsolve",
    "href": "Chp2/09-Intro-to-Second-Order.html#sec-09linalgsolve",
    "title": "2.1: Second Order Linear Differential Equations",
    "section": "Solving the Matrix Eq \\(A\\mathbf{x} = \\mathbf{b}\\) Using NumPy",
    "text": "Solving the Matrix Eq \\(A\\mathbf{x} = \\mathbf{b}\\) Using NumPy\n\nImagine in the course of solving an initial value problem for a third order differential equation that we would like to solve the following system of linear equations\n\\[\\begin{array}{rcrcrcr}\n2C_1 & + & C_2 & + & C_3 & = & 5\\\\\n4C_1 & - & 6C_2 & & & = & -2\\\\\n-2C_1 & + & 7C_2 & + & 2C_3 & = & 9\n\\end{array}\\]\nwhich has corresponding matrix equation \\(A \\mathbf{x} = \\mathbf{b}\\) where\n\\[A = \\begin{bmatrix}\n2 & 1 & 1\\\\\n4 & -6 & 0\\\\\n-2 & 7 & 2\n\\end{bmatrix} \\quad \\mbox{and} \\quad \\mathbf{b} = \\begin{bmatrix} 5\\\\-2\\\\9 \\end{bmatrix}.\\]\n\nThe NumPy library has a built-in function called linalg.solve(A,b) that can solve a matrix equation of the form \\(A \\mathbf{x} = \\mathbf{b}\\).\n\n\nimport numpy as np  # Import NumPy library\n\n# Enter coefficient matrix \nA = np.array([[2., 1., 1.],\n              [4., -6., 0.],\n              [-2., 7., 2.]])\n\n# Enter vector of constants on right side\nb = np.array([[5.],[-2.],[9]])\n\n# Solve Ax=b and store solution in x\nx = np.linalg.solve(A,b)\n\n# Print solution to the screen\nprint(\"The solution to the system is \\n\", x)"
  },
  {
    "objectID": "Chp2/09-Intro-to-Second-Order.html#interpreting-the-output-of-linalg.solve",
    "href": "Chp2/09-Intro-to-Second-Order.html#interpreting-the-output-of-linalg.solve",
    "title": "2.1: Second Order Linear Differential Equations",
    "section": "Interpreting the Output of linalg.solve()",
    "text": "Interpreting the Output of linalg.solve()\n\nFrom the output of the previous code cell, we see that\n\\[ \\mathbf{x} = \\begin{bmatrix} C_1 \\\\ C_2 \\\\ C_3 \\end{bmatrix}\n= \\begin{bmatrix} 1 \\\\ 1 \\\\ 2 \\end{bmatrix},\\]\nwhich gives the solution \\(C_1 = 1\\), \\(C_2 = 1\\), and \\(C_3 = 2\\)."
  },
  {
    "objectID": "Chp2/10-Homogeneous-2nd-Order.html",
    "href": "Chp2/10-Homogeneous-2nd-Order.html",
    "title": "2.2: Homogeneous Equations",
    "section": "",
    "text": "Solving the Homogeneous Equations\nA second order linear differential equation with constant coefficients has the form\n\\[\\color{dodgerblue}{a \\frac{d^2x}{dt^2}+b\\frac{dx}{dt}+cx=}{\\color{tomato}{f(t)}}\\]\nwhere \\(a\\), \\(b\\), and \\(c\\) are constants and \\(f\\) is a continuous function of \\(t\\).\nThe previous question is a proof of Euler’s formula which allows us to write exponentials in polar form,\n\\[\\large \\color{dodgerblue}{e^{(\\alpha + i \\beta) t} = e^{\\alpha t} \\bigg( \\cos{(\\beta t)} + i  \\sin{(\\beta t)} \\bigg).}\\]\nTo summarize our results, when solving a homogeneous second order differential with constant coefficients, we can find the zeros of the corresponding characteristic equation. Then\n\\[\\_\\_\\_\\_?\\_\\_\\_\\_\\]\n\\[\\_\\_\\_\\_?\\_\\_\\_\\_\\]\n\\[\\_\\_\\_\\_?\\_\\_\\_\\_\\]\nImagine we connect an object with mass \\(m\\) kg to a spring with stiffness coefficient \\(k\\) kg/sec\\(^2\\) that is connected to a stationary wall on the other end. We give the mass some initial position \\(s_0\\) and velocity \\(v_0\\), and we observe the mechanics of how the mass moves along a surface with friction coefficient \\(b\\) kg/sec. Such a system is called a mass-spring oscillator or a harmonic oscillator. The position of the mass at time, \\(y(t)\\), is modeled by the second order differential equation\n\\[\\large {\\color{mediumseagreen}{m}}y''+{\\color{tomato}{b}}y'+{\\color{dodgerblue}{k}}y=0; \\qquad y(0)=s_0, \\quad y'(0)=v_0.\\]\nWe now import a function named damped_harmonic_oscillator() that lives inside a module named mass_spring stored in GitHub.\nExploring Differential Equations by Adam Spiegler is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Based on a work at https://github.com/CU-Denver-MathStats-OER/ODEs and original content created by Rasmussen, C., Keene, K. A., Dunmyre, J., & Fortune, N. (2018). Inquiry oriented differential equations: Course materials. Available at https://iode.sdsu.edu."
  },
  {
    "objectID": "Chp2/10-Homogeneous-2nd-Order.html#revisiting-the-roots-of-the-characteristic-equation",
    "href": "Chp2/10-Homogeneous-2nd-Order.html#revisiting-the-roots-of-the-characteristic-equation",
    "title": "2.2: Homogeneous Equations",
    "section": "Revisiting the Roots of the Characteristic Equation",
    "text": "Revisiting the Roots of the Characteristic Equation\n\nWe have shown that to find solutions to the homogeneous case \\(a \\dfrac{d^2x}{dt^2}+b\\dfrac{dx}{dt}+cx =0\\), we can:\n\nSet up the corresponding characteristic polynomial, \\(ar^2+br+c=0\\).\nFind solutions \\(r=r_1\\) and \\(r=r_2\\) to the characteristic equation.\nQuadratic equations may have real or complex solutions:\n\n\nIf \\(r_1\\) and \\(r_2\\) are distinct real numbers, then the general solution is \\(x(t) = C_1e^{r_1t} + C_2e^{r_2t}\\).\nIf there is one repeated root, \\(r_1\\), then the general solution is \\(x(t) = C_1e^{r_1t} + C_2{\\color{tomato}{t}}e^{r_1t}\\).\nIf the solutions are of the form \\(\\mathbf{r = \\alpha \\pm i \\beta}\\), then what?"
  },
  {
    "objectID": "Chp2/10-Homogeneous-2nd-Order.html#sec-10quest1",
    "href": "Chp2/10-Homogeneous-2nd-Order.html#sec-10quest1",
    "title": "2.2: Homogeneous Equations",
    "section": "Question 1:",
    "text": "Question 1:\n\nLet \\(\\displaystyle f(t)=e^{i \\beta t}\\) and answer the questions below.\n\nQuestion 1a:\n\nFind a formula for \\(f'\\), \\(f''\\), \\(f'''\\), \\(f^{iv}\\), and \\(f^{v}\\).\n\nSolution to Question 1a:\n\n\n\n\n\n\n\nQuestion 1b:\n\nExpress \\(f(t)=e^{i \\beta t}\\) using as a Taylor series at \\(t=0\\).\n\\[f(t) = f(0) + \\frac{f'(0)}{1!}t + \\frac{f''(0)}{2!} t^2 +   \\frac{f'''(0)}{3!} t^3 + \\frac{f^{iv}(0)}{4!} t^4 +  \\frac{f^{v}(0)}{5!} t^5 +  \\ldots\\]\n\nSolution to Question 1b:\n\n\n\n\n\n\n\nQuestion 1c:\n\nGroup the real and imaginary parts of the first several terms in the Taylor series together.\n\nSolution to Question 1c:\n\n\n\n\n\n\n\nQuestion 1d:\n\nDo you recognize these are Taylor series of common functions?\n\nSolution to Question 1d:"
  },
  {
    "objectID": "Chp2/10-Homogeneous-2nd-Order.html#sec-10quest2",
    "href": "Chp2/10-Homogeneous-2nd-Order.html#sec-10quest2",
    "title": "2.2: Homogeneous Equations",
    "section": "Question 2:",
    "text": "Question 2:\n\nIf \\(z(t)=P(t)+i Q(t)\\) is complex solution to a differential equation of the form \\(az''+bz'+cz=0\\), prove that the real part \\(P(t)\\) is a solution itself and the imaginary part \\(Q(t)\\) (not including the \\(i\\)) is also a solution itself.\n\n\n\n\n\n\nNote\n\n\n\nThe derivative of a complex function is the sum of the derivatives of the real and imaginary parts of the complex function \\(z'(t) = P'(t) + i Q'(t)\\).\n\n\n\nSolution to Question 2:"
  },
  {
    "objectID": "Chp2/10-Homogeneous-2nd-Order.html#sec-10quest3",
    "href": "Chp2/10-Homogeneous-2nd-Order.html#sec-10quest3",
    "title": "2.2: Homogeneous Equations",
    "section": "Question 3:",
    "text": "Question 3:\n\nFind the general solution to the homogeneous differential equation\n\\[\\frac{d^2x}{dt^2}+2 \\frac{dx}{dt} + 17x=0\\]\nUse the results from Question 2 on exponentiation of complex numbers to find the general solution to the differential equation.\n\nSolution to Question 3:"
  },
  {
    "objectID": "Chp2/10-Homogeneous-2nd-Order.html#sec-10quest4",
    "href": "Chp2/10-Homogeneous-2nd-Order.html#sec-10quest4",
    "title": "2.2: Homogeneous Equations",
    "section": "Question 4:",
    "text": "Question 4:\n\nReplace each blank in the cell below with an appropriate formula.\n\nSolution to Question 4:\n\n\n\nFill in solutions below."
  },
  {
    "objectID": "Chp2/10-Homogeneous-2nd-Order.html#sec-10quest5",
    "href": "Chp2/10-Homogeneous-2nd-Order.html#sec-10quest5",
    "title": "2.2: Homogeneous Equations",
    "section": "Question 5:",
    "text": "Question 5:\n\nFind a general solution to the differential equation \\(\\displaystyle 2y''+7y'-4y=0\\).\n\nSolution to Question 5:"
  },
  {
    "objectID": "Chp2/10-Homogeneous-2nd-Order.html#sec-10quest6",
    "href": "Chp2/10-Homogeneous-2nd-Order.html#sec-10quest6",
    "title": "2.2: Homogeneous Equations",
    "section": "Question 6:",
    "text": "Question 6:\n\nConsider the mass-spring oscillator that has mass \\(m=1\\) kg, stiffness \\(k=4\\) kg/sec\\(^2\\), and damping \\(b\\) kg/sec. The displacement \\(y\\) from equilibrium position at time \\(t\\) seconds satisfies the initial value problem\n\\[y''+by'+4y=0; \\ \\ y(0)=1 \\ \\ y'(0)=0.\\]\n\nQuestion 6a:\n\nInterpret the practical meaning of the initial conditions.\n\nSolution to Question 6a:\n\n\n\n\n\n\n\nQuestion 6b:\n\nFind the solution if the damping coefficient is \\(b=0\\) and describe what happens to the mass as \\(t \\to \\infty\\).\n\nSolution to Question 6b:\n\n\n\n\n\n\n\nQuestion 6c:\n\nFind the solution if the damping coefficient is \\(b=5\\) and describe what happens to the mass as \\(t \\to \\infty\\).\n\nSolution to Question 6c:\n\n\n\n\n\n\n\nQuestion 6d:\n\nFind the solution if the damping coefficient is \\(b=4\\) and describe what happens to the mass as \\(t \\to \\infty\\).\n\nSolution to Question 6d:\n\n\n\n\n\n\n\nQuestion 6e:\n\nFind the solution if the damping coefficient is \\(b=2\\) and describe what happens to the mass as \\(t \\to \\infty\\).\n\nSolution to Question 6e:"
  },
  {
    "objectID": "Chp2/10-Homogeneous-2nd-Order.html#sec-10import",
    "href": "Chp2/10-Homogeneous-2nd-Order.html#sec-10import",
    "title": "2.2: Homogeneous Equations",
    "section": "Importing damped_harmonic_oscillator",
    "text": "Importing damped_harmonic_oscillator\n\n\nRun the first code cell below to load the most up to date modules stored in GitHub.\nRun the second code cell to import thedamped_harmonic_oscillator function from the mass_spring module\n\n\n!pip install git+https://github.com/CU-Denver-MathStats-OER/ODEs\nfrom IPython.display import clear_output\nclear_output()\n\n\nfrom utils.mass_spring import damped_harmonic_oscillator  # Only need to import one time."
  },
  {
    "objectID": "Chp2/10-Homogeneous-2nd-Order.html#sec-10mass-spring-exp",
    "href": "Chp2/10-Homogeneous-2nd-Order.html#sec-10mass-spring-exp",
    "title": "2.2: Homogeneous Equations",
    "section": "Running Experiments",
    "text": "Running Experiments\n\nRecall the mass-spring system (also called a damped harmonic oscillator) has the following model\n\\[my''+by'+ky=0; \\ \\ y(0)=s_0 \\ \\ y'(0)=v_0.\\]\nIn Question 6 we have:\n\n\\(m=1\\),\n\\(k=4\\),\nand then we condsidered what happens when we change the amount of friction (damping) in the system.\n\nExperiment with the value of \\(b\\) in the code cell below, and see how changing \\(b\\) affects the behavior of mass-spring systems.\n\nNote the animation may take several seconds to complete running.\n\n\ndamped_harmonic_oscillator(m=1,  # mass is 1\n                           b=0,  # friction is 0\n                           k=4,  # stiffness is 4\n                           x0=[1,0])  # initial position and velocity"
  },
  {
    "objectID": "Chp2/10-Homogeneous-2nd-Order.html#running-a-side-by-side-comparison",
    "href": "Chp2/10-Homogeneous-2nd-Order.html#running-a-side-by-side-comparison",
    "title": "2.2: Homogeneous Equations",
    "section": "Running A Side-by-Side Comparison",
    "text": "Running A Side-by-Side Comparison\n\nThe function damped_harmonic_comp() will simultaneously run to animations for two different mass-spring systems.\nBelow we compare an underdampled and overdamped system.\n\nYou first need to import the damped_harmonic_comp function from mass_spring. You only need to do this one time in an active sesion.\nSet parameters for both systems.\nRun the code cell. I may take up to a minute to run.\nPress the play button.\n\n\nfrom utils.mass_spring import damped_harmonic_oscillator_comp\n\n\ndamped_harmonic_oscillator_comp(m=[0.2, 0.3],  # masses\n                                b=[0.5, 0.1],  # frictions\n                                k=[1, 2],  # stiffnesses  \n                                A=[0, 0],  # Amplitudes of forcing\n                                omega=[1, 1],  # Frequencies of forcing\n                                x0=[[0.5, 1], [-0.5, -1]],  # initial conditions\n                                fps=4,  # frames per second\n                                tf=40)  # total time"
  },
  {
    "objectID": "Chp2/11-Nonhomogeneous-2nd-Order.html",
    "href": "Chp2/11-Nonhomogeneous-2nd-Order.html",
    "title": "2.3: Nonhomogeneous Equations",
    "section": "",
    "text": "An Initial Guess for Nonhomogeneous Equations\nSo far we have been using patterns recognized in wisely guessing the form of solutions to homogeneous second order differential equations of the form \\(ay''+by'+cy = 0\\).\nCan we adjust our guesses to handle nonhomogeneous differential equations as well?\nThe previous exercise is an example of resonance, which occurs when an external force has the same properties (such as frequency) as the general homogeneous solution. Practically speaking, when the homogeneous and nonhomogeneous parts of the differential equation have resonance this creates a huge increase in energy (that may even cause a bridge to collapse).\nExploring Differential Equations by Adam Spiegler is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Based on a work at https://github.com/CU-Denver-MathStats-OER/ODEs and original content created by Rasmussen, C., Keene, K. A., Dunmyre, J., & Fortune, N. (2018). Inquiry oriented differential equations: Course materials. Available at https://iode.sdsu.edu."
  },
  {
    "objectID": "Chp2/11-Nonhomogeneous-2nd-Order.html#sec-11quest1",
    "href": "Chp2/11-Nonhomogeneous-2nd-Order.html#sec-11quest1",
    "title": "2.3: Nonhomogeneous Equations",
    "section": "Question 1:",
    "text": "Question 1:\n\nFind a solution to the following nonhomogeneous differential equation: \\[\\frac{d^2x}{dt^2}+10\\frac{dx}{dt}+9x=18.\\]\nWhat is your best guess for a function whose second derivative plus 10 times its first derivative plus 9 times the function itself sum to 18? Test out your guess to see if it works. If it doesn’t work keep trying.\n\nSolution to Question 1:"
  },
  {
    "objectID": "Chp2/11-Nonhomogeneous-2nd-Order.html#a-particular-solution-for-a-nonhomogeneous-equation",
    "href": "Chp2/11-Nonhomogeneous-2nd-Order.html#a-particular-solution-for-a-nonhomogeneous-equation",
    "title": "2.3: Nonhomogeneous Equations",
    "section": "A Particular Solution for a Nonhomogeneous Equation",
    "text": "A Particular Solution for a Nonhomogeneous Equation\n\nThe solution you found in the previous question is called the particular solution to the nonhomogeneous differential equation it is not the general solution. For now we will focus on how we can find the particular solution by wisely guessing their general form based on the nonhomogeneous part of the differential equation. We will soon combine what we know about the homogeneous case and particular solutions to find general solutions."
  },
  {
    "objectID": "Chp2/11-Nonhomogeneous-2nd-Order.html#sec-11quest2",
    "href": "Chp2/11-Nonhomogeneous-2nd-Order.html#sec-11quest2",
    "title": "2.3: Nonhomogeneous Equations",
    "section": "Question 2:",
    "text": "Question 2:\n\nFind a solution to the following nonhomogeneous differential equation: \\[\\frac{d^2x}{dt^2}+10\\frac{dx}{dt}+9x=18t.\\]\nWhat is your best guess? Test out your guess to see if it works. If it doesn’t work keep trying.\n\nSolution to Question 2:"
  },
  {
    "objectID": "Chp2/11-Nonhomogeneous-2nd-Order.html#sec-11quest3",
    "href": "Chp2/11-Nonhomogeneous-2nd-Order.html#sec-11quest3",
    "title": "2.3: Nonhomogeneous Equations",
    "section": "Question 3:",
    "text": "Question 3:\n\nBased on the previous examples, what would be a good guess for the general form of the particular solution to \\[\\frac{d^2x}{dt^2}+10\\frac{dx}{dt}+9x=18t^3.\\]\nYour guess should have depend on constants whose values you do not need to determine for this example.\n\nSolution to Question 3:"
  },
  {
    "objectID": "Chp2/11-Nonhomogeneous-2nd-Order.html#sec-11quest4",
    "href": "Chp2/11-Nonhomogeneous-2nd-Order.html#sec-11quest4",
    "title": "2.3: Nonhomogeneous Equations",
    "section": "Question 4:",
    "text": "Question 4:\n\nSean and Paula are trying to find the particular solution to\n\\[\\frac{d^2x}{dt^2}+10\\frac{dx}{dt}+9x=85\\sin(2t).\\]\nSean guesses \\(x(t)=A\\sin(2t)\\) for the particular solution and Paula guesses \\(x(t)=B\\cos(2t)\\).\n\nQuestion 4a:\n\nDo you think these are reasonable guesses? Explain why or why not.\n\nSolution to Question 4a:\n\n\n\n\n\n\n\nQuestion 4b:\n\nFor each of their guesses, can you find a value of \\(A\\) or \\(B\\) such that their guess is a solution? If yes, write down the general solution. If no, come up with a different guess for the particular solution and show that your guess is correct.\n\nSolution to Question 4b:\n\n\n\n\n\n\n\nOptional: Solving Question 4b with Python\n\nWe use our guess of \\(x_{p}(t) =\\) ?? from Question 4b in the code cell below.\n\nFirst we import required libraries.\nThen we define symbols.\nEnter a symnbolic formula for \\(x_p(t)\\) for x in the code below.\nCompute first and second derivatives.\nPlug \\(x_p\\), \\(x'_p\\), and \\(x''_p\\) into the left side of the differential equation and group terms.\n\n\n# STUDENT TO_DO: Replace each ?? with an appropriate expression\n\nimport numpy as np\nimport sympy as sym\n\nt, x, A, B = sym.symbols('t, x, A, B')  # Creating symbols\n\nx = ??  # Particular solution\n\nfirst = x.diff(t,1)  # find formula for x'_p\nsecond = x.diff(t,2)  # find formula for x''_p\n\nsym.simplify(??)  # simplify left side of diff eq\n\n\nInterpreting Simplified Output\n\nThe output above tells us that\n\\[x''_p + 10x'_p + 9x_p = (??)\\sin{(2t)} + (??) \\cos{(2t)} = 85\\sin{(2t)} + 0 \\cos{(2t)}.\\]\nThus, to solve for \\(A\\) and \\(B\\), we can solve the system of linear equations\n\\[\\begin{array}{rcrcr}\n??A & - & ??B & = & 85\\\\\n??A & + & ??B & = & 0\n\\end{array}\\]\nWe use the linalg.solve() function from SymPy to solve this system. See Solving Systems with linalg.solve more details.\n\n# STUDENT TO_DO: Replace each ?? with an appropriate number\n\n# Enter coefficient matrix \nA = np.array([[??, ??],\n              [??, ??]])\n\n# Enter vector of constants on right side\nb = np.array([[??],[??]])\n\n# Solve Ax=b and store solution in x\nx = np.linalg.solve(A,b)\n\n# Print solution to the screen\nprint(\"The solution to the system is \\n\", x)\n\n\n\nInterpreting Output: Expressing a Final Answer\n\nFrom the output above we see that \\(A=??\\) and \\(B=??\\), thus the particular solution is\n\\[x_p = A\\sin{(2t)}+B\\cos{(2t)} = ??\\sin{(2t)} + ?? \\cos{(2t)}.\\]"
  },
  {
    "objectID": "Chp2/11-Nonhomogeneous-2nd-Order.html#sec-11quest5",
    "href": "Chp2/11-Nonhomogeneous-2nd-Order.html#sec-11quest5",
    "title": "2.3: Nonhomogeneous Equations",
    "section": "Question 5:",
    "text": "Question 5:\n\nConsider the nonhomogeneous differential equation \\[\\frac{d^2x}{dt^2}+25x=10\\cos(5t).\\]\n\nQuestion 5a:\n\nSuppose you wish to find the particular solution to this differential equation. Explain why a guess of the form \\(x(t) = A\\cos(5t) + B\\sin(5t)\\) is doomed to fail.\n\nSolution to Question 5a:\n\n\n\n\n\n\n\nQuestion 5b:\n\nNevertheless, explain why your particular solution must have terms that look like \\(\\cos(5t)\\) and \\(\\sin(5t)\\).\n\nSolution to Question 5b:\n\n\n\n\n\n\n\nQuestion 5c:\n\nFor an unknown differentiable function \\(f(t)\\), write down the first and second derivatives of \\(tf(t)\\), what do you notice?\n\nSolution to Question 5c:\n\n\n\n\n\n\n\nQuestion 5d:\n\nExplain why a guess of \\(x(t) = At\\cos(5t)\\) is insufficient to find the particular solution.\n\nSolution to Question 5d:\n\n\n\n\n\n\n\nQuestion 5e:\n\nUse the guess \\(\\color{tomato}{x(t) = t(A\\cos(5t) + B\\sin(5t))}\\) to find a particular solution to the above equation.\n\n\nSolution to Question 5e:\n\n\n\n\n\n\nOptional: Solving Question 5e with Python\n\nWe use our guess of \\(x_p(t) = t(A\\cos(5t) + B\\sin(5t))\\) in the code cell below.\n\nFirst we import required libraries.\nThen we define symbols.\nEnter a symnbolic formula for \\(x_p(t)\\) for x in the code below.\nCompute first and second derivatives.\nPlug \\(x_p\\), \\(x'_p\\), and \\(x''_p\\) into the left side of the differential equation and group terms.\n\n\n# STUDENT TO_DO: Replace each ?? with an appropriate expression\n\n#import numpy as np  # already imported earlier\n#import sympy as sym  # already imported earlier\n\nt, x, A, B = sym.symbols('t, x, A, B')  # Creating symbols\n\nx = ??  # Particular solution\n\nfirst = x.diff(t,1)  # find formula for x'_p\nsecond = x.diff(t,2)  # find formula for x''_p\n\nsym.simplify(??)  # simplify left side of diff eq\n\n\nInterpreting Simplified Output\n\nThe output above tells us that\n\\[x''_p + 25 x_p = (??)\\sin{(5t)} + (??) \\cos{(5t)} = 0\\sin{(5t)} + 10 \\cos{(5t)}.\\]\nThus, to solve for \\(A\\) and \\(B\\), we can solve the system of linear equations\n\\[\\begin{array}{rcrcr}\n??A & - & ??B & = & ??\\\\\n??A & + & ??B & = & ??\n\\end{array}\\]\nWe use the linalg.solve() function from SymPy to solve this system. See Solving Systems with linalg.solve more details.\n\n#import numpy as np  # already imported earlier\n\n# STUDENT TO_DO: Replace each ?? with an appropriate number\n\n# Enter coefficient matrix \nA = np.array([[??, ??],\n              [??, ??]])\n\n# Enter vector of constants on right side\nb = np.array([[??],[??]])\n\n# Solve Ax=b and store solution in x\nx = np.linalg.solve(A,b)\n\n# Print solution to the screen\nprint(\"The solution to the system is \\n\", x)\n\n\n\nInterpreting Output: Expressing a Final Answer\n\nFrom the output above we see that \\(A=??\\) and \\(B=??\\), thus the particular solution is\n\\[x_p = At\\cos{(5t)}+Bt\\sin{(5t)} = ??t\\cos{(5t)} + ?? t\\sin{(5t)}.\\]"
  },
  {
    "objectID": "Chp2/11-Nonhomogeneous-2nd-Order.html#sec-11quest6",
    "href": "Chp2/11-Nonhomogeneous-2nd-Order.html#sec-11quest6",
    "title": "2.3: Nonhomogeneous Equations",
    "section": "Question 6:",
    "text": "Question 6:\n\nIn each example, choose the words (does or does not) to indicate whether the nonhomogeneous differential equation has resonance.\n\n\n\\(x''+25x=10\\cos{(5t)}\\) (does or does not) have resonance with the homogeneous solution \\(x_H = C_1\\cos{(5t)}+ C_2 \\sin{(5t)}\\).\n\n \n\n\\(x''+25x=10e^{5t}\\) (does or does not) have resonance with the homogeneous solution \\(x_H = C_1\\cos{(5t)}+ C_2 \\sin{(5t)}\\).\n\n \n\n\\(x''-3x'-10x=10\\cos(5t)\\) (does or does not) have resonance with the homogeneous solution \\(x_H = C_1e^{5t}+ C_2 e^{-2t}\\).\n\n \n\n\\(x''-3x'-10x=10e^{5t}\\) (does or does not) have resonance with the homogeneous solution \\(x_H = C_1e^{5t}+ C_2 e^{-2t}\\).\n\n \n\n\\(x''+2x'+ 17x=6e^{-t} \\sin{(4t)}\\) (does or does not) have resonance with the homogeneous solution \\(x_H = C_1e^{-t}\\cos{(4t)}+ C_2 e^{-t}\\sin{(4t)}\\).\n\n \n\n\\(x''+2x'+ 17x=6 \\sin{(4t)}\\) (does or does not) have resonance with the homogeneous solution \\(x_H = C_1e^{-t}\\cos{(4t)}+ C_2 e^{-t}\\sin{(4t)}\\).\n\n\nSolution to Question 6:\n\n\nEdit the text for each part above."
  },
  {
    "objectID": "Chp2/11-Nonhomogeneous-2nd-Order.html#adjusting-the-guess-for-resonance",
    "href": "Chp2/11-Nonhomogeneous-2nd-Order.html#adjusting-the-guess-for-resonance",
    "title": "2.3: Nonhomogeneous Equations",
    "section": "Adjusting the Guess for Resonance",
    "text": "Adjusting the Guess for Resonance\n\nWhenever resonance is present between the homogeneous solution and nonhomogeneous forcing function, we can adjust our initial guess by multiplying by a factor of \\(t\\). For example, since \\(x''+25x=10\\cos(5t)\\) has resonance our guess for the particular solution is\n\\[x_p = {\\color{tomato}{\\mathbf{t}}} \\big(  A\\cos{(5t)}+ B \\sin{(5t)} \\big)=A{\\color{tomato}{\\mathbf{t}}}\\cos{(5t)}+ B{\\color{tomato}{\\mathbf{t}}} \\sin{(5t)}.\\]"
  },
  {
    "objectID": "Chp2/11-Nonhomogeneous-2nd-Order.html#sec-11quest7",
    "href": "Chp2/11-Nonhomogeneous-2nd-Order.html#sec-11quest7",
    "title": "2.3: Nonhomogeneous Equations",
    "section": "Question 7:",
    "text": "Question 7:\n\nFor each of the examples in the previous question where there was resonance, give the initial guess for the particular solution. Do not solve for the values of the undetermined coefficients, just enter a formula for a reasonable guess that would no longer have resonance.\n\nSolution to Question 7:\n\n\n\\(x_p =\\) ??\n\n \n\n\\(x_p =\\) ??\n\n \n\n\\(x_p =\\) ??\n\n \n\n\\(x_p =\\) ??\n\n \n\n\\(x_p =\\) ??\n\n \n\n\\(x_p =\\) ??"
  },
  {
    "objectID": "Chp2/11-Nonhomogeneous-2nd-Order.html#sec-11quest8",
    "href": "Chp2/11-Nonhomogeneous-2nd-Order.html#sec-11quest8",
    "title": "2.3: Nonhomogeneous Equations",
    "section": "Question 8:",
    "text": "Question 8:\n\nWhat would be a good guess for the general form of the particular solution to \\[ \\frac{d^2y}{dt^2}-6\\frac{dy}{dt}+9y=5e^{3t} \\mbox{?}\\] Do not find the values of the undetermined coefficients.\n\nSolution to Question 8:"
  },
  {
    "objectID": "Chp2/11-Nonhomogeneous-2nd-Order.html#sec-11quest9",
    "href": "Chp2/11-Nonhomogeneous-2nd-Order.html#sec-11quest9",
    "title": "2.3: Nonhomogeneous Equations",
    "section": "Question 9:",
    "text": "Question 9:\n\nWhat would be a good guess for the general form of the particular solution to \\[\\frac{d^2y}{dt^2}-6\\frac{dy}{dt}+9y=5e^{3t}\\cos{(2t)} \\mbox{?}\\] Do not find the values of the undetermined coefficients.\n\nSolution to Question 9:"
  },
  {
    "objectID": "Chp2/11-Nonhomogeneous-2nd-Order.html#sec-11quest10",
    "href": "Chp2/11-Nonhomogeneous-2nd-Order.html#sec-11quest10",
    "title": "2.3: Nonhomogeneous Equations",
    "section": "Question 10:",
    "text": "Question 10:\n\nWhat would be a good guess for the general form of the particular solution to \\[ \\frac{d^2y}{dt^2}-6\\frac{dy}{dt}+9y=5t^2e^{3t}\\cos{(2t)} \\mbox{?}\\] Do not find the values of the undetermined coefficients.\n\nSolution to Question 10:"
  },
  {
    "objectID": "Chp2/12-Superposition-2nd-Order.html",
    "href": "Chp2/12-Superposition-2nd-Order.html",
    "title": "2.4: Superposition and General Solutions",
    "section": "",
    "text": "A Recap of Solution Methods\nConsider a nonhomogeneous differential equation of the form\n\\[ a y''+by'+cy=f(t). \\]\nLet \\(y_h(t)\\) denote a general solution to corresponding homogeneous equation \\(a y''+by'+cy=0\\), and let \\(y_p(t)\\) denote a particular solution for the nonhomogeneous equation (when \\(f(t) \\ne 0\\)).\nLet’s explore how we can use both of these solutions to construct a general solution to nonhomogeneous differential equation.\nTo find the general solution to a nonhomogeneous differential equation you simply add a particular solution to a general solution to the corresponding homogeneous equation. This 3-step strategy:\nThis process is often called the Method of Undetermined Coefficients.\nWe can use the method of undetermined coefficients when the forcing function \\(f(t)\\) is:\nExploring Differential Equations by Adam Spiegler is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Based on a work at https://github.com/CU-Denver-MathStats-OER/ODEs and original content created by Rasmussen, C., Keene, K. A., Dunmyre, J., & Fortune, N. (2018). Inquiry oriented differential equations: Course materials. Available at https://iode.sdsu.edu."
  },
  {
    "objectID": "Chp2/12-Superposition-2nd-Order.html#finding-a-homogeneous-solution",
    "href": "Chp2/12-Superposition-2nd-Order.html#finding-a-homogeneous-solution",
    "title": "2.4: Superposition and General Solutions",
    "section": "Finding a Homogeneous Solution",
    "text": "Finding a Homogeneous Solution\n\nWe have developed methods for finding the general homogeneous solution, \\(y_h(t)\\), to a second order differential equation of the form\n\\[ ay'' + b y' + cy =0 , \\qquad \\mbox{for constants $a$, $b$, and $c$:}\\]\n\nWrite the differential equation in standard form, \\(ay'' + b y' + cy =0\\)\nFind the roots of the characteristic equation \\(ar^2+br+c=0\\).\n\n\nIf there are two distinct real roots \\(r_1\\) and \\(r_2\\), the general solution is \\(y_h(t) = C_1e^{r_1t} + C_2e^{r_2t}\\).\nIf there is one repeated real root \\(r_1\\), the general solution is \\(y_h(t) = C_1e^{r_1t} + C_2te^{r_1t}\\).\nIf there are two complex-cojugate solutions \\(r=\\alpha \\pm i \\beta\\), the general solution is \\(y_h(t) = C_1e^{\\alpha t} \\cos{(\\beta t)} + C_2e^{\\alpha t} \\sin{(\\beta t)}\\)."
  },
  {
    "objectID": "Chp2/12-Superposition-2nd-Order.html#finding-a-particular-solution",
    "href": "Chp2/12-Superposition-2nd-Order.html#finding-a-particular-solution",
    "title": "2.4: Superposition and General Solutions",
    "section": "Finding a Particular Solution",
    "text": "Finding a Particular Solution\n\nWe have also discussed how to find the particular solution, \\(y_p(t)\\) to a nonhomogeneous second order differential equation of the form\n\\[ay'' + b y' + cy =f(t).\\]\nBased on the form of \\(f(t)\\), we guess \\(y_p(t)\\) will have a similar form.\n\nTable of Common Forcing Functions\n\n\n\n\n\n\n\n\n\\(\\large f(t)\\)\n\\(\\large y_p(t)\\)\n\n\n\n\n\\(\\displaystyle {\\large Ct^n} \\quad \\mbox{ (for } n = 0, 1, 2, \\dots \\mbox{)}\\)\n\\(\\displaystyle \\large A_nt^n + A_{n-1}t^{n-1}+\\ldots + A_0\\)\n\n\n\\(\\displaystyle \\large Ce^{rt}\\)\n\\(\\displaystyle \\large Ae^{rt}\\)\n\n\n\\(\\displaystyle \\large Ce^{\\alpha t} \\cos{(\\beta t)}\\)\n\\(\\displaystyle \\large A e^{\\alpha t}\\cos{(\\beta t)} + B e^{\\alpha t}\\sin{(\\beta t)}\\)\n\n\n\\(\\displaystyle \\large Ce^{\\alpha t} \\sin{(\\beta t)}\\)\n\\(\\displaystyle \\large Ae^{\\alpha t} \\cos{(\\beta t)} + B e^{\\alpha t}\\sin{(\\beta t)}\\)\n\n\n\n\nIdentifying and Adjusting for Rseonance\n\n\nYou have resonance when your initial guess for the particular solution is a homogeneous solution.\nWhen there is resonance, multiply the guess by a multiple of \\(t\\) (until the guess is no longer a homogeneous solution).\nAfter adjusting your guess for \\(y_p(t)\\), plug into the differential equation and solve for the undetermined coefficients."
  },
  {
    "objectID": "Chp2/12-Superposition-2nd-Order.html#sec-12quest1",
    "href": "Chp2/12-Superposition-2nd-Order.html#sec-12quest1",
    "title": "2.4: Superposition and General Solutions",
    "section": "Question 1:",
    "text": "Question 1:\n\nLet \\(y_h(t)\\) and \\(y_p(t)\\) denote homogeneous and particular solutions, respectively, to the differential equation \\(ay''+by'+cy=f(t)\\). Show that their sum \\(y(t)=y_h(t)+y_p(t)\\) is a general solution to the nonhomogeneous differential equation.\n\nSolution to Question 1:"
  },
  {
    "objectID": "Chp2/12-Superposition-2nd-Order.html#sec-12quest2",
    "href": "Chp2/12-Superposition-2nd-Order.html#sec-12quest2",
    "title": "2.4: Superposition and General Solutions",
    "section": "Question 2:",
    "text": "Question 2:\n\nConsider the differential equation \\[ \\frac{d^2x}{dt^2}-\\frac{dx}{dt}-12x=e^{4t}.\\]\n\nQuestion 2a:\n\nFind a general solution to the homogeneous equation.\n\nSolution to Question 2a:\n\n\n\n\n\n\n\nQuestion 2b:\n\nFind a particular solution to the nonhomogeneous differential equation.\n\nSolution to Question 2b:\n\n\n\n\n\n\n\nQuestion 2c:\n\nUse your previous answers to give a general solution to nonhomogeneous differential equation.\n\nSolution to Question 2c:"
  },
  {
    "objectID": "Chp2/12-Superposition-2nd-Order.html#sec-12quest3",
    "href": "Chp2/12-Superposition-2nd-Order.html#sec-12quest3",
    "title": "2.4: Superposition and General Solutions",
    "section": "Question 3:",
    "text": "Question 3:\n\nLet \\(y_1(t)\\) denote a particular solution to \\(ay''+by'+cy=f_1(t)\\) and \\(y_2(t)\\) denote a particular solution to \\(ay''+by'+cy=f_2(t)\\). Show that \\(y_p(t) = y_1(t) + y_2(t)\\) is a particular solution to \\(ay''+by'+cy=f_1(t)+f_2(t)\\).\n\nSolution to Question 3:"
  },
  {
    "objectID": "Chp2/12-Superposition-2nd-Order.html#sec-12quest4",
    "href": "Chp2/12-Superposition-2nd-Order.html#sec-12quest4",
    "title": "2.4: Superposition and General Solutions",
    "section": "Question 4:",
    "text": "Question 4:\n\nConsider the differential equation\n\\[ \\frac{d^2x}{dt^2}+10\\frac{dx}{dt}+9x=85\\sin(2t)+18.\\]\nRecall that we have already worked on parts of this question. We have found that \\(x_h (t) = C_1e^{-9t}+C_2e^{-t}\\) and the particular solution corresponding to \\(f_1(t) = 85\\sin(2t)\\) is \\(x_{1}(t) = -4\\cos{(2t)}+\\sin{(2t)}\\). Using these results, finish solving the differential equation and give the general solution.\n\nSolution to Question 4:"
  },
  {
    "objectID": "Chp2/12-Superposition-2nd-Order.html#product-of-power-and-exponential-functions",
    "href": "Chp2/12-Superposition-2nd-Order.html#product-of-power-and-exponential-functions",
    "title": "2.4: Superposition and General Solutions",
    "section": "Product of Power and Exponential Functions",
    "text": "Product of Power and Exponential Functions\n\nFor a product of a power function \\(t^n\\) and an exponential such as \\(f(t) = Ct^ne^{rt}\\), we guess\n\\[\\color{dodgerblue}{ y_p(t) = \\big( A_n t^n + A_{n_1} t^{n-1} + \\ldots A_1 t + A_0 \\big) e^{rt} }.\\]\n\nMultiply by \\(t\\) if there is resonance (\\(r\\) is a real root (not repeated) of the the characteristic equation.)\nMultiply by \\(t^2\\) if there is still resonance (\\(r\\) is a repeated real root of the the characteristic equation)."
  },
  {
    "objectID": "Chp2/12-Superposition-2nd-Order.html#sec-12quest5",
    "href": "Chp2/12-Superposition-2nd-Order.html#sec-12quest5",
    "title": "2.4: Superposition and General Solutions",
    "section": "Question 5:",
    "text": "Question 5:\n\nGive a guess for the particular solution to \\[ y'' - 5y' -6y = 4t^2e^{6t}.\\]\n\nSolution to Question 5:"
  },
  {
    "objectID": "Chp2/12-Superposition-2nd-Order.html#products-of-power-exponential-and-sine-or-cosine-functions",
    "href": "Chp2/12-Superposition-2nd-Order.html#products-of-power-exponential-and-sine-or-cosine-functions",
    "title": "2.4: Superposition and General Solutions",
    "section": "Products of Power, Exponential, and Sine (or Cosine) Functions",
    "text": "Products of Power, Exponential, and Sine (or Cosine) Functions\n\nFor a product of a power function, an exponential, and either a sine or cosine such as\n\\(f(t) = Ct^ne^{\\alpha t}\\cos{(\\beta t)}\\) or \\(f(t) = Ct^ne^{\\alpha t}\\sin{(\\beta t)}\\), a similar strategy works if our guess has the form:\n\\[\\color{dodgerblue}{y_p(t) = \\big( A_n t^n + A_{n-1} t^{n-1} + \\ldots A_1 t + A_0 \\big) e^{\\alpha t}\\cos{(\\beta t)} + \\big( B_n t^n + B_{n-1} t^{n-1} + \\ldots B_1 t + B_0 \\big) e^{\\alpha t}\\sin{(\\beta t)}}.\\]\n\nMultiply by \\(t\\) if there is resonance (if \\(\\alpha \\pm i \\beta\\) are the complex roots of the the characteristic equation)."
  },
  {
    "objectID": "Chp2/12-Superposition-2nd-Order.html#sec-12quest6",
    "href": "Chp2/12-Superposition-2nd-Order.html#sec-12quest6",
    "title": "2.4: Superposition and General Solutions",
    "section": "Question 6:",
    "text": "Question 6:\n\nGive a guess for the particular solution to \\[ y'' - 5y' -6y = 4t^2e^{6t}\\sin{t}.\\]\n\nSolution to Question 6:"
  },
  {
    "objectID": "Chp2/12-Superposition-2nd-Order.html#sec-12quest7",
    "href": "Chp2/12-Superposition-2nd-Order.html#sec-12quest7",
    "title": "2.4: Superposition and General Solutions",
    "section": "Question 7:",
    "text": "Question 7:\n\nConsider the differential equation \\(x''-8x'+12x=f(t)\\). For each \\(f(t)\\), what would be your guess for the particular solution? Do not solve for the undetermined coefficients. If the method of undetermined coefficients cannot be applied, explain why not.\n\nQuestion 7a:\n\n\\(f(t) = 10\\sin{(2t)}\\)\n\nSolution to Question 7a:\n\n\n\n\n\n\n\nQuestion 7b:\n\n\\(f(t) = 10e^{6t}\\sin{(2t)}\\)\n\nSolution to Question 7b:\n\n\n\n\n\n\n\nQuestion 7c:\n\n\\(f(t) = 10\\tan{(2t)}\\)\n\nSolution to Question 7c:\n\n\n\n\n\n\n\nQuestion 7d:\n\n\\(f(t) = 10te^{2t}\\)\n\nSolution to Question 7d:\n\n\n\n\n\n\n\nQuestion 7e:\n\n\\(f(t) = 8t^{-2}\\)\n\nSolution to Question 7e:"
  },
  {
    "objectID": "Chp2/13-Mass-Spring.html",
    "href": "Chp2/13-Mass-Spring.html",
    "title": "2.5: Mass Spring Systems",
    "section": "",
    "text": "Resonance in Sight and Sound\nResonance is a phenomenon that occurs when the frequencies of two objects (such as the period of sound waves, planetary orbits, or bouncing springs) are in sync with one another that results in an increase in the amplitude of the oscillations. Below are some examples of both beautiful and catastrophic consequences of resonance.\nYou will only need to run the code cells below one time while this session remains active. However, if your session is terminated, you will need to re-run both code cells again in order to use damped_harmonic_oscillator() and/or damped_harmonic_oscillator_comp().\n!pip install git+https://github.com/CU-Denver-MathStats-OER/ODEs\nfrom IPython.display import clear_output\nclear_output()\nfrom utils.mass_spring import damped_harmonic_oscillator  \nfrom utils.mass_spring import damped_harmonic_oscillator_comp\nRecall the mass-spring oscillator introduced in Worksheet 10 Homogeneous 2nd Order. We connect an object with mass \\(m\\) kg to a spring with stiffness coefficient \\(k\\) kg/sec\\(^2\\) that is connected to a stationary wall on the other end. We give the mass some initial position \\(s_0\\) and velocity \\(v_0\\), and we observe the mechanics of how the mass moves along a surface with friction coefficient \\(b\\) kg/sec. Such a system is called a mass-spring oscillator or a harmonic oscillator. The position of the mass at time, \\(y(t)\\), is modeled by the second order differential equation\n\\[\\large {\\color{mediumseagreen}{m}}y''+ {\\color{tomato}{b}} y'+ {\\color{dodgerblue}{k}} y=0; \\qquad y(0)=s_0, \\quad y'(0)=v_0.\\]\nThus far, we have been considering the dynamics of a mass-spring systems free of external forces. Now we consider what happens if we add an external driving force.\n\\[ mx'' + by' + ky = F_{\\rm Ext}(t).\\]\nIn order to use either damped_harmonic_oscillator or damped_harmonic_oscillator_comp, we first need to import the functions from mass_spring module. See Importing Functions for code cells to perform this task.\nExploring Differential Equations by Adam Spiegler is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. Python scripts in mass_spring.py created by Troy Butler, Jonathon Hirschi, and Adam Spiegler.\nBased on a work at https://github.com/CU-Denver-MathStats-OER/ODEs and original content created by Rasmussen, C., Keene, K. A., Dunmyre, J., & Fortune, N. (2018). Inquiry oriented differential equations: Course materials. Available at https://iode.sdsu.edu."
  },
  {
    "objectID": "Chp2/13-Mass-Spring.html#saturns-rings",
    "href": "Chp2/13-Mass-Spring.html#saturns-rings",
    "title": "2.5: Mass Spring Systems",
    "section": "Saturn’s Rings",
    "text": "Saturn’s Rings\n\n\n\n\nCredit: Qkrckdwls1004 CC BY-SA 4.0 via via Wikimedia Commons\n\n\nSaturn’s rings are mostly made of many (a big understatement!) tiny, nearly pure (99.9%) water ice particles. The inner-most ring starts about 4,000 miles above Saturn, and the rings extend out to 50,000 miles. The Cassini division is the biggest gap in the rings at 3,000 miles wide, and it is the result of resonance in the orbital frequencies between ice particles in the ring and the moon Mimas.\nMimas orbits Saturn every \\(22.5\\) hours. At one point, (long long ago) there were particles in the ring that orbited every \\(11.25\\) hours. Every two orbits, those particles felt a big pull in the same direction due to the gravity of Mimas. As a result, those ice particles were pulled further out towards Mimas. The particles eventually slowed down as they were pulled further from Saturn, breaking the resonance with Mimas and resettling into a new orbit. Thus, we have the Cassini division!\nThe Cassini division is a result of a 2:1 ratio with Mimas. Other gaps are the result of other rations (such as 3:1 and 3:2) and other moons. Below is a mesmerizing video with an audio translation of the harmonizing of the resonance between Saturn’s co-orbital moons Janus and Epimetheus and nearby ice particles.\n\nVideo: SATURN Sounds Part 2: Resonance of Janus translated into music by SYSTEM Sounds, uploaded August 23, 2017."
  },
  {
    "objectID": "Chp2/13-Mass-Spring.html#breaking-a-glass-with-your-voice",
    "href": "Chp2/13-Mass-Spring.html#breaking-a-glass-with-your-voice",
    "title": "2.5: Mass Spring Systems",
    "section": "Breaking a Glass with your Voice",
    "text": "Breaking a Glass with your Voice\n\nResonance results when the frequency of a musical note matches the natural vibration of a crystal glass. The glass will vibrate with increasing amplitude until it shatters. The following is one model for understanding resonance.\n\\[\\frac{d^2x}{dt^2}+k^2x=\\cos(kt)\\]\n\nVideo: “Boy Breaks Wine Glass with Voice.” YouTube, uploaded by chasechocolate, uploaded December 14, 2009."
  },
  {
    "objectID": "Chp2/13-Mass-Spring.html#collapsing-suspension-bridge",
    "href": "Chp2/13-Mass-Spring.html#collapsing-suspension-bridge",
    "title": "2.5: Mass Spring Systems",
    "section": "Collapsing Suspension Bridge",
    "text": "Collapsing Suspension Bridge\n\nThe Tacoma Narrows Bridge in Washington State was one of the largest suspended bridges built at the time. The bridge connecting the Tacoma Narrows channel collapsed in a dramatic way on Thursday November 7, 1940. Winds of 35-46 miles/hours produced an oscillation which eventually broke the construction. The bridge began first to vibrate torsionally, giving it a twisting motion. Later the vibrations entered a natural resonance with the suspension bridge.\n\nVideo: “The Collapse of ’Galloping Gertie.” YouTube, uploaded by Smithsonian National Air and Space Museum, uploaded November 4, 2019."
  },
  {
    "objectID": "Chp2/13-Mass-Spring.html#sec-13units",
    "href": "Chp2/13-Mass-Spring.html#sec-13units",
    "title": "2.5: Mass Spring Systems",
    "section": "Units of the Coefficients",
    "text": "Units of the Coefficients\n\nFor these questions we will measure quantities using the metric system:\n\nThe overall force is measured in newtons, \\(N\\).\n\nIt is equal to the force that would give a mass of one kilogram an acceleration of one meter per \\(\\mbox{sec}^2\\),\n\nThe spring constant \\(k\\) has units of force per unit of distance. For example newtons per meter, N/m.\nThe damping constant is a unit of impulse per unit of distance. For example newton seconds per meter, \\(\\mbox{N} \\cdot \\mbox{s}\\) per meter."
  },
  {
    "objectID": "Chp2/13-Mass-Spring.html#sec-13damping",
    "href": "Chp2/13-Mass-Spring.html#sec-13damping",
    "title": "2.5: Mass Spring Systems",
    "section": "Over, Under, and Critically Damped",
    "text": "Over, Under, and Critically Damped\n\n\nIf there is no friction (\\(\\mathbf{b=0}\\)), then the system is undamped.\nIf there is a little bit of friction, the mass will oscillate and move to the other side of its equilibrium before settling back at its equilibrium position in the long run. Such a system is called underdamped.\nIf there is a lot of friction, the mass will simply settle back at the equilibrium position (without moving to the other side of the equilibrium). Such a system is called overdamped.\nWhen the system has just the perfect amount of friction such that:\n\nIf there is less friction, the mass is underdamped, and\nIf there is more friction, the mass is overdamped.\nWe say the system is critically damped."
  },
  {
    "objectID": "Chp2/13-Mass-Spring.html#sec-13quest1",
    "href": "Chp2/13-Mass-Spring.html#sec-13quest1",
    "title": "2.5: Mass Spring Systems",
    "section": "Question 1:",
    "text": "Question 1:\n\nConsider a mass-spring system with a mass \\(m=2\\) kg, spring constant \\(k=3\\) newtons per meter, and damping constant \\(b\\) newton seconds per meter. For what values of \\(b\\) will the mass-spring oscillator be underdamped? overdamped? critically damped?\n\nSolution to Question 1:"
  },
  {
    "objectID": "Chp2/13-Mass-Spring.html#sec-13ques2",
    "href": "Chp2/13-Mass-Spring.html#sec-13ques2",
    "title": "2.5: Mass Spring Systems",
    "section": "Question 2:",
    "text": "Question 2:\n\nUse the damped_harmonic_oscillator() function in the mass_spring module to experiment and confirm your answers in [Question 1].\n\nBe sure you have already imported damped_harmonic_oscillator() from the mass_spring module. See Importing Functions for code cells to perform this task.\nSee the Appendix for a quick set of instructions for using damped_harmonic_oscillator().\nSee Mass-Spring-Tutorial.ipynb for more detailed instructions.\n\n\nSolution to Question 2\n\n Edit and run the code cell below. \n\ndamped_harmonic_oscillator(m=??,  # mass\n                           b=??,  # friction\n                           k=??,  # stiffness\n                           A=??,  # amplitude of forcing\n                           omega=??,  # frequency coefficient\n                           x0=[??,??])  # [s0, v0], initial position and velocity"
  },
  {
    "objectID": "Chp2/13-Mass-Spring.html#sec-13quest3",
    "href": "Chp2/13-Mass-Spring.html#sec-13quest3",
    "title": "2.5: Mass Spring Systems",
    "section": "Question 3",
    "text": "Question 3\n\nSummarize the relation between damping of the mass-spring oscillator, the roots of the underlying characteristic equation, and formulas of the solutions.\n\nSolution to Question 3"
  },
  {
    "objectID": "Chp2/13-Mass-Spring.html#sec-13quest4",
    "href": "Chp2/13-Mass-Spring.html#sec-13quest4",
    "title": "2.5: Mass Spring Systems",
    "section": "Question 4",
    "text": "Question 4\n\nYou place an object whose mass \\(m\\) (in kg) is unknown on top of a spring in a vacuum (ignoring all other forces such as friction and gravity) and put the system in motion. You observed the mass bounce up and down. Let \\(y\\) denote the vertical distance of the mass from its equilibrium position, with \\(y&gt;0\\) when the mass is stretched above the equilibrium.\nIf external forces such as friction and gravity are absent, then the location of the mass \\(y\\) follows the same model for the undamped free mass-spring system: \\[ my''+ky=0\\].\n\nQuestion 4a\n\nIf the spring constant of the spring is \\(k=4 \\mbox{ N/m}\\), then give a solution to the initial value problem. Note your answer will depend on the mass \\(m\\).\n\nSolution to Question 4a\n\n\n\n\n\n\n\nQuestion 4b\n\nIf the mass bounces with a frequency of \\(0.8\\) cycles per second, then give the value of the mass \\(m\\). Note that one cycle means the mass goes from equilibrium, down, then back up, and returns to equilibrium.\n\nSolution to Question 4b"
  },
  {
    "objectID": "Chp2/13-Mass-Spring.html#sec-13quest5",
    "href": "Chp2/13-Mass-Spring.html#sec-13quest5",
    "title": "2.5: Mass Spring Systems",
    "section": "Question 5",
    "text": "Question 5\n\nA \\(5000\\) kg railcar hits a spring bumper at a speed of \\(1\\) meter per second, and the spring compresses by \\(0.1\\) m. Assume no damping.\n\nQuestion 5a\n\nFind the value of the spring constant \\(k\\).\n\nSolution to Question 5a\n\n\n\n\n\n\n\nQuestion 5b\n\nHow far does the spring compress when a \\(10,\\!000\\) kg railcar hits the spring at the same speed?\n\nSolution to Question 5b\n\n\n\n\n\n\n\nQuestion 5c\n\nIf the spring would break if it compresses more than \\(0.3\\) m, what is the maximum mass of a railcar that can hit at 1 m/s?\n\nSolution to Question 5c\n\n\n\n\n\n\n\nQuestion 5d\n\nWhat is the maximum mass of a railcar that can hit the spring without breaking it at a speed of 2 m/s.\n\nSolution to Question 5d"
  },
  {
    "objectID": "Chp2/13-Mass-Spring.html#sec-13quest6",
    "href": "Chp2/13-Mass-Spring.html#sec-13quest6",
    "title": "2.5: Mass Spring Systems",
    "section": "Question 6",
    "text": "Question 6\n\nFind an external forcing function of the form \\(F(t) = A\\cos{(\\omega t)}\\) that will have resonance with the undamped (\\(b=0\\)) mass-spring system with \\(m=2\\) kg and spring coefficient \\(k=3\\) N/m. Then test your answer using the damped_harmonic_oscillator function provided in the code cell below.\n\nSolution to Question 6\n\n\n\n\n\ndamped_harmonic_oscillator(m=??,  # mass\n                           b=??,  # friction\n                           k=??,  # stiffness\n                           A=??,  # amplitude of forcing\n                           omega=??,  # frequency coefficient\n                           x0=[??,??])  # [s0, v0], initial position and velocity"
  },
  {
    "objectID": "Chp2/13-Mass-Spring.html#sec-13quest7",
    "href": "Chp2/13-Mass-Spring.html#sec-13quest7",
    "title": "2.5: Mass Spring Systems",
    "section": "Question 7",
    "text": "Question 7\n\nA water tower in an earthquake acts as a mass-spring system. Assume the the container on top is full and the water does not move around. The container is the mass, and the support is the spring. The container with the water has a mass of \\(10,\\!000\\) kg. It takes a force of 1000 newtons to displace the container 1 meter. For simplicity, we assume no friction. The earthquake induces an external force given by \\(F(t)=m\\omega^2\\cos{(\\omega t)}\\) where \\(\\omega\\) denotes the frequency (number of cycles per second). When the earthquake hits, the water tower is at rest.\n\nQuestion 7a\n\nWhat is the natural frequency of the water tower? This means, if there is no external force (homogeneous), what is the frequency of the homogeneous solution?\n\nSolution to Question 7a\n\n\n\n\n\n\n\nQuestion 7b\n\nIf the water tower moves more than \\(1.5\\) meters from its equilibrium resting position, the tower will collapse. Suppose an earthquake with a frequency of \\(0.5\\) cycles per second hits, will the water tower collapse or remain standing? Provide supporting work, graphs, and/or explanations to support your answer.\n\nSolution to Question 7b"
  },
  {
    "objectID": "Chp2/13-Mass-Spring.html#sec-13append-one",
    "href": "Chp2/13-Mass-Spring.html#sec-13append-one",
    "title": "2.5: Mass Spring Systems",
    "section": "Testing One System with damped_harmonic_oscillator",
    "text": "Testing One System with damped_harmonic_oscillator\n\nRecall the damped harmonic oscillator has the following model\n\\[my''+by'+ky=f(t); \\ \\ y(0)=s_0 \\ \\ y'(0)=v_0.\\]\nThe forcing function has a fixed period and amplitude, for example \\(f(t) = A \\sin{(\\omega t)}\\).\n\nNote the animation may take several seconds to complete running.\nSet A=0 for an unforced system.\n\n\ndamped_harmonic_oscillator(m=2,  # mass\n                           b=0,  # friction\n                           k=3,  # stiffness\n                           A=0,  # amplitude of forcing\n                           omega=1,  # frequency coefficient\n                           x0=[1,0])  # [s0, v0], initial position and velocity"
  },
  {
    "objectID": "Chp2/13-Mass-Spring.html#sec-13append-comp",
    "href": "Chp2/13-Mass-Spring.html#sec-13append-comp",
    "title": "2.5: Mass Spring Systems",
    "section": "Side-by-Side Comparison with damped_harmonic_comp",
    "text": "Side-by-Side Comparison with damped_harmonic_comp\n\nThe function damped_harmonic_comp() will simultaneously run to animations for two different mass-spring systems. The function works similar to works similarly to damped_harmonic(). For each coefficient, enter an array of two values, one for each of the two systems.\n\ndamped_harmonic_oscillator_comp(m=[0.2, 0.3],  # masses\n                                b=[0.5, 0.1],  # frictions\n                                k=[1, 2],  # stiffnesses  \n                                A=[0, 0],  # amplitudes of forcing\n                                omega=[1, 1],  # frequency coefficients\n                                x0=[[0.5, 1], [-0.5, -1]],  # [ [initial cond 1], [initial cond 2] ]\n                                fps=4,  # frames per second, to speed up or slow down\n                                tf=40)  # total time, to extend or shorten clip"
  },
  {
    "objectID": "Chp2/Mass-Spring-Tutorial.html",
    "href": "Chp2/Mass-Spring-Tutorial.html",
    "title": "Python Tutorial for Mass-Spring Systems",
    "section": "",
    "text": "Section 1: Required Install for Interactive Plots\nEach time you want to run one of the mass-spring system animations, you will need to install a newer version of matplotlib. Each time you open/create a new Jupyter notebook where you want to run these animations you will need to:\n# If not already installed, then will install and ask to restart runtime\n!pip install matplotlib==3.5.2\n!pip install git+https://github.com/CU-Denver-MathStats-OER/ODEs\nfrom IPython.display import clear_output\nclear_output()\nA function named damped_harmonic_oscillator() runs an animation of a damped, driven harmonic oscillator:\nIf we want to compare two mass-spring systems running under different conditions, we can use teh damped harmonic oscillator comparison funciton which is named damped_harmonic_oscillator_comp().\nExploring Differential Equations by Adam Spiegler is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. Python scripts created by Jonathon Hirschi, Troy Butler, and Adam Spiegler."
  },
  {
    "objectID": "Chp2/Mass-Spring-Tutorial.html#sec-MassDefault",
    "href": "Chp2/Mass-Spring-Tutorial.html#sec-MassDefault",
    "title": "Python Tutorial for Mass-Spring Systems",
    "section": "Running the Animation with Default Settings",
    "text": "Running the Animation with Default Settings\n\nWe can run a mass-spring animation with the default settings as follows:\n\nImport the damped_harmonic_oscillator() function from the mass_spring module.\n\nYou will need run import the function only one time in each active session. \n\nRun the default animation with damped_harmonic_oscillator().\nWait a few seconds for the animation to load.\nPress the play button to play the animation.\n\n\n# Step 1 - Only need to do this once per active session\nfrom utils.mass_spring import damped_harmonic_oscillator\n\n\ndamped_harmonic_oscillator()"
  },
  {
    "objectID": "Chp2/Mass-Spring-Tutorial.html#sec-MassChangeDefault",
    "href": "Chp2/Mass-Spring-Tutorial.html#sec-MassChangeDefault",
    "title": "Python Tutorial for Mass-Spring Systems",
    "section": "Customizing the Default Settings",
    "text": "Customizing the Default Settings\n\n\nCustomizing Mass-Spring Parameters\n\nThe variables in damped_harmonic_oscillator() that determine the mass-spring set up are:\n\nThe mass coefficient is m. The default value is m=0.2.\nThe friction coefficient is b. The default value is b=0.1.\nThe stiffness coefficient is k. The default value is k=1.\nThe initial position and velocity of the mass is a vector x0. The default value is x0=[-2, 0].\n\nThe mass is initially displaced two units the the left of equilibrium.\nThe mass is let go with no initial velocity.\n\n\n\n\nCustomizing the Driving Function\n\nThe variables in damped_harmonic_oscillator() that determine the driving (or forcing) function are:\n\nThe amplitude is A. The default value is A=0 which means no forcing.\nThe frequency is omega. The default value is omega=1.\n\nSince the default setting is A=0, the default animation is undriven by default, meaning there is no external forcing function acting on the system.\n\n\nCustomizing the Animation Settings\n\nThe variables in damped_harmonic_oscillator() that determine animation length and speed:\n\nThe option fps is how many frames are played per second.\n\nThe bigger the value, the faster the animation will go.\nThe default is fps=3.\n\nThe option tf gives the final time when the animation stops. The default is tf=30."
  },
  {
    "objectID": "Chp2/Mass-Spring-Tutorial.html#each-time-you-want-to-run-a-new-animation",
    "href": "Chp2/Mass-Spring-Tutorial.html#each-time-you-want-to-run-a-new-animation",
    "title": "Python Tutorial for Mass-Spring Systems",
    "section": "Each time you want to run a new animation",
    "text": "Each time you want to run a new animation\n\nRun the command:\ndamped_harmonic_oscillator(m=new.m, b=new.b, k=new.k, A=new.A, omega=new.w, x0=[new.s0, new.v0], fps=new.fps, tf=new.tf)\nBelow we run a customized mass-spring system.\n\ndamped_harmonic_oscillator(m=0.1,  # mass\n                           b=1,  # friction\n                           k=1,  # stiffness\n                           A=2,  # amplitude of forcing\n                           omega=2,  # frequency of forcing\n                           x0=[0.5, -1],  # initial pos, initial velocity\n                           fps=5,  # frames played per second\n                           tf=40)  # total time length"
  },
  {
    "objectID": "Chp2/Mass-Spring-Tutorial.html#sec-MassCompDefault",
    "href": "Chp2/Mass-Spring-Tutorial.html#sec-MassCompDefault",
    "title": "Python Tutorial for Mass-Spring Systems",
    "section": "Running the Comparison Animation with Default Settings",
    "text": "Running the Comparison Animation with Default Settings\n\nWe can run a simultaneous comparison of two mass-spring animations with the default settings as follows:\n\nImport the damped_harmonic_oscillator_comp() function from the mass_spring module.\n\nYou will need run import the function only one time in each active session. \n\nRun the default animation with damped_harmonic_oscillator_comp().\nWait a few seconds for the animation to load.\nPress the play button to play the animation.\n\n\n# Step 1 - Only need to do this once per active session\nfrom utils.mass_spring import damped_harmonic_oscillator_comp\n\n\ndamped_harmonic_oscillator_comp()"
  },
  {
    "objectID": "Chp2/Mass-Spring-Tutorial.html#sec-MassCompChangeDefault",
    "href": "Chp2/Mass-Spring-Tutorial.html#sec-MassCompChangeDefault",
    "title": "Python Tutorial for Mass-Spring Systems",
    "section": "Customizing the Default Settings",
    "text": "Customizing the Default Settings\n\n\nCustomizing Mass-Spring Parameters\n\nThe variables in damped_harmonic_oscillator() that determine the mass-spring set up are:\n\nThe mass coefficients are entered in vector m=[m1, m2]. The default value is m=[0.2, 0.4].\nThe friction coefficients are entered in vector m=[m1, m2]. The default value is m=[0.2, 0.4].\nThe stiffness coefficient are entered in vector m=[m1, m2]. The default value is m=[0.2, 0.4].\nThe initial positions and velocities of both masses are entered in matrix x0=[[pos.1, vel.1], [pos.2, vel.2]].\n\nThe first row of the matrix gives the initial position and velocity of the first mass-spring system.\nThe second row of the matrix gives the initial position and velocity of the second mass-spring system.\nThe default values are x0=[[-2, 0],[-2,0]].\n\n\n\n\nCustomizing the Driving Functions\n\nThe variables in damped_harmonic_oscillator_comp() that determine the driving (or forcing) functions for each system are:\n\nThe amplitude is a vector A=[amp1, amp2]. The default value is A=[0, 0] which means no forcing in either system.\nThe frequency is a vector omega=[omega1, omega2]. The default value is omega=[1,1].\n\nSince the default setting is A=[0,0], the default animations are undriven by default, meaning there is no external forcing function acting on either system.\n\n\nCustomizing the Animation Settings\n\nThe variables in damped_harmonic_oscillator() that determine animation length and speed:\n\nThe option fps is how many frames are played per second.\n\nThe bigger the value, the faster the animation will go.\nThe default is fps=3.\n\nThe option tf gives the final time when the animation stops. The default is tf=30."
  },
  {
    "objectID": "Chp2/Mass-Spring-Tutorial.html#each-time-you-want-to-run-a-new-animation-1",
    "href": "Chp2/Mass-Spring-Tutorial.html#each-time-you-want-to-run-a-new-animation-1",
    "title": "Python Tutorial for Mass-Spring Systems",
    "section": "Each time you want to run a new animation",
    "text": "Each time you want to run a new animation\n\nRun the command:\ndamped_harmonic_oscillator_comp(m=[m1, m2], b=[b1, b2], k=[k1, k2], A=[A1, A2], omega=[w1, w2], x0=[[pos1, vel1], [pos2, vel2]], fps=new.fps, tf=new.tf)\nBelow we run a customized mass-spring system.\n\ndamped_harmonic_oscillator_comp(m=[0.2, 0.3],  # masses\n                                b=[0.5, 0.1],  # frictions\n                                k=[1, 2],  # stiffnesses  \n                                A=[0, 0],  # Amplitudes of forcing\n                                omega=[1, 1],  # Frequencies of forcing\n                                x0=[[0.5, 1], [-0.5, -1]],  # initial conditions\n                                fps=4,  # frames per second\n                                tf=40)  # total time"
  },
  {
    "objectID": "Chp3/14-Introduction-to-Systems.html",
    "href": "Chp3/14-Introduction-to-Systems.html",
    "title": "3.1: Introduction to Systems of ODEs",
    "section": "",
    "text": "Interacting Populations\nMost species live in interaction with other species. For example, perhaps one species preys on another species, like foxes and rabbits. Below is a system of differential equations intended to predict future populations of rabbits and foxes over time, where \\(R\\) is the population (in hundreds) of rabbits at any time \\(t\\) and \\(F\\) is the population of foxes (in tens) at any time \\(t\\) (in years).\n\\[\\begin{align}\n\\frac{dR}{dt} &= 3R-1.4RF\\\\\n\\frac{dF}{dt} &= -F+0.8RF\n\\end{align}\\]\nWe will continue working with the rabbit and fox population model below:\n\\[\\begin{align}\n\\frac{dR}{dt} &= 3R-1.4RF\\\\\n\\frac{dF}{dt} &= -F+0.8RF\n\\end{align}.\\]\nIf initially there are \\(R=3\\) (300 rabbits) and \\(F=2\\) (20 foxes), then the solution can be plotted in 3-dimensions as shown below.\nimport numpy as np\nfrom scipy.integrate import odeint\n\n# Definition of parameters\na = 3.  # rabbit growth/decay rate\nb = -1.4  # rabbit interaction term with fox\nc = -1.  # fox growth/decay rate\nd = 0.8  # fox interaction term with rabbit\n\nX0 = np.array([3, 2])  # initials conditions: 3 rabbits and 2 foxes\n\ntspan = np.linspace(0, 15,  1000)  # time to evaluate solution\n\n# Define differential equation\ndef dxdt(X, t, a,b,c,d):\n    \n    return np.array([\n        a*X[0] + b*X[0]*X[1],\n        c*X[1] + d*X[0]*X[1]\n    ])\n\n# Find solution\nX = odeint(dxdt, X0, t=tspan, args = (a,b,c,d)) # solve system\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(8, 8))\nax = plt.axes(projection='3d')\n\nax.plot3D(tspan, X[:,0], X[:,1])\nax.set_xlabel('Time')\nax.set_ylabel('Rabbits')\nax.set_zlabel('Foxes')\n\nplt.tight_layout()\nOne view of solutions for studying solutions to systems of autonomous (independent of \\(t\\)) differential equations of the form\n\\[\\begin{aligned}\n\\frac{dx}{dt} &= f(x,y)\\\\\n\\frac{dy}{dt} &= g(x,y)\n\\end{aligned}\\]\nis in the \\(xy\\)-plane, called the phase plane.\nExploring Differential Equations by Adam Spiegler is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Based on a work at https://github.com/CU-Denver-MathStats-OER/ODEs and original content created by Rasmussen, C., Keene, K. A., Dunmyre, J., & Fortune, N. (2018). Inquiry oriented differential equations: Course materials. Available at https://iode.sdsu.edu."
  },
  {
    "objectID": "Chp3/14-Introduction-to-Systems.html#sec-14quest1",
    "href": "Chp3/14-Introduction-to-Systems.html#sec-14quest1",
    "title": "3.1: Introduction to Systems of ODEs",
    "section": "Question 1:",
    "text": "Question 1:\n\nIn earlier work with the rate of change equation \\(\\dfrac{dP}{dt}=kP\\) we assumed that there was only one species, that the resources were unlimited, and that the species reproduced continuously. Which, if any, of these assumptions is modified and how is this modification reflected in the above system of differential equations?\n\nSolution to Question 1:"
  },
  {
    "objectID": "Chp3/14-Introduction-to-Systems.html#sec-14quest2",
    "href": "Chp3/14-Introduction-to-Systems.html#sec-14quest2",
    "title": "3.1: Introduction to Systems of ODEs",
    "section": "Question 2:",
    "text": "Question 2:\n\nInterpret the meaning of each term in the rate of change equations (e.g., how do you interpret or make sense of the \\(-1.4RF\\) term) and what are the implications of this term on the future predicted populations? Similarly for \\(3R\\), \\(-F\\), and \\(0.8RF\\).\n\nSolution to Question 2:"
  },
  {
    "objectID": "Chp3/14-Introduction-to-Systems.html#sec-14quest3",
    "href": "Chp3/14-Introduction-to-Systems.html#sec-14quest3",
    "title": "3.1: Introduction to Systems of ODEs",
    "section": "Question 3:",
    "text": "Question 3:\n\nScientists studying a rabbit-fox population estimate that the current number of rabbits is 100 (\\(R=1\\)) and that the number of foxes is 10 (\\(F=1\\)). Use two steps of Euler’s method with step size of \\(\\Delta t =0.5\\) to get numerical estimates for the future number of rabbits and foxes as predicted by the differential equations. Enter your answers in the table below.\n\nSolution to Question 3:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\(t\\) (in years)\n\\(R\\) (in hundreds)\n\\(F\\) (in tens)\n\\(\\dfrac{dR}{dt}\\)\n\\(\\Delta R\\)\n\\(\\dfrac{dF}{dt}\\)\n\\(\\Delta F\\)\n\n\n\n\n0\n1\n1\n??\n??\n??\n??\n\n\n0.5\n??\n??\n??\n??\n??\n??\n\n\n1\n??\n??\n??\n??\n??\n??"
  },
  {
    "objectID": "Chp3/14-Introduction-to-Systems.html#dimensional-projections",
    "href": "Chp3/14-Introduction-to-Systems.html#dimensional-projections",
    "title": "3.1: Introduction to Systems of ODEs",
    "section": "2-Dimensional Projections",
    "text": "2-Dimensional Projections\n\nIn our interacting rabbit and fox model, we have three variables \\(R\\), \\(F\\), and \\(t\\). From the solution in the \\(3\\)-dimensional plot above, we can better understand the dynamics of these two interacting species.\n\nHow does the rabbit population change with time?\nHow does the fox population change with time?\nHow do the rabbit and fox populations interact with each over time?\n\nA useful tool in mathematics for interpreting the relation between three variables is to consider pairwise relations. Graphically, this is equivalent to projecting the curve in 3 dimensional space above onto different 2 dimensional planes."
  },
  {
    "objectID": "Chp3/14-Introduction-to-Systems.html#sec-14quest4",
    "href": "Chp3/14-Introduction-to-Systems.html#sec-14quest4",
    "title": "3.1: Introduction to Systems of ODEs",
    "section": "Question 4:",
    "text": "Question 4:\n\nWe would like to make future predictions for our rabbit-fox system\n\\[\\begin{align}\n\\frac{dR}{dt} &= 3R-1.4RF \\\\\n\\frac{dF}{dt} &= -F+0.8RF\n\\end{align}\\]\nif at time \\(t=0\\) we initially have 300 rabbits (\\(R=3\\)) and 20 foxes (\\(F=2\\)).\n\nQuestion 4a: Rabbits and Time\n\nRun the code cell below to plot the graph of \\(R\\) vs \\(t\\).\n\nUse the graph to describe how the rabbit population will change as time goes on.\nBased on the graph, what type of function(s) would you use to model the solution \\(R=f(t)\\)? Explain how you determined your answer.\n\n\nSolution to Question 4a:\n\nWrite your interpretation in the space below.\n\n\n\n\nfig = plt.figure(figsize=(12,6))\n\nax1 = fig.add_subplot(1, 2, 1, projection='3d') \nax1.plot(tspan, X[:,0], 'r:', zdir='z', zs=0, alpha=.8)\nax1.plot3D(tspan, X[:,0], X[:,1])\nax1.set_xlabel('Time')\n\nax2 = fig.add_subplot(1, 2, 2)\nax2.plot(tspan, X[:,0], 'r-', alpha=.5)\nax2.grid()\nax2.set_xlabel('Time')\nax2.set_ylabel('Rabbits')\nplt.tight_layout()\n\n\n\n\nQuestion 4b: Foxes and Time\n\nRun the code cell below to plot the graph of \\(F\\) vs \\(t\\).\n\nUse the graph to describe how the fox population will change as time goes on.\nBased on the graph, what type of function(s) would you use to model the solution \\(F=g(t)\\)? Explain how you determined your answer.\n\n\nSolution to Question 4b:\n\nWrite your interpretation in the space below.\n\n\n\n\nfig = plt.figure(figsize=(12,6))\nax1 = fig.add_subplot(1, 2, 1, projection='3d') \nax1.plot(tspan, X[:,1], 'g:', zdir='y', zs=40, alpha=.8)\nax1.plot3D(tspan, X[:,0], X[:,1])\nax1.set_xlabel('Time')\n\nax2 = fig.add_subplot(1, 2, 2)\n\nax2.plot(tspan, X[:,1], 'g-')\nax2.grid()\nax2.set_xlabel('Time')\nax2.set_ylabel('Foxes')\nplt.tight_layout()\n\n\n\n\nQuestion 4c: Rabbits and Foxes\n\nRun the code cell below to plot the graph of \\(R\\) vs \\(F\\). Then use the graph to describe how the rabbit and fox populations interact with each other over time.\n\nSolution to Question 4c:\n\nWrite your interpretation in the space below.\n\n\n\n\nfig = plt.figure(figsize=(12,6))\nax1 = fig.add_subplot(1, 2, 1, projection='3d') \n\nax1.plot(X[:,0], X[:,1], 'k:', zdir='x', zs=0, alpha=.5)\nax1.plot3D(tspan, X[:,0], X[:,1])\nax1.set_xlabel('Time')\n\nax2 = fig.add_subplot(1, 2, 2)\n\nax2.plot(X[:,0], X[:,1], 'k-', alpha=.5)\nax2.grid()\nax2.set_xlabel('Rabbits')\nax2.set_ylabel('Foxes')\nplt.tight_layout()"
  },
  {
    "objectID": "Chp3/14-Introduction-to-Systems.html#sec-14quest5",
    "href": "Chp3/14-Introduction-to-Systems.html#sec-14quest5",
    "title": "3.1: Introduction to Systems of ODEs",
    "section": "Question 5:",
    "text": "Question 5:\n\nSuppose the current number of rabbits is \\(R=3\\) (300 rabbits) and the number of foxes is \\(F=0\\). Without using any technology and without making any calculations, what does the system of rate of change equations (same one as Question 4) predict for the future number of rabbits and foxes? Explain your reasoning.\n\nSolution to Question 5:"
  },
  {
    "objectID": "Chp3/14-Introduction-to-Systems.html#sec-14quest6",
    "href": "Chp3/14-Introduction-to-Systems.html#sec-14quest6",
    "title": "3.1: Introduction to Systems of ODEs",
    "section": "Question 6:",
    "text": "Question 6:\n\nNow use the code cells in parts (a)-(c) below to check your answer in Question 5 (with initial population \\(R=3\\) and \\(F=0\\)).\n\nQuestion 6a: Plotting Rabbits vs Time\n\nRun the code cell below to check your answer.\n\n#import numpy as np\n#from scipy.integrate import odeint\n\n# Definition of parameters\n#a = 3.  # rabbit growth/decay rate\n#b = -1.4  # rabbit interaction term with fox\n#c = -1.  # fox growth/decay rate\n#d = 0.8  # fox interaction term with rabbit\n\nX0 = np.array([3, 0])  # initials conditions: 3 rabbits and 0 foxes\n\ntspan = np.linspace(0, 15,  1000)  # time to evaluate solution\n\n# Define differential equation\ndef dxdt(X, t, a,b,c,d):\n    \n    return np.array([\n        a*X[0] + b*X[0]*X[1],\n        c*X[1] + d*X[0]*X[1]\n    ])\n\n# Find solution\nX = odeint(dxdt, X0, t=tspan, args = (a,b,c,d)) # solve system\n\n# Plot solution\nfig = plt.figure(figsize=(12,6))\n\nax1 = fig.add_subplot(1, 2, 1, projection='3d') \nax1.plot(tspan, X[:,0], 'r:', zdir='z', zs=0, alpha=.8)\nax1.plot3D(tspan, X[:,0], X[:,1])\nax1.set_xlabel('Time')\n\nax2 = fig.add_subplot(1, 2, 2)\nax2.plot(tspan, X[:,0], 'r-', alpha=.5)\nax2.grid()\nax2.set_xlabel('Time')\nax2.set_ylabel('Rabbits')\nplt.tight_layout()\n\n\n\nQuestion 6b: Plotting Foxes vs Time\n\nRun the code cell below to check your answer.\n\nfig = plt.figure(figsize=(12,6))\nax1 = fig.add_subplot(1, 2, 1, projection='3d') \nax1.plot(tspan, X[:,1], 'g:', zdir='y', zs=40, alpha=.8)\nax1.plot3D(tspan, X[:,0], X[:,1])\nax1.set_xlabel('Time')\n\nax2 = fig.add_subplot(1, 2, 2)\n\nax2.plot(tspan, X[:,1], 'g-')\nax2.grid()\nax2.set_xlabel('Time')\nax2.set_ylabel('Foxes')\nplt.tight_layout()\n\n\n\nQuestion 6c: Plotting Rabbits vs Foxes\n\nRun the code cell below to check your answer.\n\nfig = plt.figure(figsize=(12,6))\nax1 = fig.add_subplot(1, 2, 1, projection='3d') \n\nax1.plot(X[:,0], X[:,1], 'm:', zdir='x', zs=0, alpha=.5)\nax1.plot3D(tspan, X[:,0], X[:,1])\nax1.set_xlabel('Time')\n\nax2 = fig.add_subplot(1, 2, 2)\n\nax2.plot(X[:,0], X[:,1], 'm-', alpha=.5)\nax2.grid()\nax2.set_xlabel('Rabbits')\nax2.set_ylabel('Foxes')\nplt.tight_layout()"
  },
  {
    "objectID": "Chp3/14-Introduction-to-Systems.html#sec-14quest7",
    "href": "Chp3/14-Introduction-to-Systems.html#sec-14quest7",
    "title": "3.1: Introduction to Systems of ODEs",
    "section": "Question 7:",
    "text": "Question 7:\n\nUsing initial condition \\(R = 3\\) (300 rabbits) and \\(F = 0\\) (no foxes), tell the story (in words) of what happens to the rabbit and fox population as time continues.\n\nSolution to Question 7:"
  },
  {
    "objectID": "Chp3/14-Introduction-to-Systems.html#sec-14quest8",
    "href": "Chp3/14-Introduction-to-Systems.html#sec-14quest8",
    "title": "3.1: Introduction to Systems of ODEs",
    "section": "Question 8:",
    "text": "Question 8:\n\nWhat would it mean for the rabbit-fox system to be in equilibrium? Are there any equilibrium solutions to this system of rate of change equations? If so, determine all equilibrium solutions and generate the 3D and other views for each equilibrium solution.\n\nSolution to Question 8:"
  },
  {
    "objectID": "Chp3/14-Introduction-to-Systems.html#sec-14quest9",
    "href": "Chp3/14-Introduction-to-Systems.html#sec-14quest9",
    "title": "3.1: Introduction to Systems of ODEs",
    "section": "Question 9:",
    "text": "Question 9:\n\nFor single differential equations, we classified equilibrium solutions as stable (attractors), unstable repellers, or semi-stable (nodes). For each of the equilibrium solutions in the previous question, create your own terms to classify the equilibrium solutions in and briefly explain your reasons behind your choice of terms.\n\nSolution to Question 9:"
  },
  {
    "objectID": "Chp3/14-Introduction-to-Systems.html#sec-14quest10",
    "href": "Chp3/14-Introduction-to-Systems.html#sec-14quest10",
    "title": "3.1: Introduction to Systems of ODEs",
    "section": "Question 10:",
    "text": "Question 10:\n\nConsider the rabbit-fox system of differential equations\n\\[\\begin{align}\n\\frac{dR}{dt} &= 3R-1.4RF \\\\\n\\frac{dF}{dt} &= -F+0.8RF\n\\end{align}\\]\nand the graph of the solution with initial condition \\((2,3)\\), as viewed in the phase plane (that is, the \\(RF\\)-plane). The two points in the table below are on the same solution curve. Recall that the solutions we’ve seen in the past are closed curves, but the solution could be moving clockwise or counterclockwise. Fill in the following table and decide which way the solution is moving, and explain your reasoning.\n\nSolution to Question 10:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\(t\\) (in years)\n\\(R\\) (in hundreds)\n\\(F\\) (in tens)\n\\(\\dfrac{dR}{dt}\\)\n\\(\\dfrac{dF}{dt}\\)\n\\(\\dfrac{dF}{dR}\\)\n\n\n\n\n\\(0\\)\n\\(2\\)\n\\(3\\)\nFill in your answer here\nFill in your answer here\nFill in your answer here\n\n\n\\(2.07\\)\n\\(0.756\\)\n\\(1.431\\)\nFill in your answer here\nFill in your answer here\nFill in your answer here\n\n\n\n\n\n\nComment on which direction (clockwise or counterclockwise) the solution rotates around the curve."
  },
  {
    "objectID": "Chp3/14-Introduction-to-Systems.html#sec-14quest11",
    "href": "Chp3/14-Introduction-to-Systems.html#sec-14quest11",
    "title": "3.1: Introduction to Systems of ODEs",
    "section": "Question 11:",
    "text": "Question 11:\n\nConsider plotting additional vectors in phase plane from Question 10 for the system\n\\[\\begin{align}\n\\frac{dR}{dt} &= 3R-1.4RF \\\\\n\\frac{dF}{dt} &= -F+0.8RF\n\\end{align}\\]\nat the points \\((R,F)\\) in the table below. Fill in the blanks below and comment on whether you notice anything interesting about these vectors.\n\n\n\n\n\n\n\n\n\n\n\\(R\\)\n\\(F\\)\n\\(\\dfrac{dR}{dt}\\)\n\\(\\dfrac{dF}{dt}\\)\n\\(\\dfrac{dF}{dR}\\)\n\n\n\n\n\\(1.25\\)\n\\(0\\)\n??\n??\n??\n\n\n\\(1.25\\)\n\\(1\\)\n??\n??\n??\n\n\n\\(1.25\\)\n\\(2\\)\n??\n??\n??\n\n\n\\(1.25\\)\n\\(3\\)\n??\n??\n??\n\n\n\n\nSolution to Question 11:\n\n\nReplace each ?? with an appropriate value. Then comment on anything interesting you observe."
  },
  {
    "objectID": "Chp3/15-Phase-Plane-Portrait.html",
    "href": "Chp3/15-Phase-Plane-Portrait.html",
    "title": "3.2: Phase Plane Portraits",
    "section": "",
    "text": "Plotting Phase Plane Portraits with phase_portrait\nAs with slope fields, we typically rely on technology to plot phase plane portraits. The ode_tools module (same file as earlier) includes a function called phase_portrait that will be a nice tool for visualizing solutions to autonomous systems of differential equations.\nLet’s add a plot of the solution with initial condition \\((R,F)=(2,3)\\) to the phase plane portrait above.\n##############################################\n# You can skip if commands already run above\n##############################################\nimport numpy as np\n\n# Set viewing window\nx = np.linspace(0.0, 5.0, 20)  # values for horizontal axis of phase plane\ny = np.linspace(0.0, 5.0, 20)  # values for vertical axis of phase plane\n\n# Define the system of differential equations\ndef f(Y, t):\n    x, y = Y\n    return [3*x - 1.4*x*y,  # enter formula for diff eq for x\n            -y + 0.8*x*y]  # enter formula for diff eq for y\nTechnology is a very useful tool for plotting and visualizing the dynamics of a system of differential equations. However, we need to determine what is a reasonable viewing window, and that depends on what features we want to investigate.\nIt can be helpful to uncover some important properties of phase portraits by studying properties of the underlying differential equations. In this process, we may identify regions in the phase plane where we want zoom in. For the rest of this lab, we do some analysis of the system of differential equations to uncover interesting properties that we can highlight in the phase plane portrait.\nYou may have noticed in Question 1 that along \\(x = 0\\) all the vectors have the same slope. Similarly for vectors along the \\(y = x\\).\nExploring Differential Equations by Adam Spiegler is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Based on a work at https://github.com/CU-Denver-MathStats-OER/ODEs and original content created by Rasmussen, C., Keene, K. A., Dunmyre, J., & Fortune, N. (2018). Inquiry oriented differential equations: Course materials. Available at https://iode.sdsu.edu."
  },
  {
    "objectID": "Chp3/15-Phase-Plane-Portrait.html#sec-LoadModule",
    "href": "Chp3/15-Phase-Plane-Portrait.html#sec-LoadModule",
    "title": "3.2: Phase Plane Portraits",
    "section": "Loading ode_tools from GitHub",
    "text": "Loading ode_tools from GitHub\n\n\nRun the code cell below to load the most up to date modules stored in GitHub.\nYou will only need to run this code cell one time during an active session.\n\n\n!pip install git+https://github.com/CU-Denver-MathStats-OER/ODEs\nfrom IPython.display import clear_output\nclear_output()"
  },
  {
    "objectID": "Chp3/15-Phase-Plane-Portrait.html#importing-the-phase_portrait-plotting-function",
    "href": "Chp3/15-Phase-Plane-Portrait.html#importing-the-phase_portrait-plotting-function",
    "title": "3.2: Phase Plane Portraits",
    "section": "Importing the phase_portrait Plotting Function",
    "text": "Importing the phase_portrait Plotting Function\n\nAfter you followed the instructions above and set your file path, you are now ready to import the phase_portrait function from the ode_tools module.\n\nfrom utils.ode_tools import phase_portrait  # Only need to import one time."
  },
  {
    "objectID": "Chp3/15-Phase-Plane-Portrait.html#defining-the-system-of-differential-equations",
    "href": "Chp3/15-Phase-Plane-Portrait.html#defining-the-system-of-differential-equations",
    "title": "3.2: Phase Plane Portraits",
    "section": "Defining the System of Differential Equations",
    "text": "Defining the System of Differential Equations\n\nRecall the rabbit and fox population model from 14-Introduction-to-Systems.\n\\[\\begin{align}\n\\frac{dR}{dt} &= 3R-1.4RF\\\\\n\\frac{dF}{dt} &= -F+0.8RF\n\\end{align}\\]\nIn the code cell below, we choose a window of \\(0 \\leq R, F \\leq 5\\) and enter the system of differential equations.\n\nimport numpy as np\n\n# Set viewing window\nx = np.linspace(0.0, 5.0, 20)  # values for horizontal axis of phase plane\ny = np.linspace(0.0, 5.0, 20)  # values for vertical axis of phase plane\n\n# Define the system of differential equations\ndef f(Y, t):\n    x, y = Y\n    return [3*x - 1.4*x*y,  # enter formula for diff eq for x\n            -y + 0.8*x*y]  # enter formula for diff eq for y"
  },
  {
    "objectID": "Chp3/15-Phase-Plane-Portrait.html#plotting-with-phase_portrait",
    "href": "Chp3/15-Phase-Plane-Portrait.html#plotting-with-phase_portrait",
    "title": "3.2: Phase Plane Portraits",
    "section": "Plotting with phase_portrait",
    "text": "Plotting with phase_portrait\n\n\n# Plots a phase portrait\n\nphase_portrait(x, y, f)"
  },
  {
    "objectID": "Chp3/15-Phase-Plane-Portrait.html#defining-the-initial-conditions",
    "href": "Chp3/15-Phase-Plane-Portrait.html#defining-the-initial-conditions",
    "title": "3.2: Phase Plane Portraits",
    "section": "Defining the Initial Conditions",
    "text": "Defining the Initial Conditions\n\nWe define new variables as follows:\n\nWe use tspan for the range of time to visualize the solution.\nWe use x0 for the initial value of the first dependent variable \\(x\\).\nWe use y0 for the initial value of the first dependent variable \\(y\\).\n\n\n# Enter range of time\ntspan = np.linspace(0, 50, 200) # range of time to visualize solution\n\n# Enter initial values\nx0 = 2  # initial value of x\ny0 = 3  # initial value of y"
  },
  {
    "objectID": "Chp3/15-Phase-Plane-Portrait.html#import-plot_phase_sol-and-create-plot",
    "href": "Chp3/15-Phase-Plane-Portrait.html#import-plot_phase_sol-and-create-plot",
    "title": "3.2: Phase Plane Portraits",
    "section": "Import plot_phase_sol and Create Plot",
    "text": "Import plot_phase_sol and Create Plot\n\n\nFirst be sure you have already set the file path to the ode_tools module.\nWe have already performed this step earlier, so we do not need to do this again\n\n\nfrom utils.ode_tools import plot_phase_sol  # Only need to import one time.\n\n\n# Plots a solution in a phase plane portrait\n\nplot_phase_sol(x, y, f, tspan, x0, y0)"
  },
  {
    "objectID": "Chp3/15-Phase-Plane-Portrait.html#sec-15quest1",
    "href": "Chp3/15-Phase-Plane-Portrait.html#sec-15quest1",
    "title": "3.2: Phase Plane Portraits",
    "section": "Question 1:",
    "text": "Question 1:\n\nOn the axes below where \\(x\\) and \\(y\\) both range from -3 to 3, plot by hand a vector field for the system of differential equations \\[\\begin{aligned}\n\\frac{dx}{dt} &= y-x\\\\\n\\frac{dy}{dt} &= -y\\\\\n\\end{aligned}\\] and sketch in several solution graphs in the phase plane.\n\nSolution to Question 1:"
  },
  {
    "objectID": "Chp3/15-Phase-Plane-Portrait.html#adding-nullclines-to-a-phase-plane-portrait",
    "href": "Chp3/15-Phase-Plane-Portrait.html#adding-nullclines-to-a-phase-plane-portrait",
    "title": "3.2: Phase Plane Portraits",
    "section": "Adding Nullclines to a Phase Plane Portrait",
    "text": "Adding Nullclines to a Phase Plane Portrait\n\n\n#import numpy as np   # Only need to import one time\n\n# Viewing window is set\nx = np.linspace(-3, 3, 13)  # values for horizontal axis of phase plane\ny = np.linspace(-3, 3, 13)  # values for vertical axis of phase plane\n\n\n# Define the system of differential equations\ndef f(Y, t):\n    x, y = Y\n    return [y - x,  # enter formula for diff eq for x\n            -y]  # enter formula for diff eq for y\n\n\nimport matplotlib.pyplot as plt  # import plotting package\n#from ode_tools import phase_portrait  # Only need to import one time\n\n# Plots a phase portrait\nphase_portrait(x, y, f)\n\n# x-nullcline \nplt.plot(x, x, linewidth=2, color='r')  # red line at y=x\n\n# y-nullcline\nplt.hlines(y=0, xmin=-3, xmax=3, linewidth=2, color='b')  # blue horizontal line at y=0"
  },
  {
    "objectID": "Chp3/15-Phase-Plane-Portrait.html#sec-15quest2",
    "href": "Chp3/15-Phase-Plane-Portrait.html#sec-15quest2",
    "title": "3.2: Phase Plane Portraits",
    "section": "Question 2:",
    "text": "Question 2:\n\nOn a grid from \\(-4\\) to \\(4\\) for both axes, plot all nullclines for the rabbit-fox system. Note we now use \\(x\\) for rabbits and \\(y\\) for foxes. Then comment on how the nullclines point to the cyclic nature of the Rabbit-Fox system.\n\\[\\begin{aligned}\n\\frac{dx}{dt} &= 3x-1.4xy\\\\\n\\frac{dy}{dt} &= -y+0.8xy\n\\end{aligned}\\]\n\nSolution to Question 2:"
  },
  {
    "objectID": "Chp3/15-Phase-Plane-Portrait.html#sec-15quest3",
    "href": "Chp3/15-Phase-Plane-Portrait.html#sec-15quest3",
    "title": "3.2: Phase Plane Portraits",
    "section": "Question 3:",
    "text": "Question 3:\n\nPlot the phase plane portrait for the rabbit and fox predator prey model below. Add plots of all \\(x\\)-nullclines and \\(y\\)-nullclines to verify your sketch from Question 2.\n\\[\\begin{align}\n\\frac{dx}{dt} &= 3x-1.4xy\\\\\n\\frac{dy}{dt} &= -y+0.8xy\n\\end{align}\\]\n\nSolution to Question 3:\n\n Complete and run the code cells below to generate phase plane portrait with nullclines\n\n\n#import numpy as np   # Only need to import one time\n\n# Viewing window is set\nx = np.linspace(-1, 4, 21)  # values for horizontal axis of phase plane\ny = np.linspace(-1, 4, 21)  # values for vertical axis of phase plane\n\n\n# Define the system of differential equations\ndef f(Y, t):\n    x, y = Y\n    return [3*x - 1.4*x*y,  # enter formula for diff eq for x, rabbits\n            -y + 0.8*x*y]  # enter formula for diff eq for y, foxes\n\n\n#import matplotlib.pyplot as plt  # Only need to import one time\n#from ode_tools import phase_portrait  # Only need to import one time\n\n# Plots a phase portrait\nphase_portrait(x, y, f)\n\n\n# x-nullclines \nplt.hlines(y=??, xmin=-1, xmax=4, linewidth=2, color='r')  # horizontal line at y=??\nplt.vlines(x=??, ymin=-1, ymax=4, linewidth=2, color='r')  # vertical line at x=??\n\n# y-nullclines\nplt.hlines(y=??, xmin=-1, xmax=4, linewidth=2, color='b')  # horizontal line at y=??\nplt.vlines(x=??, ymin=-1, ymax=4, linewidth=2, color='b')  # vertical line at x=??"
  },
  {
    "objectID": "Chp3/15-Phase-Plane-Portrait.html#sec-15quest4",
    "href": "Chp3/15-Phase-Plane-Portrait.html#sec-15quest4",
    "title": "3.2: Phase Plane Portraits",
    "section": "Question 4:",
    "text": "Question 4:\n\nA certain system of differential equations for the variables \\(R\\) and \\(S\\) describes the interaction of rabbits and sheep grazing in the same field. On the phase plane below, dashed lines show the \\(R\\) and \\(S\\) nullclines along with their corresponding vectors.\n\n\nQuestion 4a:\n\nIdentify the \\(R\\) nullclines and explain how you know.\n\nSolution to Question 4a:\n\n\n\n\n\n\n\nQuestion 4b:\n\nIdentify the \\(S\\) nullclines and explain how you know.\n\nSolution to Question 4b:\n\n\n\n\n\n\n\nQuestion 4c:\n\nIdentify all equilibrium points.\n\nSolution to Question 4c:\n\n\n\n\n\n\n\nQuestion 4d:\n\nNotice that the nullclines carve out 4 different regions of the first quadrant of the \\(RS\\) plane. In each of these 4 regions, add a prototypical-vector that represents the vectors in that region. That is, if you think the both \\(R\\) and \\(S\\) are increasing in a certain region then, draw a vector pointing up and to the right for that region.\n\nSolution to Question 4d:\n\n\n\n\n\n\n\nQuestion 4e:\n\nWhat does this system seem to predict will happen to the rabbits and sheep in this field in the long run?\n\nSolution to Question 4e:"
  },
  {
    "objectID": "Chp3/16-Phase-Plane-Equation.html",
    "href": "Chp3/16-Phase-Plane-Equation.html",
    "title": "3.3: Phase Plane Equations",
    "section": "",
    "text": "The Phase Plane Equation\nConsider a system of two differential equations:\n\\[\\begin{aligned}\n\\frac{dx}{dt} &=f(x,y) \\\\\n\\frac{dy}{dt} &=g(x,y)\n\\end{aligned}\\]\nRecall from the chain rule we have \\[ \\frac{dy}{dx} \\frac{dx}{dt} = \\frac{dy}{dt},\\] which gives the phase plane equation \\[\\color{dodgerblue}{\\boxed{\\large \\frac{dy}{dx} = \\frac{ \\frac{dy}{dt}}{\\frac{dx}{dt}} = \\frac{g(x,y)}{f(x,y)}}}.\\]\nA point \\((x_0,y_0)\\) is called an equilibrium (or critical point) of the system\n\\[\\begin{aligned}\n\\frac{dx}{dt} &=f(x,y) \\\\\n\\frac{dy}{dt} &=g(x,y)\n\\end{aligned}\\]\nif both \\(f(x_0,y_0)=0\\) and \\(g(x_0,y_0)=0\\).\nThe corresponding solution \\((x(t),y(t)) = (x_0,y_0)\\) is called an equilibrium solution.\nAs with slope fields, we typically rely on technology to plot phase plane portraits. The ode_tools module (same file as earlier) includes a function called phase_portrait that will be a nice tool for visualizing solutions to autonomous systems of differential equations.\nExploring Differential Equations by Adam Spiegler is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Based on a work at https://github.com/CU-Denver-MathStats-OER/ODEs and original content created by Rasmussen, C., Keene, K. A., Dunmyre, J., & Fortune, N. (2018). Inquiry oriented differential equations: Course materials. Available at https://iode.sdsu.edu."
  },
  {
    "objectID": "Chp3/16-Phase-Plane-Equation.html#sec-16quest1",
    "href": "Chp3/16-Phase-Plane-Equation.html#sec-16quest1",
    "title": "3.3: Phase Plane Equations",
    "section": "Question 1:",
    "text": "Question 1:\n\nWrite and solve the corresponding phase plane equation for the system\n\\[\\begin{aligned}\n\\frac{dx}{dt} &=7y \\\\\n\\frac{dy}{dt} &=-2x\n\\end{aligned}\\]\n\nSolution to Question 1:"
  },
  {
    "objectID": "Chp3/16-Phase-Plane-Equation.html#sec-16quest2",
    "href": "Chp3/16-Phase-Plane-Equation.html#sec-16quest2",
    "title": "3.3: Phase Plane Equations",
    "section": "Question 2:",
    "text": "Question 2:\n\nMake a sketch of several solutions in the phase plane, include arrows to indicate how solutions behave with respect to time.\n\nSolution to Question 2:\n\n\n\n\n\nimport sympy as sym\nimport matplotlib.pyplot as plt\n\nsym.var('x y')\nplot1 = sym.plot_implicit(x**2 + 7/2*y**2-1, show = False, line_color = 'b')\nplot2 = sym.plot_implicit(x**2 + 7/2*y**2-4, show = False, line_color = 'r')\nplot3 = sym.plot_implicit(x**2 + 7/2*y**2-9, show = False, line_color = 'g')\nplot1.append(plot2[0])\nplot1.append(plot3[0])\nplot1.show()"
  },
  {
    "objectID": "Chp3/16-Phase-Plane-Equation.html#sec-16quest3",
    "href": "Chp3/16-Phase-Plane-Equation.html#sec-16quest3",
    "title": "3.3: Phase Plane Equations",
    "section": "Question 3:",
    "text": "Question 3:\n\nFind the equilibrium to the system\n\\[\\begin{array}{l}\n\\dfrac{dx}{dt} =2x-y+8 \\\\\n\\dfrac{dy}{dt} =3x+6\n\\end{array}.\\]\n\nSolution to Question 3:"
  },
  {
    "objectID": "Chp3/16-Phase-Plane-Equation.html#sec-16quest4",
    "href": "Chp3/16-Phase-Plane-Equation.html#sec-16quest4",
    "title": "3.3: Phase Plane Equations",
    "section": "Question 4:",
    "text": "Question 4:\n\nFind the equilibrium to the system\n\\[\\begin{array}{l}\n\\dfrac{dx}{dt} =y^2-xy \\\\\n\\dfrac{dy}{dt} =2xy-4\n\\end{array}.\\]\n\nSolution to Question 4:"
  },
  {
    "objectID": "Chp3/16-Phase-Plane-Equation.html#sec-16quest5",
    "href": "Chp3/16-Phase-Plane-Equation.html#sec-16quest5",
    "title": "3.3: Phase Plane Equations",
    "section": "Question 5:",
    "text": "Question 5:\n\nFind the equilibrium. Then find and solve the phase plane equation.\n\\[\\begin{array}{l}\n\\dfrac{dx}{dt} =6x \\\\\n\\dfrac{dy}{dt} =3y\n\\end{array}\\]\n\nSolution to Question 5:"
  },
  {
    "objectID": "Chp3/16-Phase-Plane-Equation.html#sec-16quest6",
    "href": "Chp3/16-Phase-Plane-Equation.html#sec-16quest6",
    "title": "3.3: Phase Plane Equations",
    "section": "Question 6:",
    "text": "Question 6:\n\nFind the equilibrium. Then find and solve the phase plane equation.\n\\[\\begin{array}{l}\n\\dfrac{dx}{dt} =4-4y \\\\\n\\dfrac{dy}{dt} =-4x\n\\end{array}\\]\n\nSolution to Question 6:"
  },
  {
    "objectID": "Chp3/16-Phase-Plane-Equation.html#sec-16quest7",
    "href": "Chp3/16-Phase-Plane-Equation.html#sec-16quest7",
    "title": "3.3: Phase Plane Equations",
    "section": "Question 7:",
    "text": "Question 7:\n\nFind the equilibrium. Then find and solve the phase plane equation.\n\\[\\begin{array}{l}\n\\dfrac{dx}{dt} =2y^2-y \\\\\n\\dfrac{dy}{dt} =x^2y\n\\end{array}\\]\n\nSolution to Question 7:"
  },
  {
    "objectID": "Chp3/16-Phase-Plane-Equation.html#sec-LoadModule",
    "href": "Chp3/16-Phase-Plane-Equation.html#sec-LoadModule",
    "title": "3.3: Phase Plane Equations",
    "section": "Loading ode_tools from GitHub",
    "text": "Loading ode_tools from GitHub\n\n\nRun the code cell below to load the most up to date modules stored in GitHub.\nYou will only need to run this code cell one time during an active session.\n\n\n!pip install git+https://github.com/CU-Denver-MathStats-OER/ODEs\nfrom IPython.display import clear_output\nclear_output()"
  },
  {
    "objectID": "Chp3/16-Phase-Plane-Equation.html#importing-the-phase_portrait-plotting-function",
    "href": "Chp3/16-Phase-Plane-Equation.html#importing-the-phase_portrait-plotting-function",
    "title": "3.3: Phase Plane Equations",
    "section": "Importing the phase_portrait Plotting Function",
    "text": "Importing the phase_portrait Plotting Function\n\nAfter you followed the instructions above and imported the ode_tools module from GitHub, you are now ready to import the phase_portrait function.\n\nfrom utils.ode_tools import phase_portrait  # Only need to import one time."
  },
  {
    "objectID": "Chp3/16-Phase-Plane-Equation.html#defining-the-system-of-differential-equations",
    "href": "Chp3/16-Phase-Plane-Equation.html#defining-the-system-of-differential-equations",
    "title": "3.3: Phase Plane Equations",
    "section": "Defining the System of Differential Equations",
    "text": "Defining the System of Differential Equations\n\nWe use \\(x\\) and \\(y\\) as the generic symbols for the two dependent variables.\n\\[\\begin{align}\n\\frac{dx}{dt} &= f_1(x, y)\\\\\n\\frac{dy}{dt} &= f_2(x, y)\n\\end{align}\\]\nBelow, we enter the system we analyzed in Question 1.\n\\[\\begin{aligned}\n\\frac{dx}{dt} &=7y \\\\\n\\frac{dy}{dt} &=-2x\n\\end{aligned}\\]\n\nimport numpy as np\n\n# Set viewing window\n\nx = np.linspace(-5.0, 5.0, 20)  # y1 is horizontal axis\ny = np.linspace(-5.0, 5.0, 20)  # y2 is vertical axis\n\ndef f(Y, t):\n    x, y = Y\n    return [7*y , -2*x]  # enter f_1(y1, y2) and f_2(y1,y2)"
  },
  {
    "objectID": "Chp3/16-Phase-Plane-Equation.html#plotting-with-phase_portrait",
    "href": "Chp3/16-Phase-Plane-Equation.html#plotting-with-phase_portrait",
    "title": "3.3: Phase Plane Equations",
    "section": "Plotting with phase_portrait",
    "text": "Plotting with phase_portrait\n\n\n# Plots a phase portrait\nphase_portrait(x, y, f)"
  },
  {
    "objectID": "Chp3/17-Linear-Systems.html",
    "href": "Chp3/17-Linear-Systems.html",
    "title": "3.4: Linear Systems of Differential Equations",
    "section": "",
    "text": "An Initial Model\nAn \\(m \\times n\\) matrix is a rectangular array of numbers with \\(m\\) rows and \\(n\\) columns. For example\n\\[\\begin{bmatrix}\n3 & -2 & 7 \\\\\n-12 & 0 & 5\n\\end{bmatrix}\\]\nis a 2 by 3 matrix since it has 2 rows and 3 columns.\nSome important terminology when working with matrices:\nLet \\(\\mathbf{x'}\\) denote a column vector of derivatives such as\n\\[\\mathbf{x'} =  \\begin{bmatrix} \\dfrac{dx_1}{dt} \\\\ \\dfrac{dx_2}{dt} \\\\ \\dfrac{dx_3}{dt} \\end{bmatrix}.\\]\nWe say a scalar \\(\\lambda\\) is an eigenvalue of a square matrix \\(A\\) if there exists a nonzero vector \\(\\mathbf{v}\\) such that \\(A\\mathbf{v} = \\lambda \\mathbf{v}\\). The eigenvalues of matrix have many useful applications and interpretations. We will see in the context of differential equations, they can tell us very important information about how the solutions behave.\nWe will mostly be working with a system of two differential equations, so it will suffice to restrict our attention to the case where \\(A\\) is a \\(2 \\times 2\\) matrix, but the discussion below can be generalized to deal with much larger systems. In the \\(2 \\times 2\\) case, \\(\\lambda\\) is an eigenvalue of \\(A\\) if there exists a nonzero vector \\(\\mathbf{v}\\) such that\n\\[\\begin{align}\n\\lambda \\mathbf{v} &= \\begin{bmatrix} a & b  \\\\ c & d \\end{bmatrix} \\mathbf{v} \\\\\n\\textbf{0} &= \\begin{bmatrix} a & b  \\\\ c & d \\end{bmatrix} \\mathbf{v} - \\lambda \\mathbf{v} \\\\\n\\textbf{0} &= \\begin{bmatrix} a & b  \\\\ c & d \\end{bmatrix}  \\mathbf{v} - \\begin{bmatrix} \\lambda & 0  \\\\ 0 & \\lambda \\end{bmatrix}  \\mathbf{v} \\\\\n\\textbf{0} &= \\begin{bmatrix} a-\\lambda & b  \\\\ c & d-\\lambda \\end{bmatrix} \\mathbf{v}\n\\end{align}\\]\nUsing linear algebra, we can show that \\(\\lambda\\) is an eigenvalue of \\(A\\) if and only if\n\\[ \\mbox{det} \\left(  \\begin{bmatrix} a-\\lambda & b  \\\\ c & d-\\lambda \\end{bmatrix} \\right) = \\color{dodgerblue}{(a-\\lambda)(d-\\lambda) - bc = 0}.\\]\nRecall the model for bacteria populations \\(x\\) and \\(y\\) in Colony 1 and Colony 2 in Question 2. Follow the steps below to find general solutions to the system\n\\[\\begin{align}\n\\frac{dx}{dt} &= 3x+10y \\\\\n\\frac{dy}{dt} &= -2y\n\\end{align}.\\]\nExploring Differential Equations by Adam Spiegler is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Based on a work at https://github.com/CU-Denver-MathStats-OER/ODEs and original content created by Rasmussen, C., Keene, K. A., Dunmyre, J., & Fortune, N. (2018). Inquiry oriented differential equations: Course materials. Available at https://iode.sdsu.edu."
  },
  {
    "objectID": "Chp3/17-Linear-Systems.html#sec-17quest1",
    "href": "Chp3/17-Linear-Systems.html#sec-17quest1",
    "title": "3.4: Linear Systems of Differential Equations",
    "section": "Question 1:",
    "text": "Question 1:\n\nLet \\(x(t)\\) denote the number of bacteria in a colony (labeled Colony 1) at time \\(t\\) hours since noon. Let \\(y(t)\\) denote the number of bacteria in a separate colony (labeled Colony 2) at time \\(t\\) hours since noon. The size of populations \\(x\\) and \\(y\\) can be modeled by system of differential equations\n\\[\\begin{align}\n\\frac{dx}{dt} &= 3x\\\\\n\\frac{dy}{dt} &= -2y\n\\end{align}\\]\n\nQuestion 1a:\n\nExplain in practical terms how each of the populations is changing over time. Are the two populations interacting? What happens to the size of each colony in the long run?\n\nSolution to Question 1a:\n\n\n\n\n\n\n\nQuestion 1b:\n\nSolve each of the differential equations and give general solutions for \\(x\\) and \\(y\\).\n\nSolution to Question 1b:"
  },
  {
    "objectID": "Chp3/17-Linear-Systems.html#sec-17quest2",
    "href": "Chp3/17-Linear-Systems.html#sec-17quest2",
    "title": "3.4: Linear Systems of Differential Equations",
    "section": "Question 2:",
    "text": "Question 2:\n\nNow imagine Colony 1 and Colony 2 are arranged such that the size of populations \\(x\\) and \\(y\\) can be modeled by system of differential equations\n\\[\\begin{align}\n\\frac{dx}{dt} &= 3x+10y\\\\\n\\frac{dy}{dt} &= -2y\n\\end{align}\\]\n\nQuestion 2a:\n\nExplain in practical terms how each of the populations is changing over time. Are the two populations interacting? What happens to the size of each colony in the long run?\n\nSolution to Question 2a:\n\n\n\n\n\n\n\nQuestion 2b:\n\nNotice the solution for \\(y\\) is the same for this modified setup. Give an educated guess for the general form of the expression for the new solution for \\(x(t)\\).\n\nSolution to Question 2b:\n\n\n\n\n\n\n\nQuestion 2c:\n\nSubstitute your answer in Question 2b as well as the original solution for \\(y(t)\\) in Question 1b into the differential equation for \\(x\\),\n\\[\\frac{dx}{dt} = 3x+10y,\\]\nand find the general solution for \\(x\\).\n\n\nSolution to Question 2c:"
  },
  {
    "objectID": "Chp3/17-Linear-Systems.html#sec-17quest3",
    "href": "Chp3/17-Linear-Systems.html#sec-17quest3",
    "title": "3.4: Linear Systems of Differential Equations",
    "section": "Question 3:",
    "text": "Question 3:\n\nIf we consider a general system of differential equations of the form\n\\[\\begin{align}\nx' &= ax+by \\\\\ny' &= cx+dy\n\\end{align}\\]\nthen we can generalize our approach in the previous example by guessing solutions of the form\n\\[x(t) = C_1 e^{r_1t} + C_2 e^{r_2t} \\qquad \\mbox{and} \\qquad y(t) = C_3e^{r_1t} + C_4 e^{r_2t},\\]\nwhere we note there is some dependence between constant \\(C_1\\) and \\(C_3\\) and constants \\(C_2\\) and \\(C_4\\). Explain how we might interpret the meaning of the constants \\(r_1\\) and \\(r_2\\) in practical terms.\n\nSolution to Question 3:"
  },
  {
    "objectID": "Chp3/17-Linear-Systems.html#sec-17quest4",
    "href": "Chp3/17-Linear-Systems.html#sec-17quest4",
    "title": "3.4: Linear Systems of Differential Equations",
    "section": "Question 4:",
    "text": "Question 4:\n\nBy plugging the guess for \\(x\\) and \\(y\\) into the differential equation \\(x'= ax+by\\) you can derive two equations that the values \\(r_1\\) and \\(r_2\\) must satisfy. Replace each ?? with an appropriate expression to give the two equations.\n\n\n\n\n\n\nTip\n\n\n\nRun the code cell below to help save some time with the calculus and algebraic manipulations.\n\n\n\nSolution to Question 4:\n\n\\(r_1 C_1 = ??\\)\n\n\\(r_2 C_2 = ??\\)\n\n\nimport sympy as sym\n\n# Creating symbols\nr1, r2, C1, C2, C3, C4, a, b, t, x, y = sym.symbols('r1, r2, C1, C2, C3, C4, a, b, t, x, y')  \n\nx = C1 * sym.exp(r1 * t) + C2 * sym.exp(r2 * t)  # General solution for x\ny = C3 * sym.exp(r1 * t) + C4 * sym.exp(r2 * t)  # General solution for y\n\n\nleft = x.diff(t,1)  # find formula for x' on left side\nright = sym.simplify(a*x + b*y)  # simplify right side\n\nprint(\"The left side is \", left,\n     \"\\n \\n The right side side is \", right)"
  },
  {
    "objectID": "Chp3/17-Linear-Systems.html#sec-17quest5",
    "href": "Chp3/17-Linear-Systems.html#sec-17quest5",
    "title": "3.4: Linear Systems of Differential Equations",
    "section": "Question 5:",
    "text": "Question 5:\n\nSimilar to Question 4, by plugging the guess for \\(x\\) and \\(y\\) into the differential equation \\(y'= cx+dy\\) you can derive two equations that the values \\(r_1\\) and \\(r_2\\) must satisfy. Replace each ?? with an appropriate expression to give the two equations.\n\n\n\n\n\n\nTip\n\n\n\nRun the code cell below to help save some time with the calculus and algebraic manipulations.\n\n\n\nSolution to Question 5:\n\n\\(r_1 C_3 = ??\\)\n\n\\(r_2 C_4 = ??\\)\n\n\n#import sympy as sym  # only need to import once\n\n# Creating symbols\nr1, r2, C1, C2, C3, C4, c, d, t, x, y = sym.symbols('r1, r2, C1, C2, C3, C4, c, d, t, x, y')  \n\nx = C1 * sym.exp(r1 * t) + C2 * sym.exp(r2 * t)  # General solution for x\ny = C3 * sym.exp(r1 * t) + C4 * sym.exp(r2 * t)  # General solution for y\n\n\nleft = y.diff(t,1)  # find formula for x' on left side\nright = sym.simplify(c*x + d*y)  # simplify right side\n\nprint(\"The left side is \", left,\n     \"\\n \\n The right side side is \", right)"
  },
  {
    "objectID": "Chp3/17-Linear-Systems.html#sec-17quest6",
    "href": "Chp3/17-Linear-Systems.html#sec-17quest6",
    "title": "3.4: Linear Systems of Differential Equations",
    "section": "Question 6:",
    "text": "Question 6:\n\nFrom Question 4 and Question 5, we get a system of two equations that \\(r_1\\) must simultaneously satisfy. Write the resulting system of two equations below.\n\nSolution to Question 6:\n\n\n\\(r_1 C_1 = ??\\)\n\n\\(r_1 C_3 = ??\\)"
  },
  {
    "objectID": "Chp3/17-Linear-Systems.html#multiplication-of-a-matrix-by-a-scalar",
    "href": "Chp3/17-Linear-Systems.html#multiplication-of-a-matrix-by-a-scalar",
    "title": "3.4: Linear Systems of Differential Equations",
    "section": "Multiplication of a Matrix by a Scalar",
    "text": "Multiplication of a Matrix by a Scalar\n\nWe can multiple a scalar (a regular number) and a matrix by simply multiplying each value in the matrix by the scalar. For example:\n\\[2 \\begin{bmatrix}\n3 & -2 & 7 \\\\\n-12 & 0 & 5\n\\end{bmatrix} =\n\\begin{bmatrix}\n6 & -4 & 14 \\\\\n-24 & 0 & 10\n\\end{bmatrix}\n\\qquad \\mbox{and} \\qquad\n\\lambda \\begin{bmatrix} C_1 \\\\ C_3 \\end{bmatrix} =\n\\begin{bmatrix} \\lambda C_1 \\\\ \\lambda C_3  \\end{bmatrix}\\]"
  },
  {
    "objectID": "Chp3/17-Linear-Systems.html#adding-matrices",
    "href": "Chp3/17-Linear-Systems.html#adding-matrices",
    "title": "3.4: Linear Systems of Differential Equations",
    "section": "Adding Matrices",
    "text": "Adding Matrices\n\nWe can add two \\(m\\) by \\(n\\) matrices \\(A\\) and \\(B\\) by adding values in the same row and column, for example\n\\[\\begin{bmatrix}\n3 & -2 & 7 \\\\\n-12 & 0 & 5\n\\end{bmatrix} + \\begin{bmatrix}\n0 & 2 & -4 \\\\\n10 & -3 & 4\n\\end{bmatrix} =  \\begin{bmatrix}\n3 & 0 & 3 \\\\\n-2 & -3 & 9\n\\end{bmatrix} .\\]\n\n\n\n\n\n\nNote\n\n\n\nAs a result of this definition we cannot add two matrices if they have different dimensions."
  },
  {
    "objectID": "Chp3/17-Linear-Systems.html#multiplication-of-matrices",
    "href": "Chp3/17-Linear-Systems.html#multiplication-of-matrices",
    "title": "3.4: Linear Systems of Differential Equations",
    "section": "Multiplication of Matrices",
    "text": "Multiplication of Matrices\n\nMultiplication of two matrices is a little more complicated. Let \\(A\\) denote an \\(m\\) by \\(n\\) matrix and \\(B\\) denote an \\(n\\) by \\(p\\) matrix, then we have\n\\[AB = \\begin{bmatrix}\n\\color{dodgerblue}{\\mathbf{a_{11}}} & \\color{dodgerblue}{\\mathbf{a_{12}}} & \\color{dodgerblue}{\\mathbf{\\ldots}} & \\color{dodgerblue}{\\mathbf{a_{1n}}} \\\\\na_{21} & a_{22} & \\ldots & a_{2n} \\\\\n\\vdots & \\vdots & & \\vdots \\\\\na_{m1} & a_{m2} & \\mathbf{\\ldots} & a_{mn}\n\\end{bmatrix}\n\\begin{bmatrix}\nb_{11} & \\color{dodgerblue}{\\mathbf{b_{12}}} & \\ldots & b_{1p} \\\\\nb_{21} & \\color{dodgerblue}{\\mathbf{b_{22}}} & \\ldots & b_{2p} \\\\\n\\vdots & \\color{dodgerblue}{\\mathbf{ \\vdots }} & & \\vdots \\\\\nb_{n1} & \\color{dodgerblue}{\\mathbf{b_{n2}}} & \\ldots & b_{np}\n\\end{bmatrix} = \\begin{bmatrix}\nc_{11} & \\color{dodgerblue}{\\mathbf{c_{12}}} & \\ldots & c_{1p} \\\\\nc_{21} & c_{22} & \\ldots & c_{2p} \\\\\n\\vdots & \\vdots & & \\vdots \\\\\nc_{m1} & c_{m2} & \\ldots & b_{mp}\n\\end{bmatrix}\\]\nwhere entry \\(c_{ij}\\) in the \\(i^{\\mbox{th}}\\) row and \\(j^{\\mbox{th}}\\) column of the product is found by multiplying and adding entries of the \\(i^{\\mbox{th}}\\) row of \\(A\\) and the \\(j^{\\mbox{th}}\\) column of \\(B\\) as follows:\n\\[c_{ij} = a_{i1}b_{1j} + a_{i2}b_{2j} + \\ldots + a_{in}b_{nj} = \\sum_{k = 1}^n a_{ik}b_{kj}.\\]\n\n\n\n\n\n\nNote\n\n\n\nThe product \\(\\mathbf{AB}\\) is only defined if the number of columns of \\(\\mathbf{A}\\) matches the number of rows of \\(\\mathbf{B}\\)."
  },
  {
    "objectID": "Chp3/17-Linear-Systems.html#matrix-arithmetic-in-python-using-sympy",
    "href": "Chp3/17-Linear-Systems.html#matrix-arithmetic-in-python-using-sympy",
    "title": "3.4: Linear Systems of Differential Equations",
    "section": "Matrix Arithmetic in Python Using Sympy",
    "text": "Matrix Arithmetic in Python Using Sympy\n\nThe sympy package can be used to perform matrix operations such as multiplication and addition.\n\nWe enter matrices using sym.Matrix([ [row1], [row2], ... , [last_row] ]).\nWe can find the size of a matrix using sym.shape(M).\nWe can add two matrices \\(M\\) and \\(N\\) (assuming they are the same size) using M + N.\nWe can multiply scalar \\(c\\) and matrix \\(M\\) with c * M.\nWe can multiply two matrices \\(M\\) and \\(N\\) (assuming the have the appropriate sizes) with M * N.\n\nThe code cells below verify the calculations in the examples above as well as an example of matrix multiplication.\n\nCreating Matrices\n\n\n#import sympy as sym  # we have already imported sympy\n\n# Create a 2 by 3 matrix M\nM = sym.Matrix([[3, -2, 7],\n          [-12, 0, 5]])\n\n# Create a 2 by 3 matrix N\nN = sym.Matrix([[0, 2, -4],\n          [10, -3, 4]])\n\n# Create a 3 by 2 matrix P\nP = sym.Matrix([[5, 2], \n          [-1, 8],\n          [6, -3]])\n\n\n\nScalar Multiplication\n\n\n# Scalar multiplication example\n\n2 * M\n\n\n\nAdding Matrices\n\n\n# Matrix Addition\n\nM + N\n\n# See what happens if you try the command below\n# M + P\n\n\n\nMatrix Multiplication\n\n\n# Matrix Multiplication\n\nM * P\n\n# See what happens if you try the command below\n# M * N"
  },
  {
    "objectID": "Chp3/17-Linear-Systems.html#sec-17quest7",
    "href": "Chp3/17-Linear-Systems.html#sec-17quest7",
    "title": "3.4: Linear Systems of Differential Equations",
    "section": "Question 7:",
    "text": "Question 7:\n\nCompute the product \\(AB\\) for the matrices:\n\\[A =  \\begin{bmatrix} 3 & 2 & -1  \\\\ -7 & 0 & 5 \\end{bmatrix}\n\\qquad \\mbox{and} \\qquad\nB = \\begin{bmatrix} 1 \\\\ 2 \\\\ -1 \\end{bmatrix}\\]\nFeel free to compute by hand or using Python by inserting a code cell to do the calculations.\n\nSolution to Question 7:\n\n\n\\[AB = \\begin{bmatrix}\n?? \\\\\n??\n\\end{bmatrix}\\]"
  },
  {
    "objectID": "Chp3/17-Linear-Systems.html#sec-17quest8",
    "href": "Chp3/17-Linear-Systems.html#sec-17quest8",
    "title": "3.4: Linear Systems of Differential Equations",
    "section": "Question 8:",
    "text": "Question 8:\n\nCompute the product \\(AB\\) for the matrices:\n\\[A =  \\begin{bmatrix} a & b \\\\ c & d \\end{bmatrix}\n\\qquad \\mbox{and} \\qquad\nB = \\begin{bmatrix} C_1 \\\\ C_2 \\end{bmatrix}\\]\nFeel free to compute by hand or using Python by inserting a code cell to do the calculations.\n\nSolution to Question 8:\n\n\n\\[AB = \\begin{bmatrix}\n?? \\\\\n??\n\\end{bmatrix}\\]"
  },
  {
    "objectID": "Chp3/17-Linear-Systems.html#sec-17quest9",
    "href": "Chp3/17-Linear-Systems.html#sec-17quest9",
    "title": "3.4: Linear Systems of Differential Equations",
    "section": "Question 9:",
    "text": "Question 9:\n\nGive the matrix \\(A\\) such that the system of equations for \\(r_1\\) in Question 6 can be written in matrix form as\n\\[A \\begin{bmatrix}  C_1 \\\\ C_3   \\end{bmatrix} = r_1  \\begin{bmatrix} C_1 \\\\ C_3  \\end{bmatrix}.\\]\n\nSolution to Question 9:\n\n\n\\[A = \\begin{bmatrix}\n?? & ??\\\\\n?? & ??\n\\end{bmatrix}\\]"
  },
  {
    "objectID": "Chp3/17-Linear-Systems.html#sec-17quest10",
    "href": "Chp3/17-Linear-Systems.html#sec-17quest10",
    "title": "3.4: Linear Systems of Differential Equations",
    "section": "Question 10:",
    "text": "Question 10:\n\nGive the matrix \\(A\\) such that the system of differential equations below can be written in the form \\(\\mathbf{x'} = A \\mathbf{x}\\).\n\\[\\begin{array}{rl}\n\\dfrac{dx_1}{dt} &= 4 x_1 + 7 x_2 - x_3 \\\\\n\\dfrac{dx_2}{dt} &= -2x_1-11x_3\\\\\n\\dfrac{dx_3}{dt} &= 8x_3-x_2\n\\end{array}\\]\n\nSolution to Question 10:\n\n\\[\\begin{bmatrix} \\dfrac{dx_1}{dt} \\\\ \\dfrac{dx_2}{dt} \\\\ \\dfrac{dx_3}{dt} \\end{bmatrix} =\n\\begin{bmatrix}\n?? & ?? & ?? \\\\\n?? & ?? & ?? \\\\\n?? & ?? & ??\n\\end{bmatrix}\n\\begin{bmatrix} x_1 \\\\ x_2 \\\\ x_3 \\end{bmatrix}.\\]"
  },
  {
    "objectID": "Chp3/17-Linear-Systems.html#sec-17quest11",
    "href": "Chp3/17-Linear-Systems.html#sec-17quest11",
    "title": "3.4: Linear Systems of Differential Equations",
    "section": "Question 11:",
    "text": "Question 11:\n\nExpress the system below in matrix form.\n\\[\\begin{array}{rl}\nx' &= \\cos{(2t)}x + \\sin{(2t)}z\\\\\ny' &= e^ty \\\\\nz' &= \\sin{(2t)}x + \\cos{(2t)}z\n\\end{array}\\]\n\nSolution to Question 11:\n\n\\[\\begin{bmatrix} x' \\\\ y' \\\\ z' \\end{bmatrix} =\n\\begin{bmatrix}\n?? & ?? & ?? \\\\\n?? & ?? & ?? \\\\\n?? & ?? & ??\n\\end{bmatrix}\n\\begin{bmatrix} x \\\\ y \\\\ z \\end{bmatrix}.\\]"
  },
  {
    "objectID": "Chp3/17-Linear-Systems.html#finding-eigenvalues-with-sympy",
    "href": "Chp3/17-Linear-Systems.html#finding-eigenvalues-with-sympy",
    "title": "3.4: Linear Systems of Differential Equations",
    "section": "Finding Eigenvalues with Sympy",
    "text": "Finding Eigenvalues with Sympy\n\nLet \\(M\\) denote a square matrix.\n\nTo find the characteristic polynomial corresponding \\(M\\), use M.charpoly().\nTo find the eigenvalues of \\(M\\), use the command M.eigenvals().\n\n\nExample: Finding Eigenvalues of \\(3 \\times 3\\) Matrix\n\nConsider the \\(3 \\times 3\\) matrix\n\\[M = \\begin{bmatrix}\n-13 & -8 & -4 \\\\\n12 & 7 & 4\\\\\n24 & 16 & 7\n\\end{bmatrix}\\]\n\nIn the first code cell below, we find the eigenvalues by finding the zeros of the characteristic equation.\nIn the second code cell below, we check our eigenvalues using sym.eigenvals(M).\n\n\n# Finding Eigenvalues with Characteristic Polynomials\n\n# import sympy as sym  # we have already imported\n\n# Note the lambda is reserved, so we misspell on purpose\nlamda = sym.symbols('lamda')  \n\n# Define matrix M\nM = sym.Matrix([[-13, -8, -4],\n                [12, 7, 4], \n                [24, 16, 7]])\n\n# Find characteristic polynomial of M\np = M.charpoly(lamda)\n\n# Factor the characteristic equation\nsym.factor(p.as_expr())\n\n\n# Checking our previous result\n\nM.eigenvals()"
  },
  {
    "objectID": "Chp3/17-Linear-Systems.html#sec-17step1",
    "href": "Chp3/17-Linear-Systems.html#sec-17step1",
    "title": "3.4: Linear Systems of Differential Equations",
    "section": "Step 1:",
    "text": "Step 1:\n\nWrite the system in matrix form and identify the matrix \\(A\\).\n\nSolution to Step 1:\n\n\n\\[A = \\begin{bmatrix}\n?? & ?? \\\\\n?? & ??\n\\end{bmatrix}\\]"
  },
  {
    "objectID": "Chp3/17-Linear-Systems.html#sec-17step2",
    "href": "Chp3/17-Linear-Systems.html#sec-17step2",
    "title": "3.4: Linear Systems of Differential Equations",
    "section": "Step 2:",
    "text": "Step 2:\n\nDetermine the characteristic equation.\n\n\n\n\n\n\nTip\n\n\n\nYou may find the equation by hand or by inserting a code cell to help with the calculation.\n\n\n\nSolution to Step 2:"
  },
  {
    "objectID": "Chp3/17-Linear-Systems.html#sec-17step3",
    "href": "Chp3/17-Linear-Systems.html#sec-17step3",
    "title": "3.4: Linear Systems of Differential Equations",
    "section": "Step 3:",
    "text": "Step 3:\n\nSolve the characteristic equation.\n\n\n\n\n\n\nTip\n\n\n\nYou may solve the equation by hand or by inserting a code cell to help with the calculation.\n\n\n\nSolution to Step 3:"
  },
  {
    "objectID": "Chp3/17-Linear-Systems.html#sec-17step4",
    "href": "Chp3/17-Linear-Systems.html#sec-17step4",
    "title": "3.4: Linear Systems of Differential Equations",
    "section": "Step 4:",
    "text": "Step 4:\n\nGive a general solution for \\(x(t)\\).\n\nSolution to Step 4:"
  },
  {
    "objectID": "Chp3/17-Linear-Systems.html#sec-17step5",
    "href": "Chp3/17-Linear-Systems.html#sec-17step5",
    "title": "3.4: Linear Systems of Differential Equations",
    "section": "Step 5:",
    "text": "Step 5:\n\nPlug your solution for \\(x(t)\\) into the differential equation \\(x'\\) and solve for \\(y(t)\\).\n\nSolution to Step 5:"
  },
  {
    "objectID": "Chp3/17-Linear-Systems.html#question-12",
    "href": "Chp3/17-Linear-Systems.html#question-12",
    "title": "3.4: Linear Systems of Differential Equations",
    "section": "Question 12:",
    "text": "Question 12:\n\nFind a general solution to the system of differential equations.\n\\[\\begin{array}{l} x'=-\\frac{20}{9}x-\\frac{8}{9}y\\\\ y'=-\\frac{4}{9}x-\\frac{34}{9}y\\end{array}\\]\n\nSolution to Question 12:"
  },
  {
    "objectID": "Chp3/17-Linear-Systems.html#question-13",
    "href": "Chp3/17-Linear-Systems.html#question-13",
    "title": "3.4: Linear Systems of Differential Equations",
    "section": "Question 13:",
    "text": "Question 13:\n\nFind a general solution to the system of differential equations.\n\\[\\begin{array}{l} x'=x-y\\\\ y'=2x-y\\end{array}\\]\n\nSolution to Question 13:"
  },
  {
    "objectID": "Chp3/17-Linear-Systems.html#question-14",
    "href": "Chp3/17-Linear-Systems.html#question-14",
    "title": "3.4: Linear Systems of Differential Equations",
    "section": "Question 14:",
    "text": "Question 14:\n\nFind a general solution to the system of differential equations.\n\\[\\begin{array}{l}x'=12x-3y\\\\y'=3x+6y \\end{array}\\]\n\nSolution to Question 14:"
  },
  {
    "objectID": "Chp3/17-Linear-Systems.html#question-15",
    "href": "Chp3/17-Linear-Systems.html#question-15",
    "title": "3.4: Linear Systems of Differential Equations",
    "section": "Question 15:",
    "text": "Question 15:\n\nFind a general solution to the system of differential equations.\n\\[\\begin{array}{l} x' =4x+5y\\\\y'=-x+2y \\end{array}\\]\n\nSolution to Question 15:"
  },
  {
    "objectID": "Chp3/17-Linear-Systems.html#question-16",
    "href": "Chp3/17-Linear-Systems.html#question-16",
    "title": "3.4: Linear Systems of Differential Equations",
    "section": "Question 16:",
    "text": "Question 16:\n\nFind a general solution to the system of differential equations.\n\\[\\begin{array}{l} x'=4x+21y\\\\y'=-2x-8y\\end{array}\\]\n\nSolution to Question 16:"
  },
  {
    "objectID": "Chp3/17-Linear-Systems.html#question-17",
    "href": "Chp3/17-Linear-Systems.html#question-17",
    "title": "3.4: Linear Systems of Differential Equations",
    "section": "Question 17:",
    "text": "Question 17:\n\nFind a general solution to the system of differential equations.\n\\[\\begin{array}{l} x'=2x+2y\\\\y'=x+3y \\end{array}\\]\n\nSolution to Question 17:"
  },
  {
    "objectID": "Chp3/18-Stability-of-Equilibrium.html",
    "href": "Chp3/18-Stability-of-Equilibrium.html",
    "title": "3.5: Stability of Equilibria",
    "section": "",
    "text": "Initial Conditions of Systems\nFor the system\n\\[\\begin{bmatrix} x' \\\\ y' \\end{bmatrix} =\n\\begin{bmatrix} 3 & 10 \\\\ 0 & -2 \\end{bmatrix}\n\\begin{bmatrix} x\\\\ y \\end{bmatrix}, \\]\n\\(\\mathbf{v}_1=\\langle 3, 0 \\rangle\\) is an eigenvector corresponding to the eigenvalue \\(r_1 = 3\\) and \\(\\mathbf{v}_2=\\langle -2, 1 \\rangle\\) is an eigenvector of \\(r_2=-2\\). From phase plane graph in Question 1d, we see that any solution that starts on the line passing through the eigenvector:\nIn general, \\(\\mathbf{v}\\) is an eigenvector for the eigenvalue \\(\\lambda\\) of a square matrix \\(A\\) if and only if\n\\[A \\mathbf{v} = \\lambda \\mathbf{v}.\\]\nExploring Differential Equations by Adam Spiegler is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Based on a work at https://github.com/CU-Denver-MathStats-OER/ODEs and original content created by Rasmussen, C., Keene, K. A., Dunmyre, J., & Fortune, N. (2018). Inquiry oriented differential equations: Course materials. Available at https://iode.sdsu.edu."
  },
  {
    "objectID": "Chp3/18-Stability-of-Equilibrium.html#sec-18quest1",
    "href": "Chp3/18-Stability-of-Equilibrium.html#sec-18quest1",
    "title": "3.5: Stability of Equilibria",
    "section": "Question 1:",
    "text": "Question 1:\n\nRecall model of the bacteria populations in Colony 1 and Colony 2 given by system of differential equations\n\\[\\begin{align}\n\\frac{dx}{dt} &= 3x+10y \\\\\n\\frac{dy}{dt} &= -2y\n\\end{align}\\]\nWe previously found the general solution for this system, which can be expressed as\n\\[\\begin{align}\nx(t)&= C_1e^{3t} + C_2 e^{-2t} \\\\\ny(t)&= - \\frac{1}{2} C_2 e^{-2t} \\\\\n\\end{align}\\]\n\nQuestion 1a:\n\nGive the solutions if in addition we have the initial condition \\((x(0),y(0))= (3,0)\\).\n\nSolution to Question 1a:\n\n\n\n\n\n\n\nQuestion 1b:\n\nGive the solutions if in addition we have another initial condition \\((x(0),y(0))= (2,-1)\\).\n\nSolution to Question 1b:\n\n\n\n\n\n\n\nQuestion 1c:\n\nSketch the graphs (in the phase plane) of the solution with initial condition \\((x(0),y(0))= (3,0)\\) and the solution with initial condition \\((x(0),y(0))= (2,-1)\\).\n\n\n\n\n\n\nTip\n\n\n\nYou may sketch by hand (probably quicker!) or using the code cells below.\n\n\n\nSolution to Question 1c:\n\n\n\n\n\n\nLoading ode_tools from GitHub\n\n\nRun the code cell below to load the most up to date modules stored in GitHub.\nYou will only need to run this code cell one time during an active session.\n\n\n!pip install git+https://github.com/CU-Denver-MathStats-OER/ODEs\nfrom IPython.display import clear_output\nclear_output()\n\n\n\nImporting phase_portrait from ode_tools Module\n\n\nfrom utils.ode_tools import phase_portrait  # Only need to import one time.\n\n\n\nPlotting Solutions in the Phase Plane\n\n\nimport numpy as np\n\n# Set viewing window\n\nx = np.linspace(-5.0, 5.0, 23)  # x is horizontal axis\ny = np.linspace(-5.0, 5.0, 23)  # y is vertical axis\n\n#############################################\n# Enter the system of differential equations\n#############################################\n\ndef f(Y, t):\n    x, y = Y\n    return [3*x + 10*y ,  # diff eq for dx/dt\n            -2*y]  # # diff eq for dy/dt\n\n\nimport matplotlib.pyplot as plt  # import plotting package\n\n# Plots a phase portrait\nphase_portrait(x, y, f)\n\n# line through (3,0)\nplt.plot(x, ??, linewidth=2, color='b')  # replace ?? with an expression\n\n# line through (2, -1)\nplt.plot(x, ??, linewidth=2, color='r')  # replace ?? with an expression\n\n\n\n\nQuestion 1d:\n\nUsing your graph in the previous question, make a rough sketch of the solution corresponding to the initial conditions \\((x(0),y(0))= (1,1)\\) and \\((x(0),y(0))= (1,-1)\\).\n\nSolution to Question 1d:"
  },
  {
    "objectID": "Chp3/18-Stability-of-Equilibrium.html#eigenvectors-in-sympy",
    "href": "Chp3/18-Stability-of-Equilibrium.html#eigenvectors-in-sympy",
    "title": "3.5: Stability of Equilibria",
    "section": "Eigenvectors in Sympy",
    "text": "Eigenvectors in Sympy\n\n\nimport sympy as sym\n\nM = sym.Matrix([[3, 10],\n           [0, -2]])\n\nM.eigenvects()"
  },
  {
    "objectID": "Chp3/18-Stability-of-Equilibrium.html#expressing-solutions-in-vector-form",
    "href": "Chp3/18-Stability-of-Equilibrium.html#expressing-solutions-in-vector-form",
    "title": "3.5: Stability of Equilibria",
    "section": "Expressing Solutions in Vector Form",
    "text": "Expressing Solutions in Vector Form\n\nUsing the eigenvectors we can express the solutions in vector form:\n\\[\\begin{align}\n\\begin{bmatrix} x(t) \\\\ y(t) \\end{bmatrix} &=\nC_1e^{r_1t} \\mathbf{v}_1+ C_2 e^{r_2t} \\mathbf{v}_2 \\\\\n\\\\\n\\color{dodgerblue}{\\begin{bmatrix} x(t) \\\\ y(t) \\end{bmatrix}} & \\color{dodgerblue}{=  C_1e^{3t} \\begin{bmatrix} 3 \\\\ 0 \\end{bmatrix} + C_1e^{-2t} \\begin{bmatrix} -2 \\\\ 1 \\end{bmatrix}}\n\\end{align}\\]\nThe vector form of the solution above is equivalent to solutions we obtained earlier:\n\\[\\begin{bmatrix} x(t) \\\\ y(t) \\end{bmatrix} =\n\\begin{bmatrix}\n3C_1e^{3t} & - & 2C_2e^{-2t}  \\\\\n   & & C_2e^{-2t}\n\\end{bmatrix}\n\\quad \\mbox{so we have} \\quad x(t) = B_1e^{3t}+B_2e^{-2t} \\mbox{ and } y(t) = - \\frac{1}{2}B_2e^{-2t}.\\]"
  },
  {
    "objectID": "Chp3/18-Stability-of-Equilibrium.html#sec-18quest2",
    "href": "Chp3/18-Stability-of-Equilibrium.html#sec-18quest2",
    "title": "3.5: Stability of Equilibria",
    "section": "Question 2:",
    "text": "Question 2:\n\nConsider the system of differential equations:\n\\[\\begin{bmatrix}\nx'\\\\\ny'\n\\end{bmatrix} =\n\\begin{bmatrix}\n1 & 3 \\\\\n4 & 5\n\\end{bmatrix}\n\\begin{bmatrix}\nx\\\\\ny\n\\end{bmatrix}\\]\nFind the eigenvalues and eigenvectors for the system, and give the general solution in vector form. Then make a sketch of several solutions to this system in the phase plane by hand.\n\n\n\n\n\n\nTip\n\n\n\nFeel free to use code cells to help find eigenvalues and eigenvectors.\n\n\n\nSolution to Question 2:"
  },
  {
    "objectID": "Chp3/18-Stability-of-Equilibrium.html#sec-18quest3",
    "href": "Chp3/18-Stability-of-Equilibrium.html#sec-18quest3",
    "title": "3.5: Stability of Equilibria",
    "section": "Question 3:",
    "text": "Question 3:\n\nMatch the vector fields labeled A-F with a system of differential equations whose matrix of coefficients has the given eigenvalues.\n\n\n\n\n\n\n\nEigenvalues of matrix of coefficients\nLabel of corresponding phase plane\n\n\n\n\n\\[\\lambda_1  = 4 \\mbox{ and } \\lambda_2=1\\]\nEnter letter of matching graph\n\n\n\\[\\lambda_1  = -4 \\mbox{ and } \\lambda_2=-2\\]\nEnter letter of matching graph\n\n\n\\[\\lambda  = 9 \\mbox{ repeated } \\]\nEnter letter of matching graph\n\n\n\\[\\lambda  = \\pm 2i \\]\nEnter letter of matching graph\n\n\n\\[\\lambda  = 3 \\pm 2i \\]\nEnter letter of matching graph\n\n\n\\[\\lambda  = -3 \\pm 2i \\]\nEnter letter of matching graph\n\n\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nC\nD\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nE\nF\n\n\n\n\n\n\n\n\n\n\nSolution to Question 3:\n\n\n Express your answers by completing the table above."
  },
  {
    "objectID": "Chp3/18-Stability-of-Equilibrium.html#sec-18quest4",
    "href": "Chp3/18-Stability-of-Equilibrium.html#sec-18quest4",
    "title": "3.5: Stability of Equilibria",
    "section": "Question 4:",
    "text": "Question 4:\n\nBased on your answers in Question 3, explain how the eigenvalues can be used to determine whether the equilibrium at the origin is stable or unstable? What happens when the matrix of coefficients has complex eigenvalues?\n\nSolution to Question 4:"
  },
  {
    "objectID": "Chp3/19-Nonlinear-Systems.html",
    "href": "Chp3/19-Nonlinear-Systems.html",
    "title": "3.6: Dynamics of Non-Linear Systems",
    "section": "",
    "text": "Motion of a Pendulum\nA mass \\(m\\) is attached to a point on the ceiling by a rod with length \\(L\\), and it is allowed to swing along a circlular path.\nImage Credit: Chetvorno, Public domain, via Wikimedia Commons\nIf a pendulum is displaced from its equilibrium position, gravity will move the mass back towards its equilibrium position.\nThere are two forces acting on bob of the pendulum:\nThe force generated by the bob at the end of the pendulum is given by:\n\\[F = {\\color{dodgerblue}{m}}a = {\\color{dodgerblue}{m}} \\frac{d^2s}{dt^2} = {\\color{dodgerblue}{m}} \\left( {\\color{mediumseagreen}{L}} \\frac{d^2 \\theta}{dt^2} \\right).\\]\nBy balancing the forces, we get the following model for the motion of the simple pendulum:\n\\[\\frac{d^2 \\theta}{dt^2} + \\frac{\\color{tomato}{b}}{\\color{dodgerblue}{m}}  \\frac{d\\theta}{dt} + \\frac{\\color{mediumseagreen}{g}}{\\color{mediumseagreen}{L}} \\sin{\\theta}=0.\\]\nWe can perform linear stability analysis on a system of two or more variables, such as the one in the previous pendulum question. Consider a function \\(f(x,y)\\), then recall from multivariable calculus we find a formula for the linearization of \\(f(x,y)\\) around the point \\((x_0,y_0)\\) using the formula:\n\\[f(x,y) \\approx L(x,y) = f(x_0,y_0) + f_x(x_0,y_0)({\\color{dodgerblue}{x-x_0}}) + f_y(x_0,y_0)({\\color{tomato}{y-y_0}}).\\]\n\\[f(x,y) \\approx L({\\color{dodgerblue}{u}}, {\\color{tomato}{v}}) = f(x_0,y_0) + f_x(x_0,y_0){\\color{dodgerblue}{u}} + f_y(x_0,y_0){\\color{tomato}{v}}.\\]\nIn the code cells below:\nImage credit: Jacopo Bertolotti, CC0, via Wikimedia Commons\nExploring Differential Equations by Adam Spiegler is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Based on a work at https://github.com/CU-Denver-MathStats-OER/ODEs and original content created by Rasmussen, C., Keene, K. A., Dunmyre, J., & Fortune, N. (2018). Inquiry oriented differential equations: Course materials. Available at https://iode.sdsu.edu."
  },
  {
    "objectID": "Chp3/19-Nonlinear-Systems.html#sec-19quest1",
    "href": "Chp3/19-Nonlinear-Systems.html#sec-19quest1",
    "title": "3.6: Dynamics of Non-Linear Systems",
    "section": "Question 1:",
    "text": "Question 1:\n\nFor each of the initial conditions given below, answer the following questions.\n\nDescribe how both the pendulum’s position and angular velocity change over time.\nSketch a possible graph to illustrate the relation between \\(\\theta\\) and \\(v\\) over time.\n\nPlot values of \\(\\theta\\) on the horizontal axis.\nPlot values of \\(v\\) on the vertical axis.\n\nIf you need a hint or want to check your work, see Hint for Question 1.\n\n\nQuestion 1a:\n\nInitial conditions \\(\\theta(0)=\\frac{\\pi}{6}\\) and \\(v(0)=0\\).\n\nSolution to Question 1a:\n\n\n\n\n\n\n\nQuestion 1b:\n\nInitial conditions \\(\\theta(0)= -\\frac{5 \\pi}{6}\\) and \\(v(0)=0\\).\n\nSolution to Question 1b:\n\n\n\n\n\n\n\nQuestion 1c:\n\nInitial conditions \\(\\theta(0)=0\\) and \\(v(0)=0.05\\) radians per second (very small velocity).\n\nSolution to Question 1c:\n\n\n\n\n\n\n\nQuestion 1d:\n\nInitial conditions \\(\\theta(0)=0\\) and \\(v(0)=50\\) radians per second (very large velocity).\n\nSolution to Question 1d:"
  },
  {
    "objectID": "Chp3/19-Nonlinear-Systems.html#sec-19quest2",
    "href": "Chp3/19-Nonlinear-Systems.html#sec-19quest2",
    "title": "3.6: Dynamics of Non-Linear Systems",
    "section": "Question 2:",
    "text": "Question 2:\n\nHow many equilibrium solutions does a pendulum have?\n\nWhere are the equilibrium located in the \\(\\theta v\\)-plane where we plotted solutions in Question 1?\nHow would you classify the stablility of the equilibrium?\n\n\nSolution to Question 2:"
  },
  {
    "objectID": "Chp3/19-Nonlinear-Systems.html#a-non-linear-differential-equation",
    "href": "Chp3/19-Nonlinear-Systems.html#a-non-linear-differential-equation",
    "title": "3.6: Dynamics of Non-Linear Systems",
    "section": "A Non-Linear Differential Equation",
    "text": "A Non-Linear Differential Equation\n\nIf we let \\(v = \\frac{d \\theta}{dt}\\) denote the velocity of the pendulum, set the length \\(\\color{mediumseagreen}{L = g= 9.8}\\), mass \\(\\color{dodgerblue}{m=5}\\) and damping coefficient \\(\\color{tomato}{b=1}\\), the second-order differential equation above becomes\n\\[\\frac{d^2 \\theta}{dt^2} + 0.2 \\frac{d \\theta}{dt} + {\\color{tomato}{\\sin{\\theta}}} = 0.\\]\n\nNote this almost looks like a mass-spring system \\(my'' + by' + ky = 0\\).\nIf the last term \\(\\color{tomato}{\\sin{\\theta}}\\) was \\(\\theta\\) instead, we would have the same dynamics.\nThe \\(\\color{tomato}{\\sin{\\theta}}\\) term means the differential equation is non-linear."
  },
  {
    "objectID": "Chp3/19-Nonlinear-Systems.html#expressing-as-a-system-of-first-order-differential-equations",
    "href": "Chp3/19-Nonlinear-Systems.html#expressing-as-a-system-of-first-order-differential-equations",
    "title": "3.6: Dynamics of Non-Linear Systems",
    "section": "Expressing as a System of First Order Differential Equations",
    "text": "Expressing as a System of First Order Differential Equations\n\nIf we let \\(\\color{dodgerblue}{\\dfrac{d \\theta}{dt}=v}\\), then we have \\(\\color{tomato}{\\dfrac{d^2 \\theta}{dt^2}=\\dfrac{dv}{dt}}\\), and the second order differential equation \\({\\color{tomato}{\\dfrac{d^2 \\theta}{dt^2}}} + 0.2 {\\color{dodgerblue}{\\dfrac{d \\theta}{dt}}} + \\sin{\\theta} = 0\\) can be rewritten as a first order differntial equation.\n\\[{\\color{tomato}{\\frac{dv}{dt}}} + 0.2 {\\color{dodgerblue}{v}} + \\sin{\\theta} = 0.\\]\nThus, the second order differential equation is equivalent to the non-linear system of two first order differential equations:\n\\[\\begin{align}\n\\color{dodgerblue}{\\frac{d\\theta}{dt}} & \\color{dodgerblue}{=v} \\\\\n{\\color{tomato}{\\frac{dv}{dt}}} &=-0.2{\\color{dodgerblue}{v}}-\\sin(\\theta)\n\\end{align}\\]"
  },
  {
    "objectID": "Chp3/19-Nonlinear-Systems.html#sec-19quest3",
    "href": "Chp3/19-Nonlinear-Systems.html#sec-19quest3",
    "title": "3.6: Dynamics of Non-Linear Systems",
    "section": "Question 3:",
    "text": "Question 3:\n\nThe system of differential equations for the pendulum has how many equilibrium solutions?\n\nWhat are the equilibrium? Give answers as pairs \\((\\theta, v)\\).\nBased on your intuition with pendulums, determine whether each equilibrium is stable, unstable, or semi-stable?\nHow do your answers compare with your answers to Question 2?\n\n\\[\\begin{align}\n\\frac{d\\theta}{dt} & =v \\\\\n\\frac{dv}{dt} &=-0.2v-\\sin(\\theta)\n\\end{align}\\]\n\nSolution to Question 3:"
  },
  {
    "objectID": "Chp3/19-Nonlinear-Systems.html#sec-19quest4",
    "href": "Chp3/19-Nonlinear-Systems.html#sec-19quest4",
    "title": "3.6: Dynamics of Non-Linear Systems",
    "section": "Question 4:",
    "text": "Question 4:\n\nYou might recall that if \\(\\theta\\) is small, \\(\\sin(\\theta) \\approx \\theta\\). Explain why this is true and then use this fact to approximate the above system with a linear system and classify the equilibrium solution at the origin.\n\nSolution to Question 4:"
  },
  {
    "objectID": "Chp3/19-Nonlinear-Systems.html#sec-19quest5",
    "href": "Chp3/19-Nonlinear-Systems.html#sec-19quest5",
    "title": "3.6: Dynamics of Non-Linear Systems",
    "section": "Question 5:",
    "text": "Question 5:\n\nIf initially we push the mass with velocity \\(v\\) from its equilibrium position \\(\\theta=0\\), approxiamte the range of initial velocities \\(v\\) that will result in the pendulum making exactly one complete rotation before eventually coming to rest.\n\nSolution to Question 5:\n\nIf needed, change the initial conditions and view window for the phase plane plot!\n\n\n\n\n#############################################################\n# Be sure you first set your file path to ode_tools module\n# See Appendix I to set your path\n#############################################################\n\nfrom ode_tools import plot_phase_sol  # Only need to import one time.\nimport numpy as np  # only need to import once\n\n\n# Set viewing window\n\nx = np.linspace(-10.0, 10.0, 21)  # theta is horizontal axis\ny = np.linspace(-4.0, 4.0, 21)  # v is vertical axis\n\n# Define system of odes\ndef f(Y, t):\n    x, y = Y\n    return [y , -0.2*y - np.sin(x)]  # enter f_1(theta, v) and f_2(theta ,v)\n\n# Enter range of time\ntspan = np.linspace(0, 50, 200) # range of time to visualize solution\n\n# Enter initial values\nx0 = 0  # initial value of theta is set to 0\ny0 = 3  # initial value of v\n\n# Plots a solution in phase plane\nplot_phase_sol(x, y, f, tspan, x0, y0)"
  },
  {
    "objectID": "Chp3/19-Nonlinear-Systems.html#sec-19quest6",
    "href": "Chp3/19-Nonlinear-Systems.html#sec-19quest6",
    "title": "3.6: Dynamics of Non-Linear Systems",
    "section": "Question 6:",
    "text": "Question 6:\n\nBased on the phase plane portraits you explored in Question 5, do you believe the equilibrium at \\((\\theta, v) = (\\pi, 0)\\) is stable, unstable, or semi-stable? Is this analysis consisten with your intuition?\n\nSolution to Question 6:"
  },
  {
    "objectID": "Chp3/19-Nonlinear-Systems.html#linearizing-a-system-at-an-equilibrium",
    "href": "Chp3/19-Nonlinear-Systems.html#linearizing-a-system-at-an-equilibrium",
    "title": "3.6: Dynamics of Non-Linear Systems",
    "section": "Linearizing a System at an Equilibrium",
    "text": "Linearizing a System at an Equilibrium\n\nLet \\((x_0, y_0)\\) be an equilibrium of the system\n\\[\\begin{align}\n\\frac{dx}{dt} &= f(x,y) \\\\\n\\frac{dy}{dt} &= g(x,y)\n\\end{align}.\\]\n\nIf we linearize at an equilibrium at \\((x_0, y_0)\\), then both \\(f(x_0, y_0) =0\\) and \\(g(x_0, y_0) =0\\).\nThe resulting linearizations \\(L_g\\) and \\(L_f\\) for \\(f\\) and \\(g\\), respectively will be of the form\n\n\\[L_f(u,v) = {\\color{dodgerblue}{f_x(x_0, y_0)}}u + {\\color{tomato}{f_y(x_0, y_0)}}v = {\\color{dodgerblue}{a}}u + {\\color{tomato}{b}}v \\qquad \\mbox{and} \\qquad\nL_g(u,v) = {\\color{mediumseagreen}{g_x(x_0, y_0)}}u + {\\color{mediumpurple}{g_y(x_0, y_0)}}v = {\\color{mediumseagreen}{c}}u + {\\color{mediumpurple}{d}}v\\]\nThe linearized system of differential equations at equilibrium \\((x_0,y_0)\\) is therefore\n\\[\\begin{align}\n\\frac{dx}{dt} &= L_f(u,v) = {\\color{dodgerblue}{a}}u+{\\color{tomato}{b}}v\\\\\n\\frac{dy}{dt} &= L_g(u,v) = {\\color{mediumseagreen}{c}}u + {\\color{mediumpurple}{d}}v\n\\end{align}.\\]\nOur derivatives are expressed with respect to the original variables \\(x\\) and \\(y\\), but the equations are now expressed with respect to variables \\(u\\) and \\(v\\). We have one last substitution to perform.\n\\[\\mbox{if } u = x - x_0 \\mbox{, then } \\dfrac{du}{dt} = \\dfrac{dx}{dt} \\qquad \\mbox{similarly} \\qquad \\mbox{if } v = y - y_0 \\mbox{, then } \\dfrac{dv}{dt} = \\dfrac{dy}{dt}.\\]\nThus, we obtain a linearized system of differential equations:\n\\[\\begin{align}\n\\frac{du}{dt} &= {\\color{dodgerblue}{a}}u + {\\color{tomato}{b}}v\\\\\n\\frac{dv}{dt} &= {\\color{mediumseagreen}{c}}u + {\\color{mediumpurple}{d}}v\n\\end{align}.\\]\n\nThe behavior of the non-linear system near equilibrium \\((x_0, y_0)\\) is the same as the behavior of the linearized system near the origin \\((0,0)\\).\nThe linearized system near \\((x_0, y_0)\\) cannot be used to analyze solutions that are not close \\((x_0, y_0)\\)."
  },
  {
    "objectID": "Chp3/19-Nonlinear-Systems.html#expressing-the-linearized-system-in-matrix-form",
    "href": "Chp3/19-Nonlinear-Systems.html#expressing-the-linearized-system-in-matrix-form",
    "title": "3.6: Dynamics of Non-Linear Systems",
    "section": "Expressing the Linearized System in Matrix Form",
    "text": "Expressing the Linearized System in Matrix Form\n\nWe can express the linearized system in matrix form\n\\[\\begin{array}{l}\n& \\dfrac{du}{dt} = {\\color{dodgerblue}{a}}u + {\\color{tomato}{b}}v\\\\\n& \\dfrac{dv}{dt} = {\\color{mediumseagreen}{c}}u + {\\color{mediumpurple}{d}}v\n\\end{array}\n\\qquad \\longrightarrow \\qquad\n\\begin{bmatrix}\n\\frac{du}{dt} \\\\\n\\frac{dv}{dt}\n\\end{bmatrix} =\n\\begin{bmatrix}\n{\\color{dodgerblue}{a}} & {\\color{tomato}{b}} \\\\\n{\\color{mediumseagreen}{c}} & {\\color{mediumpurple}{d}}\n\\end{bmatrix}\n\\begin{bmatrix} u \\\\ v \\end{bmatrix}.\\]\nThe coefficients of the linearized system of differential equations are the partial derivatives of \\(f\\) and \\(g\\) evaluated at the equilibrium \\((x_0, y_0)\\):\n\\[{\\color{dodgerblue}{a=f_x(x_0, y_0)}}, \\qquad {\\color{tomato}{b=f_y(x_0, y_0)}}, \\qquad {\\color{mediumseagreen}{c=g_x(x_0, y_0)}}, \\qquad {\\color{mediumpurple}{d=g_y(x_0, y_0)}}.\\]\nTherefore, the linearized system of differential equations can be written as\n\\[\\begin{bmatrix}\n\\frac{du}{dt} \\\\\n\\frac{dv}{dt}\n\\end{bmatrix} =\n\\begin{bmatrix}\n{\\color{dodgerblue}{f_x(x_0, y_0)}} & {\\color{tomato}{f_y(x_0, y_0)}} \\\\\n{\\color{mediumseagreen}{g_x(x_0, y_0)}} & {\\color{mediumpurple}{g_y(x_0, y_0)}}\n\\end{bmatrix}\n\\begin{bmatrix} u \\\\ v \\end{bmatrix}\\]\n\nThe Jacobian Matrix\n\nThe matrix\n\\[J_{(x_0, y_0)} = \\begin{bmatrix}\n{\\color{dodgerblue}{f_x(x_0, y_0)}} & {\\color{tomato}{f_y(x_0, y_0)}} \\\\\n{\\color{mediumseagreen}{g_x(x_0, y_0)}} & {\\color{mediumpurple}{g_y(x_0, y_0)}}\n\\end{bmatrix}\\]\nis called the Jacobian matrix."
  },
  {
    "objectID": "Chp3/19-Nonlinear-Systems.html#stability-analysis-for-non-linear-systems",
    "href": "Chp3/19-Nonlinear-Systems.html#stability-analysis-for-non-linear-systems",
    "title": "3.6: Dynamics of Non-Linear Systems",
    "section": "Stability Analysis for Non-Linear Systems",
    "text": "Stability Analysis for Non-Linear Systems\n\nConsider a non-linear system of first order differential equations\n\\[\\begin{align}\n\\frac{dx}{dt} &= f(x,y) \\\\\n\\frac{dy}{dt} &= g(x,y)\n\\end{align}.\\]\nStep 1: Find all equilibrium points.\nStep 2: Find expressions for Partial Derivatives \\(f_x\\), \\(f_y\\), \\(g_x\\), and \\(g_y\\).\nStep 3: Find the Jacobian matrix for a selected equilibrium \\((x_0, y_0)\\).\nStep 4: Find eigenvalues and eigenvectors for the Jacobian to sketch the phase plane near \\((x_0, y_0)\\).\nRepeat for all equilibrium if desired."
  },
  {
    "objectID": "Chp3/19-Nonlinear-Systems.html#sec-19quest7",
    "href": "Chp3/19-Nonlinear-Systems.html#sec-19quest7",
    "title": "3.6: Dynamics of Non-Linear Systems",
    "section": "Question 7:",
    "text": "Question 7:\n\nConsider the system of differential equations\n\\[\\begin{align}\n\\frac{dx}{dt} &= 1-x^2 \\\\\n\\frac{dy}{dt} &= -3x -3y.\n\\end{align}\\]\nNote the system has two equilibria, at \\((1,-1)\\) and \\((-1,1)\\). Linearize the system at \\((1,-1)\\), and determine whether the equilibrium is stable, unstable, or semi-stable.\n\nSolution to Question 7:"
  },
  {
    "objectID": "Chp3/19-Nonlinear-Systems.html#sec-19quest8",
    "href": "Chp3/19-Nonlinear-Systems.html#sec-19quest8",
    "title": "3.6: Dynamics of Non-Linear Systems",
    "section": "Question 8:",
    "text": "Question 8:\n\nConsider the system of differential equations\n\\[\\begin{align}\n\\frac{dx}{dt} &= 1-x^2 \\\\\n\\frac{dy}{dt} &= -3x -3y.\n\\end{align}\\]\nLinearize the system at the other equilibrium \\((-1,1)\\), and determine whether that equilibrium is stable, unstable, or semi-stable.\n\nSolution to Question 8:"
  },
  {
    "objectID": "Chp3/19-Nonlinear-Systems.html#sec-19quest9",
    "href": "Chp3/19-Nonlinear-Systems.html#sec-19quest9",
    "title": "3.6: Dynamics of Non-Linear Systems",
    "section": "Question 9:",
    "text": "Question 9:\n\nConsider again\n\\[\\begin{align}\n\\frac{dx}{dt} &= 1-x^2 \\\\\n\\frac{dy}{dt} &= -3x -3y\n\\end{align}\\]\nCombine your results from Question 7 and Question 8, to sketch a possible phase plane for the system of differential equations.\n\nDoes an analysis of the system using nullclines corroborate your linear stability analysis?\nSketch the phase plane portrait using the phase_portrait function.\n\n\nSolution to Question 9:\n\n\n\n\n\n#from ode_tools import phase_portrait  # only need to import one time\n#import numpy as np  # only need to import one time\n\n# Set viewing window\nx = np.linspace(-5.0, 5.0, 21)  \ny = np.linspace(-5.0, 5.0, 21)\n\ndef f(Y, t):\n    x, y = Y\n    return [??,\n            ??]  \n\n# Plots a phase portrait\nphase_portrait(x, y, f)"
  },
  {
    "objectID": "Chp3/19-Nonlinear-Systems.html#sec-19quest10",
    "href": "Chp3/19-Nonlinear-Systems.html#sec-19quest10",
    "title": "3.6: Dynamics of Non-Linear Systems",
    "section": "Question 10:",
    "text": "Question 10:\n\nUse linear stability analysis to classify the critical points you found in the pendulum system.\n\\[\\begin{align}\n\\frac{d\\theta}{dt} &=v \\\\\n\\frac{dv}{dt} &= -0.2v - \\sin(\\theta)\n\\end{align}\\]\n\nSolution to Question 10:"
  },
  {
    "objectID": "Chp3/19-Nonlinear-Systems.html#sec-19quest11",
    "href": "Chp3/19-Nonlinear-Systems.html#sec-19quest11",
    "title": "3.6: Dynamics of Non-Linear Systems",
    "section": "Question 11:",
    "text": "Question 11:\n\nUse linear stability analysis to classify each of the critical points for the system of differential equations below.\n\\[\\begin{align}\n\\dfrac{dx}{dt} &= 4x-2xy\\\\\n\\dfrac{dy}{dt} &= 6y+2xy\n\\end{align}\\]\n\nSolution to Question 11:"
  },
  {
    "objectID": "Chp3/19-Nonlinear-Systems.html#sec-LoadModule",
    "href": "Chp3/19-Nonlinear-Systems.html#sec-LoadModule",
    "title": "3.6: Dynamics of Non-Linear Systems",
    "section": "Loading ode_tools from GitHub",
    "text": "Loading ode_tools from GitHub\n\n\nRun the code cell below to load the most up to date modules stored in GitHub.\nYou will only need to run this code cell one time during an active session.\n\n\n!pip install git+https://github.com/CU-Denver-MathStats-OER/ODEs\nfrom IPython.display import clear_output\nclear_output()"
  },
  {
    "objectID": "Chp3/19-Nonlinear-Systems.html#plot-phase-portrait-with-phase_portrait",
    "href": "Chp3/19-Nonlinear-Systems.html#plot-phase-portrait-with-phase_portrait",
    "title": "3.6: Dynamics of Non-Linear Systems",
    "section": "Plot Phase Portrait with phase_portrait",
    "text": "Plot Phase Portrait with phase_portrait\n\n\nImporting the phase_portrait Plotting Function\n\nAfter you run the code cell above to load the ode_tools module from GitHub you are now ready to import the phase_portrait function.\n\nfrom utils.ode_tools import phase_portrait  # Only need to import one time.\n\n\n\nDefining the System of Differential Equations\n\nWe use \\(x\\) and \\(y\\) as the generic symbols for the two dependent variables.\n\\[\\begin{align}\n\\frac{dx}{dt} &= f_1(x, y)\\\\\n\\frac{dy}{dt} &= f_2(x, y)\n\\end{align}\\]\nBelow, we enter the system we analyzed in Question 3.\n\\[\\begin{aligned}\n\\frac{d\\theta}{dt} &=v \\\\\n\\frac{dv}{dt} &= -0.2v - \\sin{\\theta}\n\\end{aligned}\\]\n\nimport numpy as np\n\n# Set viewing window\n\nx = np.linspace(-10.0, 10.0, 21)  # theta is horizontal axis\ny = np.linspace(-2.0, 2.0, 21)  # v is vertical axis\n\ndef f(Y, t):\n    x, y = Y\n    return [y , -0.2*y - np.sin(x)]  # enter f_1(theta, v) and f_2(theta ,v)\n\n\n\nPlotting with phase_portrait\n\n\n# Plots a phase portrait\nphase_portrait(x, y, f)"
  },
  {
    "objectID": "Chp3/19-Nonlinear-Systems.html#plot-phase-portrait-with-plot_phase_sol",
    "href": "Chp3/19-Nonlinear-Systems.html#plot-phase-portrait-with-plot_phase_sol",
    "title": "3.6: Dynamics of Non-Linear Systems",
    "section": "Plot Phase Portrait with plot_phase_sol",
    "text": "Plot Phase Portrait with plot_phase_sol\n\n\nImporting the plot_phase_sol Plotting Function\n\nAfter you have loaded the ode_tools module from GitHub you are now ready to import the phase_portrait_sol function.\n\nfrom utils.ode_tools import plot_phase_sol  # Only need to import one time.\n\n\n\nDefining the System of Differential Equations and Initial Conditions\n\nBelow, we enter the system we analyzed in Question 1a with initial conditions \\(\\theta(0) = \\frac{\\pi}{6}\\) and \\(v(0)=0\\).\n\\[\\begin{aligned}\n\\frac{d\\theta}{dt} &= v \\\\\n\\frac{dv}{dt} &=-0.2v - \\sin{\\theta}\n\\end{aligned}\\]\n\nimport numpy as np\n\n# Set viewing window\n\nx = np.linspace(-3, 3, 21)  # theta is horizontal axis\ny = np.linspace(-1.0, 1.0, 21)  # v is vertical axis\n\ndef f(Y, t):\n    x, y = Y\n    return [y , -0.2*y - np.sin(x)]  # enter f_1(theta, v) and f_2(theta ,v)\n\n# Enter range of time\ntspan = np.linspace(0, 50, 200) # range of time to visualize solution\n\n# Enter initial values\nx0 = np.pi / 6  # initial value of theta\ny0 = 0  # initial value of v\n\n\n\nPlotting with phase_portrait_sol\n\n\n# Plots a phase portrait\nplot_phase_sol(x, y, f, tspan, x0, y0)"
  },
  {
    "objectID": "Chp3/Phase-Portraits-Tutorial.html",
    "href": "Chp3/Phase-Portraits-Tutorial.html",
    "title": "Python Tutorial for Phase Planes",
    "section": "",
    "text": "Section 1: Loading ode_tools from GitHub\n!pip install git+https://github.com/CU-Denver-MathStats-OER/ODEs\nfrom IPython.display import clear_output\nclear_output()\nA function named phase_portrait() plots a phase plane portrait (vector field) for a system of first order differential equations over a specified range of values for the dependent variables \\(x\\) and \\(y\\).\nA function named plot_phase_sol plots particular solutions in a phase plane portrait (vector field) for a system of first order differential equations over a specified range of values for the indpendent and dependent variables.\nExploring Differential Equations by Adam Spiegler is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. Python scripts created by Jonathon Hirschi, Troy Butler, and Adam Spiegler."
  },
  {
    "objectID": "Chp3/Phase-Portraits-Tutorial.html#how-to-plot-with-phase_portraitx-y-f",
    "href": "Chp3/Phase-Portraits-Tutorial.html#how-to-plot-with-phase_portraitx-y-f",
    "title": "Python Tutorial for Phase Planes",
    "section": "How to Plot with phase_portrait(x, y, f)",
    "text": "How to Plot with phase_portrait(x, y, f)\n\nConsider plotting the system the of differential equations below in the phase plane with a window of \\(0 \\leq x \\leq 5\\) and \\(0 \\leq y \\leq 5\\).\n\\[\\begin{array}{l}\n\\dfrac{dx}{dt} = 3x-1.4xy \\\\\n\\dfrac{dy}{dt} = -y + 0.8xy\\\\\n\\end{array}\\]\n\nInput vectors of values for the dependent variables x and y.\n\nIn the code cell below, we set up a grid of equally spaced values along the intervals \\(0 \\leq x \\leq 5\\) and \\(0 \\leq y \\leq 5\\).\n\nDefine the system of two differential equations f(Y,t).\n\nIn the code cell below, we enter the system of differential equations above.\n\nThe formula for \\(\\frac{dx}{dt}=3x-1.4xy\\) is entered as 3*x - 1.4*x*y.\nThe formula for \\(\\frac{dy}{dt}=-y+0.8xy\\) is entered as -y + 0.8*x*y.\n\n\n\nimport numpy as np\n\n# Set plot range\nx = np.linspace(0.0, 5.0, 20)  # range of values for x\ny = np.linspace(0.0, 5.0, 20)  # range of values for y\n\n# Enter differential equation\ndef f(Y, t):\n    x, y = Y\n    return [3*x - 1.4*x*y,  # formula for dx/dt\n            -y + 0.8*x*y]  # formula for dy/dt\n\n\nImport the phase_portrait function.\n\n\nLike packages, you only need to import a function one time after opening a notebook.\nBe sure you have first loaded ode_tools.py from GitHub..\nIf you get an error message, it is likely you forgot to first load the ode_tools module from GitHub. See Section 1: Loading ode_tools from GitHub\n\n\nfrom utils.ode_tools import phase_portrait  # Only need to import one time.\n\n\nWe generate the slope field by running the function with the command phase_portrait(x, y, f).\n\n\n# Plots a phase portrait\n\nphase_portrait(x, y, f)"
  },
  {
    "objectID": "Chp3/Phase-Portraits-Tutorial.html#each-time-you-want-to-plot-a-new-solution",
    "href": "Chp3/Phase-Portraits-Tutorial.html#each-time-you-want-to-plot-a-new-solution",
    "title": "Python Tutorial for Phase Planes",
    "section": "Each time you want to plot a new solution:",
    "text": "Each time you want to plot a new solution:\n\n\nRedefine x, y, and f(Y, t) as needed.\nThen run the command phase_portrait(x, y, f)."
  },
  {
    "objectID": "Chp3/Phase-Portraits-Tutorial.html#how-to-plot-with-plot_phase_solx-y-f-tspan-x0-y0",
    "href": "Chp3/Phase-Portraits-Tutorial.html#how-to-plot-with-plot_phase_solx-y-f-tspan-x0-y0",
    "title": "Python Tutorial for Phase Planes",
    "section": "How to Plot with plot_phase_sol(x, y, f, tspan, x0, y0)",
    "text": "How to Plot with plot_phase_sol(x, y, f, tspan, x0, y0)\n\nConsider plotting the solution to the system the of differential equations below with initial condition \\((x(0),y(0)) = (2,3)\\) in the phase plane with over a window of \\(0 \\leq x \\leq 5\\) and \\(0 \\leq y \\leq 5\\).\n\\[\\begin{array}{l}\n\\dfrac{dx}{dt} = 3x-1.4xy \\\\\n\\dfrac{dy}{dt} = -y + 0.8xy\\\\\n\\end{array}\\]\n\nInput vectors of values for the dependent variables x and y.\n\nIn the code cell below, we set up a grid of equally spaced values along the intervals \\(0 \\leq x \\leq 5\\) and \\(0 \\leq y \\leq 5\\).\n\nDefine the system of two differential equations f(Y,t).\n\nIn the code cell below, we enter the system of differential equations above.\n\nThe formula for \\(\\frac{dx}{dt}=3x-1.4xy\\) is entered as 3*x - 1.4*x*y.\nThe formula for \\(\\frac{dy}{dt}=-y+0.8xy\\) is entered as -y + 0.8*x*y.\n\nEnter the range of time over which the solution will be plotted using tspan.\nEnter the initial value for \\(x\\) at \\(t=0\\) as x0.\nEnter the initial value for \\(y\\) at \\(t=0\\) as y0.\n\n\nimport numpy as np\n\n# Set plot range\nx = np.linspace(0.0, 5.0, 20)  # range of values for x\ny = np.linspace(0.0, 5.0, 20)  # range of values for y\n\n# Enter differential equation\ndef f(Y, t):\n    x, y = Y\n    return [3*x - 1.4*x*y,  # formula for dx/dt\n            -y + 0.8*x*y]  # formula for dy/dt\n\n# Enter range of time\ntspan = np.linspace(0, 50, 200) # range of time to visualize solution\n\n# Enter initial values\nx0 = 2  # initial value of x\ny0 = 3  # initial value of y\n\n\nImport the plot_phase_sol function.\n\n\nLike packages, you only need to import a function one time after opening a notebook.\nBe sure you have first loaded ode_tools.py from GitHub..\nIf you get an error message, it is likely you forgot to first load the ode_tools module from GitHub. See Section 1: Loading ode_tools from GitHub\n\n\nfrom utils.ode_tools import plot_phase_sol  # Only need to import one time.\n\n\nWe generate the slope field by running the function with the command plot_phase_sol(x, y, f, tspan, x0, y0).\n\n\n# Plots a solution in a phase plane portrait\n\nplot_phase_sol(x, y, f, tspan, x0, y0)"
  },
  {
    "objectID": "Chp3/Phase-Portraits-Tutorial.html#each-time-you-want-to-plot-a-new-solution-1",
    "href": "Chp3/Phase-Portraits-Tutorial.html#each-time-you-want-to-plot-a-new-solution-1",
    "title": "Python Tutorial for Phase Planes",
    "section": "Each Time You Want To Plot A New Solution:",
    "text": "Each Time You Want To Plot A New Solution:\n\n\nRedefine x, y, f(Y, t), tspan, x0, and y0 as needed.\nThen run the command plot_phase_sol(x, y, f, tspan, x0, y0)."
  },
  {
    "objectID": "Chp4/20-Introduction-to-Laplace-Transforms.html",
    "href": "Chp4/20-Introduction-to-Laplace-Transforms.html",
    "title": "4.1: Introduction to Laplace Transforms",
    "section": "",
    "text": "Improper Integrals\nThe improper integral of \\(g\\) over \\(\\lbrack a , \\infty )\\) is defined as\n\\[ \\int_a^{\\infty} g(t) \\ dt = \\lim_{N \\to \\infty} \\int_a^N g(t) \\ dt.\\]\nLet \\(f(t)\\) be a function on \\(\\lbrack 0 , \\infty )\\). The Laplace transform of \\(f\\) is the function \\(F\\) defined by\n\\[\\Large{\\color{dodgerblue}{ \\mathscr{L} \\left\\{ f \\right\\} = F(s) = \\int_0^{\\infty} e^{-st}f(t) \\ dt}} .\\]\nWe can use the sympy.laplace_transform() function from the SymPy library to check our work.\nBelow is a table of common Laplace transforms pairs. You can now verify each of these using Python!\nExploring Differential Equations by Adam Spiegler is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Based on a work at https://github.com/CU-Denver-MathStats-OER/ODEs and original content created by Rasmussen, C., Keene, K. A., Dunmyre, J., & Fortune, N. (2018). Inquiry oriented differential equations: Course materials. Available at https://iode.sdsu.edu."
  },
  {
    "objectID": "Chp4/20-Introduction-to-Laplace-Transforms.html#sec-20quest1",
    "href": "Chp4/20-Introduction-to-Laplace-Transforms.html#sec-20quest1",
    "title": "4.1: Introduction to Laplace Transforms",
    "section": "Question 1:",
    "text": "Question 1:\n\nUsing calculus (not Python), determine whether the integral converges or diverges. Be sure you justify the steps in your work.\n\\[\\int_0^{\\infty} e^{-0.2t} \\ dt\\]\n\nSolution to Question 1:"
  },
  {
    "objectID": "Chp4/20-Introduction-to-Laplace-Transforms.html#sec-20quest2",
    "href": "Chp4/20-Introduction-to-Laplace-Transforms.html#sec-20quest2",
    "title": "4.1: Introduction to Laplace Transforms",
    "section": "Question 2:",
    "text": "Question 2:\n\nUse the Python widget generated by the code cells below to demonstrate whether the improper integral converges or diverges. Explain how you determined your answer using the widget.\n\\[\\int_0^{\\infty} e^{-0.2t} \\ dt\\]\n\nSolution to Question 2:\n\n\n Run (do not edit) the 3 code cells below. Once the widget has opened, use the slider to change the upper limit of the integral. Click the “Run Interact” button to calculate the definite integral and plot the result. \n\n\n#########################\n# Do not edit!\n# Just run the code cell\n#########################\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport sympy as sym\nfrom sympy.abc import s,t\n\ndef my_fun(x):  \n    return np.exp(-0.2*x)\n\ndef plot_int(f, t0=0, t1=1, tmax=30):\n    x = np.linspace(t0, tmax, 1000)\n    ans = sym.integrate(sym.exp(-0.2*t), (t,0,t1))\n    plt.plot(x, my_fun(x))\n    plt.fill_between(x, my_fun(x), 0,  \n                     where = (x &gt;= t0) & (x &lt;= t1),\n                     color = 'orange')\n    plt.show()\n    return print(\"Area is approx. \", ans)\n\n\n#########################\n# Do not edit!\n# Just run the code cell\n#########################\n\nfrom ipywidgets import interact, interactive, fixed, interact_manual\nimport ipywidgets as widgets\n\n# A special thing from colab to enable widgets\n#from google.colab import output\n#output.enable_custom_widget_manager()\n\n\n################################\n# DO NOT EDIT this code cell\n# Simply Run this code cell \n# Then click on \"Run Interact\" \n# To approx the definite integral\n##################################\n\ninteract_manual(plot_int, \n                f=fixed(my_fun),\n                t0=fixed(0),\n                t1=widgets.FloatSlider(min=0.1, max=30.0, step=0.1, value=1),\n                tmax=fixed(30))"
  },
  {
    "objectID": "Chp4/20-Introduction-to-Laplace-Transforms.html#sec-20quest3",
    "href": "Chp4/20-Introduction-to-Laplace-Transforms.html#sec-20quest3",
    "title": "4.1: Introduction to Laplace Transforms",
    "section": "Question 3:",
    "text": "Question 3:\n\nUse the Python widget generated by the code cells below to demonstrate whether the integral converges or diverges. Then verify your results using calculus. - Is your intuition in working with the widget consistent with result derived using calculus? Explain.\n\\[\\int_1^{\\infty} \\frac{1}{t} \\ dt\\]\n\nSolution to Question 3:\n\n\n\nRun (do not edit) the code cell below. Once the widget has opened, use the slider to change the upper limit of the integral. Click the “Run Interact” button to calculate the definite integral and plot the result. Then verify using calculus and justifying your work. \n\n\n################################\n# DO NOT EDIT this code cell\n# Simply Run this code cell \n# Then click on \"Run Interact\" \n# To approx the definite integral\n##################################\n\n# Updating function to be 1/x\ndef my_fun(x): \n    return 1/x\n\n# Updating plotting function\ndef plot_int(f, t0=1, t1=2, tmax=80):\n    x = np.linspace(t0, tmax, 1000)\n    ans = sym.integrate(1/t, (t,1,t1))\n    plt.plot(x, my_fun(x))\n    plt.fill_between(x, my_fun(x), 0,  \n                     where = (x &gt;= t0) & (x &lt;= t1),\n                     color = 'orange')\n    plt.show()\n    return print(\"Area is approx. \", ans)\n\ninteract_manual(plot_int, \n                f=fixed(my_fun),\n                t0=fixed(1),\n                t1=widgets.FloatSlider(min=0.1, max=80.0, step=0.1, value=1),\n                tmax=fixed(80))"
  },
  {
    "objectID": "Chp4/20-Introduction-to-Laplace-Transforms.html#sec-20quest4",
    "href": "Chp4/20-Introduction-to-Laplace-Transforms.html#sec-20quest4",
    "title": "4.1: Introduction to Laplace Transforms",
    "section": "Question 4:",
    "text": "Question 4:\n\nUsing the definition of the Laplace transform, find the Laplace transform \\(F(s)=\\mathscr{L} \\left\\{ f(t) \\right\\}\\) for \\(f(t) = 2\\). Be sure to state the domain of the resulting Laplace transform \\(F(s)\\), and provide justifications for your supporting work.\n\nSolution to Question 4:"
  },
  {
    "objectID": "Chp4/20-Introduction-to-Laplace-Transforms.html#sec-20quest5",
    "href": "Chp4/20-Introduction-to-Laplace-Transforms.html#sec-20quest5",
    "title": "4.1: Introduction to Laplace Transforms",
    "section": "Question 5:",
    "text": "Question 5:\n\nRun the code cells below to check your work in Question 4 to find Laplace transform \\(F(s)=\\mathscr{L} \\left\\{ f(t) \\right\\}\\) for \\(f(t) = 2\\).\n\nSolution to Question 5:\n\n\n\nCheck your previous answer using the Python code cells below.\n\n\n\nimport sympy as sym\nfrom sympy.abc import s,t\n\n\nf = 2  # define your function with respect to t\nF = sym.laplace_transform(f, t, s)  # sym.laplace_transform_(function, func_var, out_var)\n\nprint(F)  # returns F(s) and convergence interval\n\n\n# Use the option noconds=True to hide info about domain\n\nF = sym.laplace_transform(f, t, s, noconds=True)  # hides conditions for convergence\nprint(F)"
  },
  {
    "objectID": "Chp4/20-Introduction-to-Laplace-Transforms.html#building-a-laplace-transform-function-in-python",
    "href": "Chp4/20-Introduction-to-Laplace-Transforms.html#building-a-laplace-transform-function-in-python",
    "title": "4.1: Introduction to Laplace Transforms",
    "section": "Building a Laplace Transform Function in Python",
    "text": "Building a Laplace Transform Function in Python\n\nTo help simplify the Python code, we define a Laplace transform function with the command L(f).\n\nDefine your function f as a function of the symbol t imported in the code above.\nThen run the command L(f) to find the Laplace transform \\(F(s) = \\mathscr{L} \\left\\{f(t) \\right\\}\\).\n\n\n\n\n\n\n\nCaution\n\n\n\nBe sure you have imported SymPy and imported s and t as symbols.\n\n\n\n##################################\n# DO NOT EDIT THIS CELL\n# Run this code cell to create a \n# Laplace transform function\n##################################\n\ndef L(f):\n    return sym.laplace_transform(f, t, s, noconds=True)"
  },
  {
    "objectID": "Chp4/20-Introduction-to-Laplace-Transforms.html#sec-20quest6",
    "href": "Chp4/20-Introduction-to-Laplace-Transforms.html#sec-20quest6",
    "title": "4.1: Introduction to Laplace Transforms",
    "section": "Question 6:",
    "text": "Question 6:\n\nFind and state the domain of the Laplace transform \\(F(s)=\\mathscr{L} \\left\\{ f(t) \\right\\}\\) for \\(f(t) = t\\).\n\nSolution to Question 6:\n\n\n Solve “by hand” using calculus, and then check your answer using the Python code cell below. \n\n\n#############################################################\n# STUDENT TO DO: \n# Replace the ?? with an approrpriate expression\n#############################################################\n\nf = ??  # define your function with respect to t\n\nL(f)"
  },
  {
    "objectID": "Chp4/20-Introduction-to-Laplace-Transforms.html#sec-20quest7",
    "href": "Chp4/20-Introduction-to-Laplace-Transforms.html#sec-20quest7",
    "title": "4.1: Introduction to Laplace Transforms",
    "section": "Question 7:",
    "text": "Question 7:\n\nFind and state the domain of the Laplace transform \\(F(s)=\\mathscr{L} \\left\\{ f(t) \\right\\}\\) for \\(f(t) = e^{3t}\\).\n\nSolution to Question 7:\n\n\n\nSolve “by hand” using calculus, and then check your answer using the Python code cell below.\n\n\n\n#############################################################\n# STUDENT TO DO: \n# Replace the ?? with an approrpriate expression\n#############################################################\n\nf = sym.exp(??)  # define your function with respect to t\n\nL(f)"
  },
  {
    "objectID": "Chp4/20-Introduction-to-Laplace-Transforms.html#sec-20quest8",
    "href": "Chp4/20-Introduction-to-Laplace-Transforms.html#sec-20quest8",
    "title": "4.1: Introduction to Laplace Transforms",
    "section": "Question 8:",
    "text": "Question 8:\n\nFind and state the domain of the Laplace transform \\(F(s)=\\mathscr{L} \\left\\{ f(t) \\right\\}\\) for \\(f(t) = \\cos{(bt)}\\) where \\(b \\ne 0\\) is a constant.\n\nSolution to Question 8:\n\n\n\nSolve “by hand” using calculus, and then check your answer using the Python code cell below. \n\n\n#############################################################\n# STUDENT TO DO: \n# Replace the ?? with an approrpriate expression\n#############################################################\n\nb = sym.symbols('b', real=True, nonzero=True)\n\nf = sym.cos(??)  # define your function with respect to t\n\nL(f)"
  },
  {
    "objectID": "Chp4/20-Introduction-to-Laplace-Transforms.html#sec-20quest9",
    "href": "Chp4/20-Introduction-to-Laplace-Transforms.html#sec-20quest9",
    "title": "4.1: Introduction to Laplace Transforms",
    "section": "Question 9:",
    "text": "Question 9:\n\nFind and state the domain of the Laplace transform \\(F(s)=\\mathscr{L} \\left\\{ f(t) \\right\\}\\) for\n\\[f(t) = \\left\\{ \\begin{array}{ll}\n5 \\ \\ & 0 &lt; t &lt; 2 \\\\\ne^{8t} \\ \\ & t &gt;2 \\end{array} \\right.\\]\n\nSolution to Question 9:\n\n\n\nSolve “by hand” using calculus, and then check your answer using the Python code cell below.\n\n\n\n#############################################################\n# STUDENT TO DO: \n# Replace each ?? with an approrpriate expression\n#############################################################\n\n\nf = sym.Piecewise(??)  # define your function with respect to t\n\nL(f)"
  },
  {
    "objectID": "Chp4/21-Properties-of-Laplace-Transforms.html",
    "href": "Chp4/21-Properties-of-Laplace-Transforms.html",
    "title": "4.2: Properties of Laplace Transforms",
    "section": "",
    "text": "Properties of a Linear Operator\nAn operator (or transformation) \\(T\\) is a linear operator (or linear transformation) if for all \\(f\\) and \\(g\\) in the domain, \\(T\\) statisfies the following two properties:\nA function is of exponential order \\(\\alpha\\) if there exists positive constants \\(C\\) and \\(T\\) such that\n\\[\\color{dodgerblue}{\\large \\left| f(t) \\right| &lt; Ce^{\\alpha t} \\ \\ \\mbox{for all } t &gt; T}.\\]\nFor example:\nBelow is a table of updated table of common Laplace transforms pairs.\n1. \\(\\color{dodgerblue}{\\mathscr{L} \\left\\{ cf(t) \\right\\} = c \\mathscr{L} \\left\\{ f(t) \\right\\}}\\), where \\(c\\) is a constant. See Question 1b.\n2. \\(\\color{dodgerblue}{\\mathscr{L} \\left\\{ f_1(t) + f_2(t) \\right\\} = \\mathscr{L} \\left\\{ f_1(t) \\right\\} + \\mathscr{L} \\left\\{ f_2(t)\\right\\}}\\). See Question 1a.\n3. If \\(F(s) = \\mathscr{L} \\left\\{ f(t) \\right\\}\\) exists for all \\(s &gt; \\alpha\\), then \\(\\color{dodgerblue}{\\displaystyle \\mathscr{L} \\left\\{ e^{at} f(t) \\right\\} = F(s-a)}\\) for all \\(s&gt;\\alpha + a\\). See Question 2.\n4. If \\(F(s) =\\mathscr{L} \\left\\{ f(t) \\right\\}\\) exists for all \\(s &gt; \\alpha\\), then for all \\(s&gt;\\alpha\\) (see Question 7),\n\\[\\color{dodgerblue}{\\mathscr{L} \\left\\{ f^{(n)}(t) \\right\\} = s^n \\mathscr{L} \\{ f(t) \\}-s^{n-1} f(0)- s^{n-2} f'(0) - \\ldots - f^{(n-1)}(0)}.\\]\n5. If \\(F(s) =\\mathscr{L} \\left\\{ f(t) \\right\\}\\) exists for all \\(s &gt; \\alpha\\), then (see Question 8)\n\\[\\color{dodgerblue}{\\mathscr{L} \\left\\{ t^n f(t) \\right\\} = (-1)^n \\frac{d^nF}{ds^n} \\mbox{ for all } s &gt; \\alpha}.\\]\nExploring Differential Equations by Adam Spiegler is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Based on a work at https://github.com/CU-Denver-MathStats-OER/ODEs and original content created by Rasmussen, C., Keene, K. A., Dunmyre, J., & Fortune, N. (2018). Inquiry oriented differential equations: Course materials. Available at https://iode.sdsu.edu."
  },
  {
    "objectID": "Chp4/21-Properties-of-Laplace-Transforms.html#sec-21quest1",
    "href": "Chp4/21-Properties-of-Laplace-Transforms.html#sec-21quest1",
    "title": "4.2: Properties of Laplace Transforms",
    "section": "Question 1:",
    "text": "Question 1:\n\nLet \\(f\\) and \\(g\\) be functions whose Laplace transform exists for \\(s &gt; \\alpha\\) and let \\(c\\) be a constant. Answer parts a and b and show the Laplace transform is a linear operator.\n\nQuestion 1a:\n\nProve the Laplace transform statisfies the additive property\n\\[{\\large \\color{dodgerblue}{\\mathscr{L} \\left\\{ f + g \\right\\} = \\mathscr{L} \\left\\{ f \\right\\} + \\mathscr{L} \\left\\{ g \\right\\}}}.\\]\n\nSolution to Question 1a:\n\n\n\n\n\n\n\nQuestion 1b:\n\nProve the Laplace transform satisfies the scalar multiplication property\n\\[{\\color{dodgerblue}{\\large \\mathscr{L} \\left\\{ cf \\right\\} = c \\mathscr{L} \\left\\{ f \\right\\}}}.\\]\n\nSolution to Question 1b:"
  },
  {
    "objectID": "Chp4/21-Properties-of-Laplace-Transforms.html#sec-21quest2",
    "href": "Chp4/21-Properties-of-Laplace-Transforms.html#sec-21quest2",
    "title": "4.2: Properties of Laplace Transforms",
    "section": "Question 2:",
    "text": "Question 2:\n\nIf the Laplace transform \\(\\mathscr{L}\\{ f(t) \\} =F(s)\\) exist for \\(s &gt; \\alpha\\), then show that\n\\[\\color{dodgerblue}{\\large \\mathscr{L}\\{ e^{at}f(t) \\}= F(s-a), \\ \\ \\mbox{for } s &gt; \\alpha + a}.\\]\n\nSolution to Question 2:"
  },
  {
    "objectID": "Chp4/21-Properties-of-Laplace-Transforms.html#sec-21quest3",
    "href": "Chp4/21-Properties-of-Laplace-Transforms.html#sec-21quest3",
    "title": "4.2: Properties of Laplace Transforms",
    "section": "Question 3:",
    "text": "Question 3:\n\nUsing the shifting property from Question 2 and the fact that \\(\\mathscr{L} \\{ \\cos{(bt)} \\} = \\dfrac{s}{s^2+b^2}\\) for \\(s &gt;0\\), find \\(\\color{dodgerblue}{\\large \\mathscr{L} \\left\\{ e^{at} \\cos{(bt)} \\right\\}}\\).\n\nSolution to Question 3:"
  },
  {
    "objectID": "Chp4/21-Properties-of-Laplace-Transforms.html#sec-21PythonLaplace",
    "href": "Chp4/21-Properties-of-Laplace-Transforms.html#sec-21PythonLaplace",
    "title": "4.2: Properties of Laplace Transforms",
    "section": "Revisiting Laplace Transforms with SymPy",
    "text": "Revisiting Laplace Transforms with SymPy\n\nIn Worksheet 20 Introduction to Laplace Transforms we used the SymPy library in Python to help verify and check our work with Laplace transforms.\n\nRun the first code cell below to create a Laplace transform function.\nThen run the second code cell to check your previous answer.\n\n\nimport sympy as sym\nfrom sympy.abc import s,t\n\na = sym.symbols('a', real=True, nonzero=True)\nb = sym.symbols('b', real=True, nonzero=True)\n\ndef L(f):\n    return sym.laplace_transform(f, t, s, noconds=True)\n\n\nf = sym.exp(a*t) *  sym.cos(b*t)  # define your function with respect to t\n\nL(f)"
  },
  {
    "objectID": "Chp4/21-Properties-of-Laplace-Transforms.html#sec-21quest4",
    "href": "Chp4/21-Properties-of-Laplace-Transforms.html#sec-21quest4",
    "title": "4.2: Properties of Laplace Transforms",
    "section": "Question 4:",
    "text": "Question 4:\n\nIf \\(f(t)\\) is continuous on \\(\\lbrack 0, \\infty )\\) and \\(f'(t)\\) is piecewise continuous on \\(\\lbrack 0, \\infty )\\) with both exponential order \\(\\alpha\\), then prove for \\(s &gt; \\alpha\\),\n\\[\\color{dodgerblue}{\\large \\mathscr{L} \\left\\{ f'(t) \\right\\} = s \\mathscr{L} \\left\\{ f(t) \\right\\} - f(0) = sF(s)-f(0)}.\\]\n\nSolution to Question 4:"
  },
  {
    "objectID": "Chp4/21-Properties-of-Laplace-Transforms.html#sec-21quest5",
    "href": "Chp4/21-Properties-of-Laplace-Transforms.html#sec-21quest5",
    "title": "4.2: Properties of Laplace Transforms",
    "section": "Question 5:",
    "text": "Question 5:\n\nUsing the property from Question 4 and the fact that \\(\\mathscr{L} \\left\\{ \\cos{(bt)} \\right\\} = \\frac{s}{s^2+b^2}\\) for \\(s &gt;0\\), find \\(\\color{dodgerblue}{\\large \\mathscr{L} \\left\\{ \\sin{(bt)} \\right\\}}\\).\nThen check your answer using the Laplace transform function L(f) defined in Revisiting Laplace Transforms with SymPy.\n\nSolution to Question 5:\n\n\n\n After using the properties, verify your result using the code cell below. \n\n\n#############################################################\n# STUDENT TO DO: \n# Replace the ?? with an approrpriate expression\n# Be sure you have already created the L(f) fucntion\n#############################################################\n\nf = ??  # define your function with respect to t\n\nL(f)"
  },
  {
    "objectID": "Chp4/21-Properties-of-Laplace-Transforms.html#sec-21quest6",
    "href": "Chp4/21-Properties-of-Laplace-Transforms.html#sec-21quest6",
    "title": "4.2: Properties of Laplace Transforms",
    "section": "Question 6:",
    "text": "Question 6:\n\nIf \\(\\mathscr{L} \\left\\{ f(t) \\right\\} = F(s)\\) for all \\(s &gt; \\alpha\\), using the property from Question 4, show that\n\\[\\color{dodgerblue}{\\large \\mathscr{L} \\left\\{ f''(t) \\right\\} =s^2F(s)-sf(0)-f'(0) \\quad \\mbox{for all } s &gt; \\alpha .}\\]\n\nSolution to Question 6:"
  },
  {
    "objectID": "Chp4/21-Properties-of-Laplace-Transforms.html#sec-21quest7",
    "href": "Chp4/21-Properties-of-Laplace-Transforms.html#sec-21quest7",
    "title": "4.2: Properties of Laplace Transforms",
    "section": "Optional Proof Practice: Question 7",
    "text": "Optional Proof Practice: Question 7\n\nUsing induction show that\n\\[\\color{dodgerblue}{\\large \\mathscr{L} \\left\\{ f^{(n)} \\right\\} = s^n \\mathscr{L} \\left\\{ f \\right\\} - s^{n-1} f(0) - s^{n-2} f'(0) - \\ldots - f^{(n-1)}(0).}\\]\n\nSolution to Question 7:"
  },
  {
    "objectID": "Chp4/21-Properties-of-Laplace-Transforms.html#sec-21quest8",
    "href": "Chp4/21-Properties-of-Laplace-Transforms.html#sec-21quest8",
    "title": "4.2: Properties of Laplace Transforms",
    "section": "Optional Proof Practice: Question 8",
    "text": "Optional Proof Practice: Question 8\n\nLet \\(F(s) = \\mathscr{L} \\left\\{ f \\right\\}\\) and assume \\(f(t)\\) is piecewise continuous on \\(\\lbrack 0, \\infty )\\) and of exponential order \\(\\alpha\\). Prove that for \\(s &gt; \\alpha\\) if follows that\n\\[\\color{dodgerblue}{\\large \\mathscr{L} \\left\\{ t^nf(t) \\right\\} = (-1)^n \\frac{d^nF}{ds^n}.}\\]\n\nSolution to Question 8:"
  },
  {
    "objectID": "Chp4/21-Properties-of-Laplace-Transforms.html#sec-21quest9",
    "href": "Chp4/21-Properties-of-Laplace-Transforms.html#sec-21quest9",
    "title": "4.2: Properties of Laplace Transforms",
    "section": "Question 9:",
    "text": "Question 9:\n\nUsing the definition of the Laplace transform, the result that \\(\\mathscr{L} \\left\\{ e^{at} \\right\\} = \\dfrac{1}{s-a}\\) for \\(s&gt;a\\) and the property above, find a formula for \\(\\color{dodgerblue}{\\large \\mathscr{L} \\left\\{ t^n e^{at} \\right\\}}\\).\nThen check your answer using the Laplace transform function L(f) defined in Revisiting Laplace Transforms with SymPy.\n\nSolution to Question 9:\n\n\n  After using the properties, verify your result using the code cell below. \n\n\n#############################################################\n# STUDENT TO DO: \n# Replace the ?? with an approrpriate expression\n# Be sure you have already created the L(f) fucntion\n#############################################################\n\nn = sym.symbols('n', integer=True, positive=True)\n\nf = ??  # define your function with respect to t\n\nL(f)"
  },
  {
    "objectID": "Chp4/22-Inverse-Laplace-Transforms.html",
    "href": "Chp4/22-Inverse-Laplace-Transforms.html",
    "title": "4.3: Inverse Laplace Transforms",
    "section": "",
    "text": "Inverse Operations\nWhen analyzing a differential equation, it is important to read and interpret the differential equation in practical terms when the variables represent physical quantities. For example, let \\(s(t)\\) denotes the position (measured in cm. from its initial position) of a particle \\(t\\) seconds from now. If the particle’s position is modeled by the differential equation\n\\[s' - 200\\sin{t} = 0 \\qquad s(0) = 0,\\]\nthen we know the particle’s velocity is oscillating over time.\nLet \\(y=s(t)\\) denote the position of a particle at time \\(t\\). We can find its velocity by applying the derivative, which maps a function to its rate of change.\nIn the case of the differential equation above, we would like to go in the opposite direction. Given a formula for the derivative \\(s'\\), we would like to find its corresponding position \\(s(t)\\). To solve the differential equation, we can:\n\\[ \\int (s'(t) - 200\\sin{t}) \\, dt  = \\int 0 \\, dt \\quad \\longrightarrow \\quad s(t) + 200 \\cos{t} = C\\]\n\\[s(t) = -200 \\cos{t} + 200\\]\nSimilar to the derivative, the Laplace transform is a mapping of one function \\(f(t)\\) to another function, its Laplace transform \\(\\color{dodgerblue}{F(s)= \\mathscr{L} \\left\\{ f \\right\\}}\\). In Worksheet 23 (the next worksheet), we will explore how Laplace transforms help us solve differential equations. Before focusing our efforts back on differential equations, in this notebook we will practice transforming functions in the opposite direction with the inverse Laplace transform.\nSo far we have explored Laplace transforms in Worksheet 20 and some useful properties of Laplace transforms in Worksheet 21. The main results of these investigations are summarized in Appendix A and Appendix B.\nBefore defining the inverse Laplace transform and applying this concept to solve differential equations, let’s first refresh ourselves of key properties of the Laplace transform that will be particularly useful when solving differential equations.\nFor example, Property 1 and Property 2 tell us that the Laplace transform is a linear operator,\n\\[\\color{dodgerblue}{\\mathscr{L} \\left\\{ c_1 f_1(t) + c_2 f_2(t) \\right\\} = c_1 \\mathscr{L} \\left\\{ f_1(t) \\right\\} + c_2 \\mathscr{L} \\left\\{ f_2(t) \\right\\}}.\\]\nOne useful problem solving technique in mathematics is to:\nLet’s apply this technique to differential equations by applying the following steps:\nStep 1: Apply the Laplace transform of both sides of the differential equation.\nStep 2: Rearrange and group like terms to solve for \\(\\mathscr{L}\\{y(t)\\}=Y(s)\\).\nStep 3: Take the inverse Laplace transform and solve for \\(y(t) = \\mathscr{L}^{-1}\\{Y(x) \\}\\).\nBefore we focus our attention on the inverse Laplace transform in Step 3, let’s first demonstrate how this three step process can be put into practice with the example in Question 2 below.\nGiven \\(F(s)\\), if there is a function \\(f(t)\\) that is continuous on \\(\\lbrack 0 , \\infty )\\) and satisfies \\(\\mathscr{L} \\{ f \\} = F(s)\\), then we say \\(f(t)\\) is the inverse Laplace transform of \\(F(s)\\) which is denoted by\n\\[\\color{dodgerblue}{\\large f(t) = \\mathscr{L}^{-1} \\{ F(s) \\} }.\\]\nWe can use the sympy.inverse_laplace_transform(F, s, t) function from the SymPy library to check our work.\nBelow are a couple of additional resources for help with Laplace transforms with SymPy.\nimport sympy as sym\nfrom sympy.abc import s,t\n\n# Just run this code cell. Do Not Edit.\n\n# Define the Laplace transform function\ndef L(f):\n    return sym.laplace_transform(f, t, s)\n\n# Define the inverse Laplace transform function\ndef invL(F):\n    return sym.inverse_laplace_transform(F, s, t)\n1. \\(\\color{dodgerblue}{\\mathscr{L} \\left\\{ cf(t) \\right\\} = c \\mathscr{L} \\left\\{ f(t) \\right\\}}\\), where \\(c\\) is a constant.\n2. \\(\\color{dodgerblue}{\\mathscr{L} \\left\\{ f_1(t) + f_2(t) \\right\\} = \\mathscr{L} \\left\\{ f_1(t) \\right\\} + \\mathscr{L} \\left\\{ f_2(t)\\right\\}}\\).\n3. If \\(F(s) = \\mathscr{L} \\left\\{ f(t) \\right\\}\\) exists for all \\(s &gt; \\alpha\\), then \\(\\color{dodgerblue}{\\displaystyle \\mathscr{L} \\left\\{ e^{at} f(t) \\right\\} = F(s-a)}\\) for all \\(s&gt;\\alpha + a\\).\n4. If \\(F(s) =\\mathscr{L} \\left\\{ f(t) \\right\\}\\) exists for all \\(s &gt; \\alpha\\), then for all \\(s&gt;\\alpha\\),\n\\[\\color{dodgerblue}{\\mathscr{L} \\left\\{ f^{(n)}(t) \\right\\} = s^n \\mathscr{L} \\{ f(t) \\}-s^{n-1} f(0)- s^{n-2} f'(0) - \\ldots - f^{(n-1)}(0)}.\\]\n5. If \\(F(s) =\\mathscr{L} \\left\\{ f(t) \\right\\}\\) exists for all \\(s &gt; \\alpha\\), then\n\\[\\color{dodgerblue}{\\mathscr{L} \\left\\{ t^n f(t) \\right\\} = (-1)^n \\frac{d^nF}{ds^n} \\mbox{ for all } s &gt; \\alpha}.\\]\nExploring Differential Equations by Adam Spiegler is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Based on a work at https://github.com/CU-Denver-MathStats-OER/ODEs and original content created by Rasmussen, C., Keene, K. A., Dunmyre, J., & Fortune, N. (2018). Inquiry oriented differential equations: Course materials. Available at https://iode.sdsu.edu."
  },
  {
    "objectID": "Chp4/22-Inverse-Laplace-Transforms.html#sec-22quest1",
    "href": "Chp4/22-Inverse-Laplace-Transforms.html#sec-22quest1",
    "title": "4.3: Inverse Laplace Transforms",
    "section": "Question 1:",
    "text": "Question 1:\n\nDescribe properties 3 and 5 in practical terms.\n\nSolution to Question 1:\n\nProperty 3 : Multiplying \\(f(t)\\) by \\(e^{at}\\) and then taking the Laplace transform has what kind of effect on \\(\\mathscr{L} \\left\\{ f(t) \\right\\}\\)?\n  Explain in practicel terms. For example, \\(\\mathscr{L} \\left\\{ e^{at} f(t) \\right\\}\\) can be described as a transformation (shift, compression, and/or reflection) of \\(F(s)=\\mathscr{L} \\left\\{ f(t) \\right\\}\\).    \nProperty 5 : Multiplying \\(f(t)\\) by \\(t^n\\) and then taking the Laplace transform has what kind of effect on \\(\\mathscr{L} \\left\\{ f(t) \\right\\}\\)?\n\n\nExplain in practicel terms. For example, \\(\\mathscr{L} \\left\\{ t^n f(t) \\right\\}\\) is equal to applying what operation(s) to \\(F(s)=\\mathscr{L} \\left\\{ f(t) \\right\\}\\)."
  },
  {
    "objectID": "Chp4/22-Inverse-Laplace-Transforms.html#sec-22quest2",
    "href": "Chp4/22-Inverse-Laplace-Transforms.html#sec-22quest2",
    "title": "4.3: Inverse Laplace Transforms",
    "section": "Question 2:",
    "text": "Question 2:\n\nSolve \\(y''-y=-t\\) with \\(y(0)=0\\) and \\(y'(0)=1\\).\n\n\n\n\n\n\nNote\n\n\n\nIn Step 3, we will apply the inverse Laplace transform to \\(Y(s)\\) in order to identify \\(y(t) = \\mathscr{L}^{-1} \\{ Y(s) \\}\\).\n\n\n\nStep 1: Apply the Laplace Transform to Both Sides\n\nUsing the properties, apply the Laplace transform to both sides:\n\\[ \\mathscr{L} \\{ y'' -y \\} = \\mathscr{L} \\{ -t \\} .\\]\n\nSolution to Question 2 Step 1:\n\n\n\n\n\n\n\nStep 2: Solve for \\(Y(s) = \\mathscr{L} \\{ y(t) \\}\\)\n\nUsing your result from Step 1, solve for \\(\\mathscr{L} \\{ y(t) \\}=Y(s)\\).\n\nSolution to Question 2 Step 2:\n\n\n\n\n\n\n\nStep 3: Apply the Inverse Laplace Transform\n\nUse the table of common Laplace transforms to identify a function \\(y(t)\\) that has \\(\\mathscr{L} \\{ y(t) \\}=Y(s)\\).\n\nSolution to Question 2 Step 3:"
  },
  {
    "objectID": "Chp4/22-Inverse-Laplace-Transforms.html#sec-22quest3",
    "href": "Chp4/22-Inverse-Laplace-Transforms.html#sec-22quest3",
    "title": "4.3: Inverse Laplace Transforms",
    "section": "Question 3:",
    "text": "Question 3:\n\nIn parts (a)-(d), find the inverse Laplace transform of the function \\(F(s)\\).\n\n\n\n\n\n\nTip\n\n\n\nFirst decide whether \\(f(t)\\) is of the form \\(t^n\\), \\(\\cos{(bt)}\\), \\(\\sin{(bt)}\\), or \\(e^{at}\\).\n\n\n\nQuestion 3a:\n\n\\(\\displaystyle F(s) = \\frac{1}{s^2}\\)\n\nSolution to Question 3a:\n\n\n\n\n\n\n\nQuestion 3b:\n\n\\(\\displaystyle F(s) = \\frac{2}{s^2+4}\\)\n\nSolution to Question 3b:\n\n\n\n\n\n\n\nQuestion 3c:\n\n\\(\\displaystyle F(s) = \\frac{4s}{s^2+9}\\)\n\nSolution to Question 3c:\n\n\n\n\n\n\n\nQuestion 3d:\n\n\\(\\displaystyle F(s) = \\frac{2}{s+6}\\)\n\nSolution to Question 3d:"
  },
  {
    "objectID": "Chp4/22-Inverse-Laplace-Transforms.html#sec-22quest4",
    "href": "Chp4/22-Inverse-Laplace-Transforms.html#sec-22quest4",
    "title": "4.3: Inverse Laplace Transforms",
    "section": "Question 4:",
    "text": "Question 4:\n\nUsing the inverse Laplace transform function invL(F) to verify your answers in Question 3. Below are the formulas from parts (a)-(d) from Question 3\n\n\\(\\displaystyle F(s) = \\frac{1}{s^2}\\)\n\\(\\displaystyle F(s) = \\frac{2}{s^2+4}\\)\n\\(\\displaystyle F(s) = \\frac{4s}{s^2+9}\\)\n\\(\\displaystyle F(s) = \\frac{2}{s+6}\\)\n\n\n\nSolution to Question 4:\n\n In each of the four code cells below, replace the ?? in the code cell below with an appropriate expression to verify your each of your four answers to each part of Question 3. Be sure you have run the previous code cell to define invL(F) before trying to run the code cells below. \n\n\nSolution to Question 4a:\n\n\n#############################################################\n# STUDENT TO DO: \n# Replace the ?? with an approrpriate expression\n#############################################################\n\nF = ??  # define your function with respect to s\n\ninvL(F)\n\n\n\nSolution to Question 4b:\n\n\n#############################################################\n# STUDENT TO DO: \n# Replace the ?? with an approrpriate expression\n#############################################################\n\nF = ??  # define your function with respect to s\n\ninvL(F)\n\n\n\nSolution to Question 4c:\n\n\n#############################################################\n# STUDENT TO DO: \n# Replace the ?? with an approrpriate expression\n#############################################################\n\nF = ??  # define your function with respect to s\n\ninvL(F)\n\n\n\nSolution to Question 4d:\n\n\n#############################################################\n# STUDENT TO DO: \n# Replace the ?? with an approrpriate expression\n#############################################################\n\nF = ??  # define your function with respect to s\n\ninvL(F)"
  },
  {
    "objectID": "Chp4/22-Inverse-Laplace-Transforms.html#whats-the-deal-with-thetat",
    "href": "Chp4/22-Inverse-Laplace-Transforms.html#whats-the-deal-with-thetat",
    "title": "4.3: Inverse Laplace Transforms",
    "section": "What’s the Deal with \\(\\theta(t)\\)?",
    "text": "What’s the Deal with \\(\\theta(t)\\)?\n\nThe Heaviside function is denoted by \\(\\theta(t)\\) in the output above. The Heaviside function is defined by\n\\[\\color{dodgerblue}{\\large \\theta(t) = \\left\\{ \\begin{array}{ll}\n0, & t &lt; 0 \\\\\n1, & t \\geq 0\n\\end{array} \\right.}\\]\nRun the code cell below to plot the graph of the Heaviside funtion.\n\nsym.plot(sym.Heaviside(t));"
  },
  {
    "objectID": "Chp4/22-Inverse-Laplace-Transforms.html#heaviside-function-and-inverse-laplace-transforms",
    "href": "Chp4/22-Inverse-Laplace-Transforms.html#heaviside-function-and-inverse-laplace-transforms",
    "title": "4.3: Inverse Laplace Transforms",
    "section": "Heaviside Function and Inverse Laplace Transforms",
    "text": "Heaviside Function and Inverse Laplace Transforms\n\nThe Heaviside function can be thought of as a signal that switches a function on by default at time \\(t=0\\). \\(\\theta(t)\\) is useful when expressing inverse Laplace transforms since we only consider the (forward) Laplace transform of \\(f(t)\\) on the domain \\(t \\geq 0\\).\nFor conciseness, we typically write \\(\\mathscr{L}^{-1} \\left\\{ \\frac{2}{s+6} \\right\\} = 2e^{-6t}\\) which has domain \\((-\\infty, \\infty)\\).\n\nHowever, we only consider \\(\\mathscr{L} \\left\\{ 2e^{-6t} \\right\\}\\) on the interval \\(t \\leq 0\\).\nThus, \\(f(t) = \\mathscr{L}^{-1} \\left\\{ F(s) \\right\\}\\) should only be considered over the interval \\(t \\geq 0\\).\nWe can mulitply by the Heaviside function to “turn the function on” at \\(t=0\\).\n\n\\[\\color{dodgerblue}{\\large f(t) \\theta(t) = \\left\\{ \\begin{array}{ll}\n0, & t &lt; 0 \\\\\n2e^{-6t}, & t \\geq 0\n\\end{array} \\right.}\\]\nFor conciseness, when typing or writing inverse Laplace transform we simply write \\(\\mathbf{f(t) = 2e^{-6t}}\\), and do not also write that the function is \\(0\\) when \\(t &lt;0\\).\nRun the code cell below to plot the graph of \\(y=2e^{-6t}\\theta(t)\\).\n\n# Modified from \n# https://dynamics-and-control.readthedocs.io/en/latest/1_Dynamics/3_Linear_systems/Laplace%20transforms.html\n\na = sym.symbols('a')\n\nF = 2/(s + 6)\nf = 2*sym.exp(-6*t)\n\np = sym.plot(f.subs({a: 0}), invL(F).subs({a: 0}),\n               xlim=(-0.5, 1), ylim=(0, 3), show=False)\np[1].line_color = 'red'\np.show()"
  },
  {
    "objectID": "Chp4/22-Inverse-Laplace-Transforms.html#sec-22quest5",
    "href": "Chp4/22-Inverse-Laplace-Transforms.html#sec-22quest5",
    "title": "4.3: Inverse Laplace Transforms",
    "section": "Question 5:",
    "text": "Question 5:\n\nFind the inverse Laplace transform of \\(\\displaystyle F(s) = \\frac{s+2}{s^2+4s+11}\\) by answering the questions below.\n\nQuestion 5a:\n\nComplete the square for the expression in the denominator of \\(F(s)\\) to find possible values for \\(a\\) and \\(b\\) such that \\(s^2+4s+11=(s-a)^2+b\\).\n\nSolution to Question 5a:\n\n\n\n\n\n\n\nQuestion 5b:\n\nUse the table of common Laplace transforms to identify \\(\\mathscr{L}^{-1} \\{ F(s)\\}\\).\n\nSolution to Question 5b:"
  },
  {
    "objectID": "Chp4/22-Inverse-Laplace-Transforms.html#sec-22quest6",
    "href": "Chp4/22-Inverse-Laplace-Transforms.html#sec-22quest6",
    "title": "4.3: Inverse Laplace Transforms",
    "section": "Question 6:",
    "text": "Question 6:\n\nUsing the inverse Laplace transform function invL(F) to verify your answer in Question 5.\n\nSolution to Question 6:\n\n\nReplace the ?? in the code cell below with an appropriate expression to check your previous answer. \n\n\n\n#############################################################\n# STUDENT TO DO: \n# Replace the ?? with an approrpriate expression\n#############################################################\n\nF = ??  # define your function with respect to s\n\ninvL(F)"
  },
  {
    "objectID": "Chp4/22-Inverse-Laplace-Transforms.html#sec-22quest7",
    "href": "Chp4/22-Inverse-Laplace-Transforms.html#sec-22quest7",
    "title": "4.3: Inverse Laplace Transforms",
    "section": "Question 7:",
    "text": "Question 7:\n\nFind the inverse Laplace transform of \\(\\displaystyle F(s) = \\frac{5s-10}{s^2-3s-4}\\).\n\nSolution to Question 7:"
  },
  {
    "objectID": "Chp4/22-Inverse-Laplace-Transforms.html#sec-22quest8",
    "href": "Chp4/22-Inverse-Laplace-Transforms.html#sec-22quest8",
    "title": "4.3: Inverse Laplace Transforms",
    "section": "Question 8:",
    "text": "Question 8:\n\nFind the inverse Laplace transform of \\(\\displaystyle F(s) = \\frac{3s-15}{2s^2-4s+10}\\).\n\nSolution to Question 8:"
  },
  {
    "objectID": "Chp4/22-Inverse-Laplace-Transforms.html#sec-22quest9",
    "href": "Chp4/22-Inverse-Laplace-Transforms.html#sec-22quest9",
    "title": "4.3: Inverse Laplace Transforms",
    "section": "Question 9:",
    "text": "Question 9:\n\nFind the inverse Laplace transform of \\(\\displaystyle F(s) = \\frac{-5s-36}{(s+2)(s^2+9)}\\).\n\nSolution to Question 9:"
  },
  {
    "objectID": "Chp4/22-Inverse-Laplace-Transforms.html#sec-22quest10",
    "href": "Chp4/22-Inverse-Laplace-Transforms.html#sec-22quest10",
    "title": "4.3: Inverse Laplace Transforms",
    "section": "Question 10:",
    "text": "Question 10:\n\nUsing the inverse Laplace transform function invL(F) to verify your answers in Question 7, Question 8, and Question 9.\n\nSolution to Question 10:\n\n\n\nReplace the ?? in each of the three code cells below with an appropriate expression to check your previous answers.  \n\n\nSolution to Question 10a: Checking Solution to Question 7\n\nFind the inverse Laplace transform of \\(\\displaystyle F(s) = \\frac{5s-10}{s^2-3s-4}\\).\n\n#############################################################\n# STUDENT TO DO: \n# Replace the ?? with an approrpriate expression\n#############################################################\n\nF = ??  # define your function with respect to s\n\ninvL(F)\n\n\n\nSolution to Question 10b: Checking Solution to Question 8\n\nFind the inverse Laplace transform of \\(\\displaystyle F(s) = \\frac{3s-15}{2s^2-4s+10}\\).\n\n#############################################################\n# STUDENT TO DO: \n# Replace the ?? with an approrpriate expression\n#############################################################\n\nF = ??  # define your function with respect to s\n\ninvL(F)\n\n\n\nSolution to Question 10c: Checking Solution to Question 9\n\nFind the inverse Laplace transform of \\(\\displaystyle F(s) = \\frac{-5s-36}{(s+2)(s^2+9)}\\).\n\n#############################################################\n# STUDENT TO DO: \n# Replace the ?? with an approrpriate expression\n#############################################################\n\nF = ??  # define your function with respect to s\n\ninvL(F)"
  },
  {
    "objectID": "Chp4/23-Solving-IVP-with-Laplace-Transforms.html",
    "href": "Chp4/23-Solving-IVP-with-Laplace-Transforms.html",
    "title": "4.4: Solving ODEs with Laplace Transforms",
    "section": "",
    "text": "Steps for Solving ODE’s with Laplace Transforms:\nLet’s focus our exploration with Laplace transforms on their application to differential equations. We can apply the Laplace transform to solve differential equations with a frequently used problem solving strategy:\nStep 1: Transform a difficult problem into an easier one.\nStep 2: Solve the easier problem.\nStep 3: Use the previous solution to obtain a solution to the original problem.\nWe will walk through each step to solve the differential equation\n\\[\\color{dodgerblue}{y''-2y'+5y=0 \\quad \\mbox{with} \\quad y(0)=2 \\mbox{ and } y'(0)=4}.\\]\nAs you may have gathered, using the Laplace transform to solve differential equations may present some challenges at each step. In particular, finding the inverse Laplace transform of \\(Y(s)\\) in the last step involved the most work. We can use the built-in Laplace transform functions in SymPy to help with some of the work.\nBelow are a couple of additional resources for help with Laplace transforms with SymPy.\n1. \\(\\color{dodgerblue}{\\mathscr{L} \\left\\{ cf(t) \\right\\} = c \\mathscr{L} \\left\\{ f(t) \\right\\}}\\), where \\(c\\) is a constant.\n2. \\(\\color{dodgerblue}{\\mathscr{L} \\left\\{ f_1(t) + f_2(t) \\right\\} = \\mathscr{L} \\left\\{ f_1(t) \\right\\} + \\mathscr{L} \\left\\{ f_2(t)\\right\\}}\\).\n3. If \\(F(s) = \\mathscr{L} \\left\\{ f(t) \\right\\}\\) exists for all \\(s &gt; \\alpha\\), then \\(\\color{dodgerblue}{\\displaystyle \\mathscr{L} \\left\\{ e^{at} f(t) \\right\\} = F(s-a)}\\) for all \\(s&gt;\\alpha + a\\).\n4. If \\(F(s) =\\mathscr{L} \\left\\{ f(t) \\right\\}\\) exists for all \\(s &gt; \\alpha\\), then for all \\(s&gt;\\alpha\\),\n\\[\\color{dodgerblue}{\\mathscr{L} \\left\\{ f^{(n)}(t) \\right\\} = s^n \\mathscr{L} \\{ f(t) \\}-s^{n-1} f(0)- s^{n-2} f'(0) - \\ldots - f^{(n-1)}(0)}.\\]\n5. If \\(F(s) =\\mathscr{L} \\left\\{ f(t) \\right\\}\\) exists for all \\(s &gt; \\alpha\\), then\n\\[\\color{dodgerblue}{\\mathscr{L} \\left\\{ t^n f(t) \\right\\} = (-1)^n \\frac{d^nF}{ds^n} \\mbox{ for all } s &gt; \\alpha}.\\]\nExploring Differential Equations by Adam Spiegler is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Based on a work at https://github.com/CU-Denver-MathStats-OER/ODEs and original content created by Rasmussen, C., Keene, K. A., Dunmyre, J., & Fortune, N. (2018). Inquiry oriented differential equations: Course materials. Available at https://iode.sdsu.edu."
  },
  {
    "objectID": "Chp4/23-Solving-IVP-with-Laplace-Transforms.html#step-1-transform-a-difficult-problem-into-an-easier-one.",
    "href": "Chp4/23-Solving-IVP-with-Laplace-Transforms.html#step-1-transform-a-difficult-problem-into-an-easier-one.",
    "title": "4.4: Solving ODEs with Laplace Transforms",
    "section": "Step 1: Transform a difficult problem into an easier one.",
    "text": "Step 1: Transform a difficult problem into an easier one.\n\n\nApply the Laplace transform of both sides of the differential equation.\nRefer to Table of Common Laplace Transforms in Appendix A and Properties in Appendix B.\nThe function sympy.laplace_transform(f,t,s) may be useful in some cases.\nThe initial conditions for \\(y(0)\\) and \\(y'(0)\\) will be important.\n\n\\[\\begin{array}{rcll}\n\\mathscr{L} \\left\\{ y''-2y'+5y \\right\\} &=& \\mathscr{L} \\left\\{ 0 \\right\\} & {\\color{tomato}{\\mbox{Apply $\\mathscr{L}$ to both sides.}}} \\\\\n\\mathscr{L} \\left\\{ y'' \\right\\} -2\\mathscr{L} \\left\\{y'\\right\\} + 5 \\mathscr{L} \\left\\{ y \\right\\} &=& \\mathscr{L} \\left\\{ 0 \\right\\} & {\\color{tomato}{\\mbox{Applying properties 1 and 2 on left side.}}}\\\\\n\\mathscr{L} \\left\\{ y'' \\right\\} -2\\mathscr{L} \\left\\{y'\\right\\} + 5 Y(s) &=& 0  & {\\color{tomato}{\\mbox{a. justification ??}}}\\\\\n\\big( s^2Y(s)-sy(0)-y'(0) \\big) - 2 \\big( sY(s) - y(0) \\big) + 5 Y(s) &=& 0  & {\\color{tomato}{\\mbox{b. justification ??}}}\\\\\n\\big( s^2Y(s)-2s-4 \\big) - 2 \\big( sY(s) - 2 \\big) + 5 Y(s) &=& 0  & {\\color{tomato}{\\mbox{c. justification ??}}}\\\\\n\\end{array}\n\\]"
  },
  {
    "objectID": "Chp4/23-Solving-IVP-with-Laplace-Transforms.html#sec-23quest1",
    "href": "Chp4/23-Solving-IVP-with-Laplace-Transforms.html#sec-23quest1",
    "title": "4.4: Solving ODEs with Laplace Transforms",
    "section": "Question 1:",
    "text": "Question 1:\n\nJustify each of the steps labeled a, b and c in the work above.\n\nSolution to Question 1:\n\n\n\n??\n??\n??"
  },
  {
    "objectID": "Chp4/23-Solving-IVP-with-Laplace-Transforms.html#step-2-solve-the-easier-problem.",
    "href": "Chp4/23-Solving-IVP-with-Laplace-Transforms.html#step-2-solve-the-easier-problem.",
    "title": "4.4: Solving ODEs with Laplace Transforms",
    "section": "Step 2: Solve the easier problem.",
    "text": "Step 2: Solve the easier problem.\n\n\nRearrange and group like terms.\nThen solve for \\(Y(s)\\).\n\n\\[\\begin{array}{rcll}\n\\big( s^2Y(s)-2s-4 \\big) - 2 \\big( sY(s) - 2 \\big) + 5 Y(s) &=& 0  & {\\color{tomato}{\\mbox{Result from Step 1}}}\\\\\n\\big( s^2Y(s) - 2sY(s) +5Y(s) \\big) - 2s &=& 0  & {\\color{tomato}{\\mbox{a. justification ??}}}\\\\\n(s^2 - 2s +5)Y(s) &=& 2s  & {\\color{tomato}{\\mbox{b. justification ??}}}\\\\\nY(s) &=& \\dfrac{2s}{s^2-2s+5}  & {\\color{tomato}{\\mbox{c. justification ??}}}\\\\\n\\end{array}\\]"
  },
  {
    "objectID": "Chp4/23-Solving-IVP-with-Laplace-Transforms.html#sec-23quest2",
    "href": "Chp4/23-Solving-IVP-with-Laplace-Transforms.html#sec-23quest2",
    "title": "4.4: Solving ODEs with Laplace Transforms",
    "section": "Question 2:",
    "text": "Question 2:\n\nJustify each of the steps labeled a, b and c in the work above.\n\nSolution to Question 2:\n\n\n\n??\n??\n??"
  },
  {
    "objectID": "Chp4/23-Solving-IVP-with-Laplace-Transforms.html#step-3-use-the-previous-solution-to-obtain-a-solution-of-the-original-problem.",
    "href": "Chp4/23-Solving-IVP-with-Laplace-Transforms.html#step-3-use-the-previous-solution-to-obtain-a-solution-of-the-original-problem.",
    "title": "4.4: Solving ODEs with Laplace Transforms",
    "section": "Step 3: Use the previous solution to obtain a solution of the original problem.",
    "text": "Step 3: Use the previous solution to obtain a solution of the original problem.\n\n\nTake the inverse Laplace transform and solve for \\(y(t) = \\mathscr{L}^{-1}\\{Y(x) \\}\\).\nThe function sympy.inverse_laplace_transform(F,s,t) will be helpful!\n\nA solution to the original differential equation is a function \\(y(t)\\) whose Laplace transform is \\(Y(s)\\) from Step 2. Thus we apply the inverse Laplace transfrom to the result from Step 2 and solve for \\(y(t)\\).\n\\[\\begin{array}{rcll}\n\\mathscr{L}^{-1} \\left\\{ Y(s) \\right\\} &=& \\mathscr{L}^{-1} \\left\\{ \\dfrac{2s}{s^2-2s+5} \\right\\} & {\\color{tomato}{\\mbox{Applying $\\mathscr{L}^{-1}$ to both sides.}}}\\\\\ny(t) &=& \\mathscr{L}^{-1} \\left\\{ \\dfrac{2s}{(s-1)^2 + 4} \\right\\} & {\\color{tomato}{\\mbox{a. justification ??}}}\\\\\ny(t) &=& 2 \\mathscr{L}^{-1} \\left\\{ \\dfrac{s}{(s-1)^2 + 4} \\right\\} & {\\color{tomato}{\\mbox{b. justification ??}}}\\\\\ny(t) &=& 2 \\mathscr{L}^{-1} \\left\\{ \\dfrac{s-1+1}{(s-1)^2 + 4} \\right\\} & {\\color{tomato}{\\mbox{c. justification ??}}}\\\\\ny(t) &=& 2 \\mathscr{L}^{-1} \\left\\{ \\dfrac{s-1}{(s-1)^2 + 4} +  \\dfrac{1}{(s-1)^2 + 4} \\right\\} & {\\color{tomato}{\\mbox{d. justification ??}}}\\\\\ny(t) &=& 2 \\mathscr{L}^{-1} \\left\\{ \\dfrac{s-1}{(s-1)^2 + 4} \\right\\} + 2 \\mathscr{L}^{-1} \\left\\{ \\dfrac{1}{(s-1)^2 + 4} \\right\\} & {\\color{tomato}{\\mbox{e. justification ??}}}\\\\\ny(t) &=& 2 \\mathscr{L}^{-1} \\left\\{ \\dfrac{s-1}{(s-1)^2 + 4} \\right\\} + \\mathscr{L}^{-1} \\left\\{ \\dfrac{2}{(s-1)^2 + 4} \\right\\} & {\\color{tomato}{\\mbox{f. justification ??}}}\\\\\ny(t) &=& 2e^t\\cos{(2t)}+ e^t\\sin{(2t)} & {\\color{tomato}{\\mbox{g. justification ??}}}\\\\\n\\end{array}\\]"
  },
  {
    "objectID": "Chp4/23-Solving-IVP-with-Laplace-Transforms.html#sec-23quest3",
    "href": "Chp4/23-Solving-IVP-with-Laplace-Transforms.html#sec-23quest3",
    "title": "4.4: Solving ODEs with Laplace Transforms",
    "section": "Question 3:",
    "text": "Question 3:\n\nJustify each of the steps labeled a to g in the work above.\n\nSolution to Question 3:\n\n\n\n??\n??\n??\n??\n??\n??\n??"
  },
  {
    "objectID": "Chp4/23-Solving-IVP-with-Laplace-Transforms.html#sec-23quest4",
    "href": "Chp4/23-Solving-IVP-with-Laplace-Transforms.html#sec-23quest4",
    "title": "4.4: Solving ODEs with Laplace Transforms",
    "section": "Question 4:",
    "text": "Question 4:\n\nIn Questions 1, 2, and 3 we apply the Laplace transform to solve the differential equation\n\\[y''-2y'+5y=0 \\quad \\mbox{with} \\quad y(0)=2 \\mbox{ and } y'(0)=4,\\]\nand we discovered the solution\n\\[y(t) = 2e^t\\cos{(2t)}+ e^t\\sin{(2t)}.\\]\n\nQuestion 4a:\n\nWhat other method(s) for solving differential equations could we use to solve this differential equation?\n\nSolution to Question 4a:\n\n\n\n\n\n\n\nQuestion 4b:\n\nBased on your answer to part a, explain why the form of the solution is not surprising.\n\nSolution to Question 4b:\n\n\n\n\n\n\n\nQuestion 4c:\n\nWhat are some of the pros and cons of using the Laplace transforms to solve the differential equation compared to the method you identified in part a?\n\nSolution to Question 4c:"
  },
  {
    "objectID": "Chp4/23-Solving-IVP-with-Laplace-Transforms.html#defining-laplace-and-inverse-laplace-transform-functions",
    "href": "Chp4/23-Solving-IVP-with-Laplace-Transforms.html#defining-laplace-and-inverse-laplace-transform-functions",
    "title": "4.4: Solving ODEs with Laplace Transforms",
    "section": "Defining Laplace and Inverse Laplace Transform Functions:",
    "text": "Defining Laplace and Inverse Laplace Transform Functions:\n\nRun the code cell below to define the Laplace transform function L(f) and inverse Laplace transform function invL(F).\n\nimport sympy as sym\nfrom sympy.abc import s,t\n\n# Just run this code cell. Do Not Edit.\n\n# Define the Laplace transform function\ndef L(f):\n    return sym.laplace_transform(f, s, t)\n\n# Define the inverse Laplace transform function\ndef invL(F):\n    return sym.inverse_laplace_transform(F, s, t)"
  },
  {
    "objectID": "Chp4/23-Solving-IVP-with-Laplace-Transforms.html#sec-23quest5",
    "href": "Chp4/23-Solving-IVP-with-Laplace-Transforms.html#sec-23quest5",
    "title": "4.4: Solving ODEs with Laplace Transforms",
    "section": "Question 5:",
    "text": "Question 5:\n\nIn Question 3, you explain the algebra and properties of inverse Laplace transforms applied in Step 3 of solving a differential equation with the Laplace transform. Below is a recap of the result.\nWhat is a function \\(y(t)\\) whose Laplace tranform is \\(Y(s) = \\dfrac{2s}{s^2-2s+5}\\)?\n\\[\\begin{array}{rcl}\n\\mathscr{L}^{-1} \\left\\{ Y(s) \\right\\} &=& \\mathscr{L}^{-1} \\left\\{ \\dfrac{2s}{s^2-2s+5} \\right\\} \\\\\n\\vdots & = & \\vdots \\\\\ny(t) &=& 2e^t\\cos{(2t)}+ e^t\\sin{(2t)}\\\\\n\\end{array}\\]\nEdit the code cell below to use SymPy to solve for \\(y(t)\\) and verify the previous answer. Be sure you first run the previous code cell to import SymPy and Laplace transform functions.\n\nSolution to Question 5:\n\n\n Edit the code cell below. \n\n\n#############################################################\n# STUDENT TO DO: \n# Replace the ?? with an approrpriate expression\n#############################################################\n\nF =   # define your function Y(s) with respect to s\n\ninvL(F)  # Solve for y(t)"
  },
  {
    "objectID": "Chp4/23-Solving-IVP-with-Laplace-Transforms.html#sec-23quest6",
    "href": "Chp4/23-Solving-IVP-with-Laplace-Transforms.html#sec-23quest6",
    "title": "4.4: Solving ODEs with Laplace Transforms",
    "section": "Question 6: Checking Your Answer in Python",
    "text": "Question 6: Checking Your Answer in Python\n\nWe applied Laplace transforms to solve the differential equation\n\\[y''-2y'+5y=0 \\quad \\mbox{with} \\quad y(0)=2 \\mbox{ and } y'(0)=4,\\]\nand we discovered the solution\n\\[y(t) = 2e^t\\cos{(2t)}+ e^t\\sin{(2t)}.\\]\nEdit the code cell below to use SymPy to plug \\(y(t)\\) into the differential equation to verify it satisfies the differential equation.\n\nSolution to Question 6:\n\n\n\nEdit the code cell below. \n\n\n#############################################################\n# STUDENT TO DO: \n# Replace the ?? with an approrpriate expression\n#############################################################\n\ny = ??\n\ndy = y.diff(t, 1)  # compute y'\nddy = y.diff(t, 2)  # compute y''\n\n#############################################################\n# STUDENT TO DO: \n# Replace the ?? with an approrpriate expression\n#############################################################\n\nleft = sym.simplify(??)\nright = 0\n\n#############################################################\n# Check initial conditions\n#############################################################\n\ny0 = y.evalf(subs={t:0})\nprime0 = dy.evalf(subs={t:0})\n\nprint(\"The left side is \", left, \n      \"\\n \\n The right side is \", right,\n      \"\\n \\n y(0) =  \", y0,\n      \"\\n \\n y'(0) =  \", prime0)"
  },
  {
    "objectID": "Chp4/23-Solving-IVP-with-Laplace-Transforms.html#sec-23quest7",
    "href": "Chp4/23-Solving-IVP-with-Laplace-Transforms.html#sec-23quest7",
    "title": "4.4: Solving ODEs with Laplace Transforms",
    "section": "Question 7:",
    "text": "Question 7:\n\nSolve the initial value problem using the Laplace Transform. You may use Python as much (or as little) as you like.\n\\[y''-y'-2y=0 \\quad \\mbox{with} \\quad y(0)=-2 \\mbox{ and } y'(0)=5.\\]\n\nSolution to Question 7:\n\n\n It is recommended to do some work by hand and use Python to help with part of the process. Feel free to add some Python code cells below."
  },
  {
    "objectID": "Chp4/23-Solving-IVP-with-Laplace-Transforms.html#sec-23quest8",
    "href": "Chp4/23-Solving-IVP-with-Laplace-Transforms.html#sec-23quest8",
    "title": "4.4: Solving ODEs with Laplace Transforms",
    "section": "Question 8:",
    "text": "Question 8:\n\nSolve the initial value problem using Laplace Transforms. You may use Python as much (or as little) as you like.\n\\[y''-4y'-5y=4e^{3t} \\quad \\mbox{with} \\quad y(0)=2 \\mbox{ and } y'(0)=7.\\]\n\nSolution to Question 8:\n\n\n It is recommended to do some work by hand and use Python to help with part of the process. Feel free to add some Python code cells below."
  },
  {
    "objectID": "Chp4/23-Solving-IVP-with-Laplace-Transforms.html#sec-23quest9",
    "href": "Chp4/23-Solving-IVP-with-Laplace-Transforms.html#sec-23quest9",
    "title": "4.4: Solving ODEs with Laplace Transforms",
    "section": "Question 9:",
    "text": "Question 9:\n\nSolve the initial value problem using Laplace Transforms. You may use Python as much (or as little) as you like.\n\\[ty''-ty'+y=2 \\quad \\mbox{with} \\quad y(0)=2 \\mbox{ and } y'(0)=-1.\\]\n\nSolution to Question 9:\n\n\n It is recommended to do some work by hand and use Python to help with part of the process. Feel free to add some Python code cells below."
  },
  {
    "objectID": "Chp4/23-Solving-IVP-with-Laplace-Transforms.html#sec-23quest10",
    "href": "Chp4/23-Solving-IVP-with-Laplace-Transforms.html#sec-23quest10",
    "title": "4.4: Solving ODEs with Laplace Transforms",
    "section": "Question 10:",
    "text": "Question 10:\n\nSolve the initial value problem using Laplace Transforms. You may use Python as much (or as little) as you like.\n\\[y''+ty'-y=0 \\quad \\mbox{with} \\quad y(0)=0 \\mbox{ and } y'(0)=3.\\]\n\nSolution to Question 10:\n\n\n It is recommended to do some work by hand and use Python to help with part of the process. Feel free to add some Python code cells below."
  }
]